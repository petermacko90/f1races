{"version":3,"sources":["api.js","ThemeContext.js","constants.js","components/Header.js","helpers.js","components/Race.js","components/RaceList.js","components/RaceResults.js","components/AddNotification.js","components/RaceDetails.js","components/Notifications.js","localStorage.js","components/Calendars.js","components/SeasonSelect.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["urlBase","fetchData","url","fetch","then","response","json","fetchRaces","season","concat","fetchRaceResults","round","ThemeContext","React","createContext","ThemeProvider","Provider","ThemeConsumer","Consumer","FIRST_SEASON","CURRENT_SEASON","Date","getFullYear","teams","id","name","notificationOptions","10","30","60","120","1440","Header","_ref","setRoute","route","setTheme","react_default","a","createElement","theme","className","value","onChange","aria-label","map","team","key","onClick","getDate","date","time","Race","country","locality","upcomingRace","onClickRace","onEnterRace","striped","Number","upcoming","dateTime","onKeyPress","title","tabIndex","toLocaleDateString","toLocaleTimeString","RaceList","races","isLoading","error","onSaveRaces","react","index_es","icon","faSave","message","race","src_components_Race","Circuit","Location","RaceResults","results","res","Driver","driverId","position","grid","givenName","familyName","Constructor","Time","laps","status","points","FastestLap","AverageSpeed","speed","units","AddNotification","addNotification","raceName","notificationWhen","setNotificationWhen","options","_i","_Object$entries","Object","entries","length","_ref4","_ref3","slicedToArray","push","faBell","RaceDetails","raceCount","isLoadingResults","resultsError","getRaceResults","faChevronLeft","faChevronRight","components_AddNotification","href","target","rel","faExternalLinkAlt","circuitName","src_components_RaceResults","disabled","faSpinner","spin","Notifications","notifications","deleteNotification","sortedNotifications","slice","sort","b","notificationDate","notification","notified","raceDate","faTrashAlt","saveRaces","serializedRaces","JSON","stringify","localStorage","setItem","console","loadRaces","locationObject","Joi","object","keys","lat","string","long","required","circuitObject","circuitId","raceObject","schema","array","items","getItem","parse","validate","removeItem","saveNotifications","serializedNotifications","saveTheme","Calendars","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","deleteCalendar","calendar","calendars","state","filter","c","setState","i","l","test","getCalendars","_this2","sortedCalendars","Component","SeasonSelect","onSelectSeason","onChangeSeason","seasonOptions","Footer","App","e","checkNotifications","nowTime","Math","floor","getTime","forEach","body","notificationTime","Notification","getRaces","newRaces","defineProperty","objectSpread","data","MRData","RaceTable","Races","Error","catch","Results","deepmerge","raceRound","selectRace","selectedRaceRound","setSeason","change","newSeason","toast","success","window","setMinutes","getMinutes","permission","requestPermission","notificationObject","number","boolean","loadNotifications","loadTheme","interval","setInterval","clearInterval","_this$state","seasonRaces","selectedRace","findIndex","raceResults","d","src_components_Header","react_toastify","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","components_Notifications","src_components_Calendars","src_components_RaceDetails","src_components_SeasonSelect","components_RaceList","components_Footer","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"udAAMA,EAAU,4BAEVC,EAAY,SAACC,GACjB,OAAOC,MAAMD,GAAKE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,UAGjCC,EAAa,SAACC,GACzB,OAAOP,EAAS,GAAAQ,OAAIT,EAAJ,KAAAS,OAAeD,EAAf,WAGLE,EAAmB,SAACF,EAAQG,GACvC,OAAOV,EAAS,GAAAQ,OAAIT,EAAJ,KAAAS,OAAeD,EAAf,KAAAC,OAAyBE,EAAzB,4BCTZC,UAAeC,IAAMC,cAAc,KAC5BC,EAAgBH,EAAaI,SAC7BC,EAAgBL,EAAaM,SCJ7BC,EAAe,KACfC,GAAiB,IAAIC,MAAOC,cAE5BC,EAAQ,CACnB,CAAEC,GAAI,UAAWC,KAAM,WACvB,CAAED,GAAI,WAAYC,KAAM,YACxB,CAAED,GAAI,UAAWC,KAAM,mBACvB,CAAED,GAAI,UAAWC,KAAM,WACvB,CAAED,GAAI,OAAQC,KAAM,QACpB,CAAED,GAAI,cAAeC,KAAM,gBAC3B,CAAED,GAAI,YAAaC,KAAM,cACzB,CAAED,GAAI,UAAWC,KAAM,WACvB,CAAED,GAAI,YAAaC,KAAM,qBACzB,CAAED,GAAI,WAAYC,KAAM,aAGbC,EAAsB,CACjCC,GAAM,aACNC,GAAM,aACNC,GAAM,SACNC,IAAO,UACPC,KAAQ,SC0BKC,EA1CA,SAAAC,GAAmC,IAAhCC,EAAgCD,EAAhCC,SAAUC,EAAsBF,EAAtBE,MAAOC,EAAeH,EAAfG,SACjC,OACEC,EAAAC,EAAAC,cAACtB,EAAD,KACG,SAAAuB,GAAK,OACJH,EAAAC,EAAAC,cAAA,UAAQE,UAAWD,GACjBH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAW,WAAaD,GAA5B,YACAH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACbJ,EAAAC,EAAAC,cAAA,UAAQG,MAAOF,EAAOG,SAAUP,EAAUK,UAAWD,EACrDI,aAAW,gBAEPrB,EAAMsB,IAAI,SAAAC,GACR,OACET,EAAAC,EAAAC,cAAA,UAAQQ,IAAKD,EAAKtB,GAAIkB,MAAOI,EAAKtB,IAC/BsB,EAAKrB,WAQpBY,EAAAC,EAAAC,cAAA,OAAKE,UAAWD,GACdH,EAAAC,EAAAC,cAAA,UAAQS,QAASd,EAAS,YAC1BO,UAAS,GAAAhC,OAAe,aAAV0B,EAAuB,SAAW,GAAvC,KAAA1B,OAA6C+B,IADtD,YAIAH,EAAAC,EAAAC,cAAA,UAAQS,QAASd,EAAS,iBAC1BO,UAAS,GAAAhC,OAAe,kBAAV0B,EAA4B,SAAW,GAA5C,KAAA1B,OAAkD+B,IAD3D,uBAIAH,EAAAC,EAAAC,cAAA,UAAQS,QAASd,EAAS,aAC1BO,UAAS,GAAAhC,OAAe,cAAV0B,EAAwB,SAAW,GAAxC,KAAA1B,OAA8C+B,IADvD,wBCpCCS,UAAU,SAACC,EAAMC,GAC5B,OAAOA,EAAO,IAAI9B,KAAK6B,EAAO,IAAMC,GAAQ,IAAI9B,KAAK6B,KC8BxCE,EA1BF,SAAAnB,GAGP,IAFJtB,EAEIsB,EAFJtB,MAAO0C,EAEHpB,EAFGoB,QAASC,EAEZrB,EAFYqB,SAAUJ,EAEtBjB,EAFsBiB,KAAMC,EAE5BlB,EAF4BkB,KAAMI,EAElCtB,EAFkCsB,aACtCC,EACIvB,EADJuB,YAAaC,EACTxB,EADSwB,YAEPC,EAAUC,OAAOhD,GAAS,IAAM,EAAI,UAAY,GAChDiD,EAAWL,EAAe,WAAa,GACvCM,EAAWZ,EAAQC,EAAMC,GAE/B,OACEd,EAAAC,EAAAC,cAACtB,EAAD,KACG,SAAAuB,GAAK,OACJH,EAAAC,EAAAC,cAAA,OAAKE,UAAS,qBAAAhC,OAAuBiD,EAAvB,KAAAjD,OAAkCmD,EAAlC,KAAAnD,OAA8C+B,GAC5DQ,QAASQ,EAAY7C,GAAQmD,WAAYL,EAAY9C,GACrDoD,MAAM,eAAeC,SAAS,KAC5B3B,EAAAC,EAAAC,cAAA,QAAME,UAAU,SAAS9B,EAAzB,KACA0B,EAAAC,EAAAC,cAAA,QAAME,UAAU,YAAYY,EAA5B,KAAuCC,GACvCjB,EAAAC,EAAAC,cAAA,QAAME,UAAU,aACdJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,QAAQoB,EAASI,sBACjC5B,EAAAC,EAAAC,cAAA,QAAME,UAAU,QAASU,GAAQU,EAASK,2CCoBvCC,EAtCE,SAAAlC,GAEX,IADJmC,EACInC,EADJmC,MAAOb,EACHtB,EADGsB,aAAcc,EACjBpC,EADiBoC,UAAWC,EAC5BrC,EAD4BqC,MAAOd,EACnCvB,EADmCuB,YAAaC,EAChDxB,EADgDwB,YAAac,EAC7DtC,EAD6DsC,YAEjE,OACElC,EAAAC,EAAAC,cAACtB,EAAD,KACG,SAAAuB,GAAK,OACJH,EAAAC,EAAAC,cAACiC,EAAA,SAAD,MACKF,IAAUD,GACXhC,EAAAC,EAAAC,cAAA,UAAQS,QAASuB,EACjB9B,UAAW,oBAAsBD,GAC/BH,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAiBC,KAAMC,MAFzB,kBAKAN,GAAahC,EAAAC,EAAAC,cAAA,KAAGE,UAAU,OAAb,cACb6B,GAASjC,EAAAC,EAAAC,cAAA,KAAGE,UAAU,OAAO6B,EAAMM,SACnCR,GACAA,EAAMvB,IAAI,SAAAgC,GACR,OACExC,EAAAC,EAAAC,cAACuC,EAAD,CACE/B,IAAK8B,EAAKlE,MACVA,MAAOkE,EAAKlE,MACZ0C,QAASwB,EAAKE,QAAQC,SAAS3B,QAC/BC,SAAUuB,EAAKE,QAAQC,SAAS1B,SAChCJ,KAAM2B,EAAK3B,KACXC,KAAM0B,EAAK1B,KACXI,aAAcI,OAAOkB,EAAKlE,SAAWgD,OAAOJ,GAC5CC,YAAaA,EACbC,YAAaA,UCqBhBwB,iBAlDK,SAAAhD,GAAiB,IAAdiD,EAAcjD,EAAdiD,QACrB,OACE7C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,KAAKsB,MAAM,mBAAzB,QACA1B,EAAAC,EAAAC,cAAA,MAAIE,UAAU,KAAKsB,MAAM,iBAAzB,QACA1B,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,MAAd,QACAJ,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,KAAKsB,MAAM,UAAzB,OACA1B,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,MAAIwB,MAAM,iBAAV,eAGJ1B,EAAAC,EAAAC,cAAA,aAEI2C,EAAQrC,IAAI,SAAAsC,GACV,OACE9C,EAAAC,EAAAC,cAAA,MAAIQ,IAAKoC,EAAIC,OAAOC,SAAWF,EAAIG,UACjCjD,EAAAC,EAAAC,cAAA,MAAIE,UAAU,MAAM0C,EAAIG,SAAxB,KACAjD,EAAAC,EAAAC,cAAA,MAAIE,UAAU,MAAM0C,EAAII,KAAxB,KACAlD,EAAAC,EAAAC,cAAA,UAAK4C,EAAIC,OAAOI,UAAhB,IAA4BL,EAAIC,OAAOK,YACvCpD,EAAAC,EAAAC,cAAA,UAAK4C,EAAIO,YAAYjE,MACrBY,EAAAC,EAAAC,cAAA,UAAK4C,EAAIQ,KAAOR,EAAIQ,KAAKxC,KAAO,OAChCd,EAAAC,EAAAC,cAAA,MAAIE,UAAU,MAAM0C,EAAIS,MACxBvD,EAAAC,EAAAC,cAAA,UAAK4C,EAAIU,QACTxD,EAAAC,EAAAC,cAAA,MAAIE,UAAU,MAAM0C,EAAIW,QACxBzD,EAAAC,EAAAC,cAAA,UAAK4C,EAAIY,WAAaZ,EAAIY,WAAWJ,KAAKxC,KAAM,OAChDd,EAAAC,EAAAC,cAAA,UAEI4C,EAAIY,WAAJ,GAAAtF,OACK0E,EAAIY,WAAWC,aAAaC,MADjC,KAAAxF,OAC0C0E,EAAIY,WAAWC,aAAaE,OACpE,wBCRTC,EA1BS,SAAAlE,GAItB,IAFI,IADJmE,EACInE,EADJmE,gBAAiBC,EACbpE,EADaoE,SAAUxC,EACvB5B,EADuB4B,SAAUyC,EACjCrE,EADiCqE,iBAAkBC,EACnDtE,EADmDsE,oBAEnDC,EAAU,GACdC,EAAA,EAAAC,EAA2BC,OAAOC,QAAQlF,GAA1C+E,EAAAC,EAAAG,OAAAJ,IAAgE,KAAAK,EAAAJ,EAAAD,GAAAM,EAAAJ,OAAAK,EAAA,EAAAL,CAAAG,EAAA,GAApD/D,EAAoDgE,EAAA,GAA/CrE,EAA+CqE,EAAA,GAC9DP,EAAQS,KAAK5E,EAAAC,EAAAC,cAAA,UAAQQ,IAAKA,EAAKL,MAAOK,GAAML,EAAQ,YAGtD,OACEL,EAAAC,EAAAC,cAACtB,EAAD,KACG,SAAAuB,GAAK,OACJH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQE,UAAW,UAAYD,EAC/BQ,QAASoD,EAAgBC,EAAUxC,EAAUyC,IAC3CjE,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAiBC,KAAMwC,MAFzB,qBAIA7E,EAAAC,EAAAC,cAAA,UAAQG,MAAO4D,EAAkB3D,SAAU4D,EAC3C9D,UAAWD,EAAOI,aAAW,4BAC1B4D,OC6DEW,EA1EK,SAAAlF,GAGd,IAFJ4C,EAEI5C,EAFJ4C,KAAMuC,EAEFnF,EAFEmF,UAAWlC,EAEbjD,EAFaiD,QAASmC,EAEtBpF,EAFsBoF,iBAAkBC,EAExCrF,EAFwCqF,aAAc9D,EAEtDvB,EAFsDuB,YAC1D+D,EACItF,EADJsF,eAAgBnB,EACZnE,EADYmE,gBAAiBE,EAC7BrE,EAD6BqE,iBAAkBC,EAC/CtE,EAD+CsE,oBAE7C1C,EAAWZ,EAAQ4B,EAAK3B,KAAM2B,EAAK1B,MACnCxC,EAAQgD,OAAOkB,EAAKlE,OAE1B,OACE0B,EAAAC,EAAAC,cAACtB,EAAD,KACG,SAAAuB,GAAK,OACJH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uBAED,IAAV9B,GACE0B,EAAAC,EAAAC,cAAA,UAAQE,UAAW,2BAA6BD,EAChDQ,QAASQ,EAAY7C,EAAQ,IAC3B0B,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAiBC,KAAM8C,MAFzB,kBAMF7G,IAAUyG,GACR/E,EAAAC,EAAAC,cAAA,UAAQE,UAAW,uBAAyBD,EAC5CQ,QAASQ,EAAY7C,EAAQ,IAD7B,aAEY0B,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAiBC,KAAM+C,QAIzCpF,EAAAC,EAAAC,cAACmF,EAAD,CACEtB,gBAAiBA,EACjBC,SAAUxB,EAAKwB,SACfxC,SAAUA,EACVyC,iBAAkBA,EAClBC,oBAAqBA,IAEvBlE,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,kBAASF,EAAAC,EAAAC,cAAA,KAAGoF,KAAM9C,EAAK3E,IAAKuC,UAAU,aACtCmF,OAAO,SAASC,IAAI,uBACjBhD,EAAKwB,SAFC,IAEShE,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAiBC,KAAMoD,QAEzCzF,EAAAC,EAAAC,cAAA,oBAAYsC,EAAKrE,QACjB6B,EAAAC,EAAAC,cAAA,mBAAW5B,GACX0B,EAAAC,EAAAC,cAAA,sBACasC,EAAKE,QAAQC,SAAS3B,QADnC,KAC8CwB,EAAKE,QAAQC,SAAS1B,UAEpEjB,EAAAC,EAAAC,cAAA,qBAAYF,EAAAC,EAAAC,cAAA,KAAGoF,KAAM9C,EAAKE,QAAQ7E,IAAKuC,UAAU,aACjDmF,OAAO,SAASC,IAAI,uBACjBhD,EAAKE,QAAQgD,YAFJ,IAEiB1F,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAiBC,KAAMoD,QAEpDzF,EAAAC,EAAAC,cAAA,2BACkBsB,EAASI,qBAD3B,IACkDY,EAAK1B,MAAQU,EAASK,sBAGtEgB,EACE7C,EAAAC,EAAAC,cAACyF,EAAD,CAAa9C,QAASA,IAEtB7C,EAAAC,EAAAC,cAAA,UAAQS,QAASuE,EAAe1C,EAAKrE,OAAQG,GAC7C8B,UAAW,UAAYD,EAAOyF,SAAUZ,GAEpCA,EACEhF,EAAAC,EAAAC,cAACiC,EAAA,SAAD,KACEnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAiBC,KAAMwD,IAAWC,MAAM,IAD1C,IACoD,cAGpD9F,EAAAC,EAAAC,cAACiC,EAAA,SAAD,sBAIR8C,GAAgBjF,EAAAC,EAAAC,cAAA,SAAI+E,EAAa1C,aCpB9BwD,EAtDO,SAAAnG,GAA2C,IAAxCoG,EAAwCpG,EAAxCoG,cAAeC,EAAyBrG,EAAzBqG,mBAChCC,EAAsBF,EAAcG,QAAQC,KAAK,SAACnG,EAAGoG,GACzD,OAAOpG,EAAEqG,iBAAmBD,EAAEC,mBAGhC,OACEtG,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,aAAd,uBAE2B,IAAzB4F,EAAcxB,OACZxE,EAAAC,EAAAC,cAAA,KAAGE,UAAU,OAAb,0BAEAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,iCAGJF,EAAAC,EAAAC,cAAA,aAEIgG,EAAoB1F,IAAI,SAAA+F,GAAgB,IAEpCpH,EACEoH,EADFpH,GAAIuC,EACF6E,EADE7E,MAAO8E,EACTD,EADSC,SAAUC,EACnBF,EADmBE,SAAUH,EAC7BC,EAD6BD,iBAEjC,OACEtG,EAAAC,EAAAC,cAAA,MAAIQ,IAAKvB,GACPa,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAQS,QAASsF,EAAmB9G,GACpCiB,UAAU,SAASsB,MAAM,uBACvB1B,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAiBC,KAAMqE,QAG3B1G,EAAAC,EAAAC,cAAA,UAAKwB,GACL1B,EAAAC,EAAAC,cAAA,UAAKsG,EAAW,MAAO,MACvBxG,EAAAC,EAAAC,cAAA,UAAKuG,EAAS7E,qBAAd,IAAqC6E,EAAS5E,sBAC9C7B,EAAAC,EAAAC,cAAA,UAAKoG,EAAiB1E,qBAAtB,IAA6C0E,EAAiBzE,uDC1BzE8E,EAAY,SAAC5E,EAAO5D,GAC/B,IACE,IAAMyI,EAAkBC,KAAKC,UAAU/E,GACvCgF,aAAaC,QAAQ,YAAc7I,EAAQyI,GAC3C,MAAO3E,GAEP,OADAgF,QAAQhF,MAAM,6BAA8BA,GACrCA,IAIEiF,EAAY,SAAC/I,GACxB,IACE,IAAMgJ,EAAiBC,IAAIC,SAASC,KAAK,CACvCC,IAAKH,IAAII,SACTC,KAAML,IAAII,SACVvG,SAAUmG,IAAII,SAASE,WACvB1G,QAASoG,IAAII,SAASE,aAElBC,EAAgBP,IAAIC,SAASC,KAAK,CACtCM,UAAWR,IAAII,SACf3J,IAAKuJ,IAAII,SAASE,WAClBhC,YAAa0B,IAAII,SAASE,WAC1B/E,SAAUwE,EAAeO,aAErBG,EAAaT,IAAIC,SAASC,KAAK,CACnCnJ,OAAQiJ,IAAII,SAASE,WACrBpJ,MAAO8I,IAAII,SAASE,WACpB7J,IAAKuJ,IAAII,SAASE,WAClB1D,SAAUoD,IAAII,SAASE,WACvBhF,QAASiF,EAAcD,WACvB7G,KAAMuG,IAAII,SAASE,WACnB5G,KAAMsG,IAAII,WAENM,EAASV,IAAIW,QAAQC,MAAMH,GAE3BjB,EAAkBG,aAAakB,QAAQ,YAAc9J,GAC3D,GAAwB,OAApByI,EAA0B,OAC9B,IAAM7E,EAAQ8E,KAAKqB,MAAMtB,GAGzB,OADaQ,IAAIe,SAASpG,EAAO+F,GACxB7F,WACP8E,aAAaqB,WAAW,YAAcjK,GAG/B4D,EAET,MAAOE,GAEP,YADAgF,QAAQhF,MAAM,+BAAgCA,KAKrCoG,EAAoB,SAACrC,GAChC,IACE,IAAMsC,EAA0BzB,KAAKC,UAAUd,GAC/Ce,aAAaC,QAAQ,gBAAiBsB,GACtC,MAAOrG,GAEP,OADAgF,QAAQhF,MAAM,6BAA8BA,GACrCA,IAsCEsG,EAAY,SAACpI,GACxB,IACE4G,aAAaC,QAAQ,QAAS7G,GAC9B,MAAO8B,GACPgF,QAAQhF,MAAM,6BAA8BA,KC3DjCuG,cApDb,SAAAA,IAAc,IAAAC,EAAA,OAAAnE,OAAAoE,EAAA,EAAApE,CAAAqE,KAAAH,IACZC,EAAAnE,OAAAsE,EAAA,EAAAtE,CAAAqE,KAAArE,OAAAuE,EAAA,EAAAvE,CAAAkE,GAAAM,KAAAH,QAWFI,eAAiB,SAACC,GAAD,OAAc,WAC7B,IAAMC,EAAYR,EAAKS,MAAMD,UAAUE,OAAO,SAAAC,GAAC,OAAIA,IAAMJ,IACzDP,EAAKY,SAAS,CAAEJ,cAChBlC,aAAaqB,WAAWY,KAbxBP,EAAKS,MAAQ,CACXD,UAAW,IAHDR,mFAQZ,IAAMQ,EDZkB,WAC1B,IAEE,IADA,IAAIA,EAAY,GACPK,EAAI,EAAGC,EAAIxC,aAAavC,OAAQ8E,EAAIC,EAAGD,IAC1C,mBAAmBE,KAAKzC,aAAarG,IAAI4I,KAC3CL,EAAUrE,KAAKmC,aAAarG,IAAI4I,IAGpC,OAAOL,EACP,MAAOhH,GAEP,OADAgF,QAAQhF,MAAM,+BAAgCA,GACvC,ICCWwH,GAClBd,KAAKU,SAAS,CAAEJ,+CAST,IAAAS,EAAAf,KACDgB,EAAkBhB,KAAKO,MAAMD,UAAU9C,QAAQC,KAAK,SAACnG,EAAGoG,GAC5D,OAAOpG,EAAEkG,OAAO,GAAKE,EAAEF,OAAO,KAGhC,OACEnG,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,aAAd,mBAEkC,IAAhCuI,KAAKO,MAAMD,UAAUzE,OACnBxE,EAAAC,EAAAC,cAAA,KAAGE,UAAU,OAAb,sBAEAJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,aAEVuJ,EAAgBnJ,IAAI,SAAAwI,GAClB,OACEhJ,EAAAC,EAAAC,cAAA,MAAIQ,IAAKsI,GACPhJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,mBAClBsB,MAAM,kBACNf,QAAS+I,EAAKX,eAAeC,IAC3BhJ,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAiBC,KAAMqE,OAEzB1G,EAAAC,EAAAC,cAAA,YAAO8I,EAAS7C,OAAO,gBAzCrByD,aCiCTC,UAhCM,SAAAjK,GAEnB,IAFmE,IAA7CzB,EAA6CyB,EAA7CzB,OAAQ2L,EAAqClK,EAArCkK,eAAgBC,EAAqBnK,EAArBmK,eAC1CC,EAAgB,GACXV,EAAIxK,EAAcwK,GAAKvK,EAAgBuK,IAC9CU,EAAcpF,KAAK5E,EAAAC,EAAAC,cAAA,UAAQQ,IAAK4I,EAAGjJ,MAAOiJ,GAAvB,UAAkCA,IAGvD,OACEtJ,EAAAC,EAAAC,cAACtB,EAAD,KACG,SAAAuB,GAAK,OACJH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACXjC,IAAWW,GACXkB,EAAAC,EAAAC,cAAA,UAAQS,QAASoJ,GAAgB,GAAIrI,MAAM,kBAC3CtB,UAAW,UAAYD,GACrBH,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAiBC,KAAM8C,OAG3BnF,EAAAC,EAAAC,cAAA,UAAQG,MAAOlC,EAAQmC,SAAUwJ,EACjC1J,UAAWD,EAAOI,aAAW,iBAC1ByJ,GAED7L,IAAWY,GACXiB,EAAAC,EAAAC,cAAA,UAAQS,QAASoJ,EAAe,GAAIrI,MAAM,cAC1CtB,UAAW,UAAYD,GACrBH,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAiBC,KAAM+C,YCdtB6E,EAdA,WACb,OACEjK,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OAAf,iBACgBJ,EAAAC,EAAAC,cAAA,KAAGoF,KAAK,2BAA2B5D,MAAM,WAAzC,WADhB,SAEmB1B,EAAAC,EAAAC,cAAA,KAAGoF,KAAK,4BAA4B5D,MAAM,YAA1C,oBAFnB,mBAGsC1B,EAAAC,EAAAC,cAAA,KAAGoF,KAAK,8CAC5C5D,MAAM,0BAA0B6D,OAAO,SACvCC,IAAI,uBAFgC,wBC8W7B0E,sBAhWb,SAAAA,IAAc,IAAAzB,EAAA,OAAAnE,OAAAoE,EAAA,EAAApE,CAAAqE,KAAAuB,IACZzB,EAAAnE,OAAAsE,EAAA,EAAAtE,CAAAqE,KAAArE,OAAAuE,EAAA,EAAAvE,CAAA4F,GAAApB,KAAAH,QAgCF5I,SAAW,SAACoK,GACV1B,EAAKY,SAAS,CAAElJ,MAAOgK,EAAE5E,OAAOlF,QAChCkI,EAAU4B,EAAE5E,OAAOlF,QAnCPoI,EAsCd2B,mBAAqB,WAAM,IACjBpE,EAAkByC,EAAKS,MAAvBlD,cACFqE,EAAUC,KAAKC,OAAM,IAAIvL,MAAOwL,UAAY,IAAO,IAEzDxE,EAAcyE,QAAQ,SAAAlE,GAAgB,IAC5BD,EAA4CC,EAA5CD,iBAAkBG,EAA0BF,EAA1BE,SAAU/E,EAAgB6E,EAAhB7E,MAAOgJ,EAASnE,EAATmE,KACrCC,EAAmBL,KAAKC,MAAMjE,EAAiBkE,UAAY,IAAO,IAEpEG,IAAqBN,GAAY9D,EAAaC,SAKvCmE,EAAmBN,IAAY9D,EAAaC,WACrD,IAAIoE,aAAa,wBAA0BlJ,EAAO,CAChDgJ,KAAI,sBAAAtM,OAAwBkI,EAAiB1E,qBAAzC,KAAAxD,OAAiEkI,EAAiBzE,qBAAlF,iBAAAzD,OACDqI,EAAS7E,qBADR,KAAAxD,OACgCqI,EAAS5E,wBAE/C0E,EAAaC,UAAW,EACxBiC,EAAKY,SAAS,CAAErD,kBAChBqC,EAAkBrC,KAXlB,IAAI4E,aAAalJ,EAAO,CAAEgJ,KAAMA,IAChCnE,EAAaC,UAAW,EACxBiC,EAAKY,SAAS,CAAErD,kBAChBqC,EAAkBrC,OAlDVyC,EA+DdoC,SAAW,SAAC1M,GACV,IAAM4D,EAAQmF,EAAU/I,GACxB,GAAI4D,EAAO,CACT,IAAM+I,EAAQxG,OAAAyG,EAAA,EAAAzG,CAAA,GAAMnG,EAAS4D,GAC7B0G,EAAKY,SAAS,SAACH,GACb,MAAO,CAAEnH,MAAMuC,OAAA0G,EAAA,EAAA1G,CAAA,GAAM4E,EAAMnH,MAAU+I,WAGvCrC,EAAKY,SAAS,CAAErH,WAAW,IAC3B9D,EAAWC,GACRJ,KAAK,SAAAkN,GACJ,GAA2C,IAAvCA,EAAKC,OAAOC,UAAUC,MAAM5G,OAC9B,MAAM6G,MAAM,qBAGd,IAAMP,EAAQxG,OAAAyG,EAAA,EAAAzG,CAAA,GAAMnG,EAAS8M,EAAKC,OAAOC,UAAUC,OACnD3C,EAAKY,SAAS,CACZtH,MAAMuC,OAAA0G,EAAA,EAAA1G,CAAA,GAAMmE,EAAKS,MAAMnH,MAAU+I,GACjC9I,WAAW,IAET7D,IAAWY,GACb4H,EAAUsE,EAAKC,OAAOC,UAAUC,MAAOjN,KAG1CmN,MAAM,SAAArJ,GAAK,OAAIwG,EAAKY,SAAS,CAAEpH,QAAOD,WAAW,OAvF1CyG,EA2FdvD,eAAiB,SAAC/G,EAAQG,GAAT,OAAmB,WAAM,IAChCuE,EAAY4F,EAAKS,MAAjBrG,QAER4F,EAAKY,SAAS,CAAErE,kBAAkB,IAClC3G,EAAiBF,EAAQG,GACtBP,KAAK,SAAAkN,GACJ,GAA2C,IAAvCA,EAAKC,OAAOC,UAAUC,MAAM5G,OAC9B,MAAM6G,MAAM,qBAGd,IAAIvI,EAAGwB,OAAAyG,EAAA,EAAAzG,CAAA,GACJnG,EADImG,OAAAyG,EAAA,EAAAzG,CAAA,GAEFhG,EAAQ2M,EAAKC,OAAOC,UAAUC,MAAM,GAAGG,UAI5C9C,EAAKY,SAAS,CACZxG,QAAS2I,EAAU3I,EAASC,GAC5BkC,kBAAkB,EAClBC,aAAc,SAGjBqG,MAAM,SAAArJ,GACJwG,EAAKY,SAAS,CAAEpE,aAAchD,EAAO+C,kBAAkB,QAlHhDyD,EAsHdtH,YAAc,SAACsK,GAAD,OAAe,WAC3BhD,EAAKiD,WAAWD,KAvHJhD,EA0HdrH,YAAc,SAACqK,GAAD,OAAe,SAACtB,GACd,UAAVA,EAAEzJ,KACJ+H,EAAKiD,WAAWD,KA5HNhD,EAgIdiD,WAAa,SAACD,GACZhD,EAAKY,SAAS,CACZsC,kBAAmBrK,OAAOmK,GAC1B3L,MAAO,cACPmF,aAAc,QApIJwD,EAwIdqB,eAAiB,SAACK,GAChB1B,EAAKmD,UAAUtK,OAAO6I,EAAE5E,OAAOlF,SAzInBoI,EA4IdsB,eAAiB,SAAC8B,GAAD,OAAY,WAC3B,IAAMC,EAAYxK,OAAOmH,EAAKS,MAAM/K,QAAU0N,EAC1CC,GAAahN,GAAgBgN,GAAa/M,GAC5C0J,EAAKmD,UAAUE,KA/ILrD,EAmJdmD,UAAY,SAACzN,GACXsK,EAAKY,SAAS,CACZlL,SACA8D,MAAO,OAEJwG,EAAKS,MAAMnH,MAAM5D,IACpBsK,EAAKoC,SAAS1M,IAzJJsK,EA6JdvG,YAAc,WACEyE,EAAU8B,EAAKS,MAAMnH,MAAM0G,EAAKS,MAAM/K,QAASsK,EAAKS,MAAM/K,QAEtE4N,IAAM9J,MAAM,qCAEZ8J,IAAMC,QAAQ,sCAlKJvD,EAsKd1E,gBAAkB,SAACC,EAAUyC,EAAUxC,GAArB,OAA0C,WAC1D,GAAM,iBAAkBgI,OAKxB,GAAIxF,EAAW,IAAIzH,KACjB+M,IAAM9J,MAAM,4CADd,CAKA,IAAIqE,EAAmB,IAAItH,KAAKyH,GAChCH,EAAiB4F,WAAW5F,EAAiB6F,cAAgB7K,OAAO2C,GAAoBA,EAAmB,KAE3G,IAAIyG,EAAO,kBACXA,GAAQrL,EAAoB4E,GAAoB5E,EAAoB4E,GAAoB5E,EAAoB,IAG5G,IADA,IAAMF,EAAKmH,EAAiBkE,UACnBlB,EAAI,EAAGC,EAAId,EAAKS,MAAMlD,cAAcxB,OAAQ8E,EAAIC,EAAGD,IAC1D,GAAIb,EAAKS,MAAMlD,cAAcsD,GAAGnK,KAAOA,EAErC,YADA4M,IAAM9J,MAAM,+BAKhB,IAAMsE,EAAe,CACnBpH,KACAsH,WACAH,mBACAE,UAAU,EACV9E,MAAOsC,EACP0G,QAG8B,YAA5BE,aAAawB,WACf3D,EAAKY,SACH,SAACH,GACC,MAAO,CAAElD,cAAekD,EAAMlD,cAAc5H,OAAOmI,KAErD,WACgB8B,EAAkBI,EAAKS,MAAMlD,eAEzC+F,IAAM9J,MAAM,0CAEZ8J,IAAMC,QAAQ,yCACdvD,EAAK2B,wBAI0B,WAA5BQ,aAAawB,YACtBxB,aAAayB,oBAAoBtO,KAAK,SAACqO,GAClB,YAAfA,GACF3D,EAAKY,SACH,SAACH,GACC,MAAO,CAAElD,cAAekD,EAAMlD,cAAc5H,OAAOmI,KAErD,WACgB8B,EAAkBI,EAAKS,MAAMlD,eAEzC+F,IAAM9J,MAAM,0CAEZ8J,IAAMC,QAAQ,yCACdvD,EAAK2B,+BA5Df2B,IAAM9J,MAAM,oDAxKFwG,EA6OdxC,mBAAqB,SAAC9G,GAAD,OAAQ,WAC3B,IAAM6G,EAAgByC,EAAKS,MAAMlD,cAAcmD,OAAO,SAAA5C,GACpD,OAAOA,EAAapH,KAAOA,IAEfkJ,EAAkBrC,GAE9B+F,IAAM9J,MAAM,4CAEZwG,EAAKY,SAAS,CAAErD,oBArPNyC,EAyPdvE,oBAAsB,SAACiG,GACrB1B,EAAKY,SAAS,CAAEpF,iBAAkBkG,EAAE5E,OAAOlF,SA1P/BoI,EA6Pd5I,SAAW,SAACC,GAAD,OAAW,WACpB2I,EAAKY,SAAS,CAAEvJ,YA5PhB2I,EAAKS,MAAQ,CACXnH,MAAO,GACPC,WAAW,EACXC,MAAO,KACP9D,OAAQY,EACR4M,kBAAmB,EACnB9I,QAAS,GACTmC,kBAAkB,EAClBC,aAAc,KACde,cAAe,GACf/B,iBAAkB,KAClBnE,MAAO,WACPK,MAAO,IAdGsI,mFAmBZE,KAAKkC,SAASlC,KAAKO,MAAM/K,QACzB,IAAM6H,EJsCuB,WAC/B,IACE,IAAMsG,EAAqBlF,IAAIC,SAASC,KAAK,CAC3CnI,GAAIiI,IAAImF,SAAS7E,WACjBgD,KAAMtD,IAAII,SAASE,WACnBjB,SAAUW,IAAIvG,OAAO6G,WACrBpB,iBAAkBc,IAAIvG,OAAO6G,WAC7BlB,SAAUY,IAAIoF,UAAU9E,WACxBhG,MAAO0F,IAAII,SAASE,aAEhBI,EAASV,IAAIW,QAAQC,MAAMsE,GAE3BhE,EAA0BvB,aAAakB,QAAQ,iBACrD,GAAgC,OAA5BK,EAAkC,OACtC,IAAMtC,EAAgBa,KAAKqB,MAAMI,EAAyB,SAAC5H,EAAKL,GAC9D,MAAY,qBAARK,GAAsC,aAARA,EACzB,IAAI1B,KAAKqB,GAETA,IAKX,OADa+G,IAAIe,SAASnC,EAAe8B,GAChC7F,WACP8E,aAAaqB,WAAW,iBAGjBpC,EAET,MAAO/D,GACP,QIpEsBwK,GAClBzG,GACF2C,KAAKU,SAAS,CAAErD,kBAElB,IAAM7F,EJ4Ee,WACvB,IAEE,IADA,IAAMA,EAAQ4G,aAAakB,QAAQ,SAC1BqB,EAAI,EAAGC,EAAIrK,EAAMsF,OAAQ8E,EAAIC,EAAGD,IACvC,GAAIpK,EAAMoK,GAAGnK,KAAOgB,EAClB,OAAOA,EAGX,MAAO,UACP,MAAO8B,GAEP,OADAgF,QAAQhF,MAAM,+BAAgCA,GACvC,WIvFOyK,GACd/D,KAAKU,SAAS,CAAElJ,UAChBwI,KAAKgE,SAAWC,YAAYjE,KAAKyB,mBAAoB,oDAIrDyC,cAAclE,KAAKgE,2CAmOZ,IAAAG,EAIHnE,KAAKO,MAFPnH,EAFK+K,EAEL/K,MAAOC,EAFF8K,EAEE9K,UAAWC,EAFb6K,EAEa7K,MAAO9D,EAFpB2O,EAEoB3O,OAAQ6H,EAF5B8G,EAE4B9G,cAAe2F,EAF3CmB,EAE2CnB,kBAAmB7L,EAF9DgN,EAE8DhN,MACnE+C,EAHKiK,EAGLjK,QAASmC,EAHJ8H,EAGI9H,iBAAkBC,EAHtB6H,EAGsB7H,aAAchB,EAHpC6I,EAGoC7I,iBAErC8I,EAAcpE,KAAKO,MAAMnH,MAAM5D,GAEjC6O,EAAe,KACnB,GAAIrB,EAAoB,GAAK5J,EAAM5D,GAAS,CAC1C,IAAMmL,EAAIvH,EAAM5D,GAAQ8O,UAAU,SAACzK,GACjC,OAAOlB,OAAOkB,EAAKlE,SAAWqN,IAEhCqB,EAAerE,KAAKO,MAAMnH,MAAM4G,KAAKO,MAAM/K,QAAQmL,GAGrD,IAUI4D,EAVAhM,EAAe,GACnB,GAAI6L,GAAe5O,IAAWY,EAC5B,IAAK,IAAIuK,EAAI,EAAGC,EAAIwD,EAAYvI,OAAQ2I,EAAI,IAAInO,KAAQsK,EAAIC,EAAGD,IAC7D,GAAI6D,EAAI,IAAInO,KAAK+N,EAAYzD,GAAGzI,KAAO,IAAMkM,EAAYzD,GAAGxI,MAAO,CACjEI,EAAe6L,EAAYzD,GAAGhL,MAC9B,MAUN,OAJI0O,GAAgBnK,EAAQmK,EAAa7O,UACvC+O,EAAcrK,EAAQmK,EAAa7O,QAAQ6O,EAAa1O,QAIxD0B,EAAAC,EAAAC,cAACxB,EAAD,CAAe2B,MAAOsI,KAAKO,MAAM/I,OAC/BH,EAAAC,EAAAC,cAACiC,EAAA,SAAD,KACEnC,EAAAC,EAAAC,cAACkN,EAAD,CACEvN,SAAU8I,KAAK9I,SACfC,MAAOA,EACPC,SAAU4I,KAAK5I,WAEjBC,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CACEpK,SAAS,gBACTqK,UAAW,IACXC,iBAAe,EACfC,aAAa,EACbC,cAAc,EACdC,KAAK,EACLC,yBAAuB,EACvBC,WAAW,EACXC,cAAY,IAEF,kBAAV/N,GACAE,EAAAC,EAAAC,cAAC4N,EAAD,CACE9H,cAAeA,EACfC,mBAAoB0C,KAAK1C,qBAGjB,cAAVnG,GAAyBE,EAAAC,EAAAC,cAAC6N,EAAD,MACf,gBAAVjO,GACAE,EAAAC,EAAAC,cAAC8N,EAAD,CACExL,KAAMwK,EACNjI,UAAWgI,EAAYvI,OACvB3B,QAASqK,EACTlI,iBAAkBA,EAClBC,aAAcA,EACd9D,YAAawH,KAAKxH,YAClB+D,eAAgByD,KAAKzD,eACrBnB,gBAAiB4E,KAAK5E,gBACtBE,iBAAkBA,EAClBC,oBAAqByE,KAAKzE,sBAGlB,aAAVpE,GACAE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAC+N,EAAD,CACE9P,OAAQA,EACR2L,eAAgBnB,KAAKmB,eACrBC,eAAgBpB,KAAKoB,iBAEvB/J,EAAAC,EAAAC,cAACgO,EAAD,CACEnM,MAAOgL,EACP7L,aAAcA,EACdc,UAAWA,EACXC,MAAOA,EACPd,YAAawH,KAAKxH,YAClBC,YAAauH,KAAKvH,YAClBc,YAAayG,KAAKzG,eAIxBlC,EAAAC,EAAAC,cAACiO,EAAD,eA1VQvE,cCTZwE,EAAcC,QACW,cAA7BpC,OAAOqC,SAASC,UAEe,UAA7BtC,OAAOqC,SAASC,UAEhBtC,OAAOqC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT3Q,KAAK,SAAAgR,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/F,QACf0F,UAAUC,cAAcO,YAI1BnI,QAAQoI,IACN,gHAKEV,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlB9H,QAAQoI,IAAI,sCAGRV,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,SAO5BzD,MAAM,SAAArJ,GACLgF,QAAQhF,MAAM,4CAA6CA,KCvFjEuN,IAASC,OAAOzP,EAAAC,EAAAC,cAACwP,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,WAAwB7D,OAAOqC,UAC3CyB,SAAW9D,OAAOqC,SAASyB,OAIvC,OAGF9D,OAAO+D,iBAAiB,OAAQ,WAC9B,IAAMtB,EAAK,GAAAtQ,OAAM0R,WAAN,sBAEP1B,GA6DV,SAAiCM,EAAOC,GAEtC7Q,MAAM4Q,GACH3Q,KAAK,SAAAC,GAGkB,MAApBA,EAASwF,SACuD,IAAhExF,EAASiS,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CvB,UAAUC,cAAcuB,MAAMrS,KAAK,SAAAgR,GACjCA,EAAasB,aAAatS,KAAK,WAC7BkO,OAAOqC,SAASgC,aAKpB7B,EAAgBC,EAAOC,KAG1BrD,MAAM,WACLrE,QAAQoI,IACN,mEAjFAkB,CAAwB7B,EAAOC,GAI/BC,UAAUC,cAAcuB,MAAMrS,KAAK,WACjCkJ,QAAQoI,IACN,+GAMJZ,EAAgBC,EAAOC,MC3C/BE","file":"static/js/main.4a4575ee.chunk.js","sourcesContent":["const urlBase = 'https://ergast.com/api/f1';\r\n\r\nconst fetchData = (url) => {\r\n  return fetch(url).then(response => response.json());\r\n}\r\n\r\nexport const fetchRaces = (season) => {\r\n  return fetchData(`${urlBase}/${season}.json`);\r\n}\r\n\r\nexport const fetchRaceResults = (season, round) => {\r\n  return fetchData(`${urlBase}/${season}/${round}/results.json`);\r\n}\r\n","import React from 'react';\r\n\r\nconst ThemeContext = React.createContext('');\r\nexport const ThemeProvider = ThemeContext.Provider;\r\nexport const ThemeConsumer = ThemeContext.Consumer;\r\n","export const FIRST_SEASON = 1950;\r\nexport const CURRENT_SEASON = new Date().getFullYear();\r\n\r\nexport const teams = [\r\n  { id: 'ferrari', name: 'Ferrari' },\r\n  { id: 'mercedes', name: 'Mercedes' },\r\n  { id: 'redbull', name: 'Red Bull Racing' },\r\n  { id: 'renault', name: 'Renault' },\r\n  { id: 'haas', name: 'Haas' },\r\n  { id: 'racingpoint', name: 'Racing Point' },\r\n  { id: 'tororosso', name: 'Toro Rosso' },\r\n  { id: 'mclaren', name: 'McLaren' },\r\n  { id: 'alfaromeo', name: 'Alfa Romeo Racing' },\r\n  { id: 'williams', name: 'Williams' }\r\n];\r\n\r\nexport const notificationOptions = {\r\n  '10': '10 Minutes',\r\n  '30': '30 Minutes',\r\n  '60': '1 Hour',\r\n  '120': '2 Hours',\r\n  '1440': '1 Day'\r\n}\r\n","import React from 'react';\r\nimport './Header.css';\r\nimport { ThemeConsumer } from '../ThemeContext';\r\nimport { teams } from '../constants';\r\n\r\nconst Header = ({ setRoute, route, setTheme }) => {\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <header className={theme}>\r\n          <div className='flex'>\r\n            <h1 className={'dib p10 ' + theme}>F1 Races</h1>\r\n            <div className='select-wrapper'>\r\n              <select value={theme} onChange={setTheme} className={theme}\r\n              aria-label='Select theme'>\r\n                {\r\n                  teams.map(team => {\r\n                    return (\r\n                      <option key={team.id} value={team.id}>\r\n                        {team.name}\r\n                      </option>\r\n                    );\r\n                  })\r\n                }\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <nav className={theme}>\r\n            <button onClick={setRoute('RaceList')}\r\n            className={`${route === 'RaceList' ? 'active' : ''} ${theme}`}>\r\n              Calendar\r\n            </button>\r\n            <button onClick={setRoute('Notifications')}\r\n            className={`${route === 'Notifications' ? 'active' : ''} ${theme}`}>\r\n              Saved Notifications\r\n            </button>\r\n            <button onClick={setRoute('Calendars')}\r\n            className={`${route === 'Calendars' ? 'active' : ''} ${theme}`}>\r\n              Saved Calendars\r\n            </button>\r\n          </nav>\r\n        </header>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","export const getDate = (date, time) => {\r\n  return time ? new Date(date + 'T' + time) : new Date(date);\r\n}\r\n","import React from 'react';\r\nimport './Race.css';\r\nimport { getDate } from '../helpers';\r\nimport { ThemeConsumer } from '../ThemeContext';\r\n\r\nconst Race = ({\r\n  round, country, locality, date, time, upcomingRace,\r\n  onClickRace, onEnterRace\r\n}) => {\r\n  const striped = Number(round) % 2 === 1 ? 'striped' : '';\r\n  const upcoming = upcomingRace ? 'upcoming' : '';\r\n  const dateTime = getDate(date, time);\r\n\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <div className={`race unselectable ${striped} ${upcoming} ${theme}`}\r\n        onClick={onClickRace(round)} onKeyPress={onEnterRace(round)}\r\n        title='Show details' tabIndex='0'>\r\n          <span className='round'>{round}.</span>\r\n          <span className='location'>{country}, {locality}</span>\r\n          <span className='date-time'>\r\n            <span className='date'>{dateTime.toLocaleDateString()}</span>\r\n            <span className='time'>{ time && dateTime.toLocaleTimeString() }</span>\r\n          </span>\r\n        </div>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default Race;\r\n","import React, { Fragment } from 'react';\r\nimport Race from './Race';\r\nimport { ThemeConsumer } from '../ThemeContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\r\nconst RaceList = ({\r\n  races, upcomingRace, isLoading, error, onClickRace, onEnterRace, onSaveRaces\r\n}) => {\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <Fragment>\r\n          { !error && !isLoading &&\r\n            <button onClick={onSaveRaces}\r\n            className={'button ml10 mb10 ' + theme}>\r\n              <FontAwesomeIcon icon={faSave} /> Save calendar\r\n            </button>\r\n          }\r\n          { isLoading && <p className='p10'>Loading...</p> }\r\n          { error && <p className='p10'>{error.message}</p> }\r\n          { races &&\r\n            races.map(race => {\r\n              return (\r\n                <Race\r\n                  key={race.round}\r\n                  round={race.round}\r\n                  country={race.Circuit.Location.country}\r\n                  locality={race.Circuit.Location.locality}\r\n                  date={race.date}\r\n                  time={race.time}\r\n                  upcomingRace={Number(race.round) === Number(upcomingRace)}\r\n                  onClickRace={onClickRace}\r\n                  onEnterRace={onEnterRace}\r\n                />\r\n              );\r\n            })\r\n          }\r\n        </Fragment>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default RaceList;\r\n","import React from 'react';\r\nimport './RaceResults.css';\r\n\r\nconst RaceResults = ({ results }) => {\r\n  return (\r\n    <div className='responsive-table'>\r\n      <h2>Results</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th className='tr' title='Finish Position'>Pos.</th>\r\n            <th className='tr' title='Grid Position'>Grid</th>\r\n            <th>Driver</th>\r\n            <th>Constructor</th>\r\n            <th>Time</th>\r\n            <th className='tr'>Laps</th>\r\n            <th>Status</th>\r\n            <th className='tr' title='Points'>Pts</th>\r\n            <th>Fastest Lap</th>\r\n            <th title='Average Speed'>Avg Speed</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            results.map(res => {\r\n              return (\r\n                <tr key={res.Driver.driverId + res.position}>\r\n                  <td className='tr'>{res.position}.</td>\r\n                  <td className='tr'>{res.grid}.</td>\r\n                  <td>{res.Driver.givenName} {res.Driver.familyName}</td>\r\n                  <td>{res.Constructor.name}</td>\r\n                  <td>{res.Time ? res.Time.time : 'N/A'}</td>\r\n                  <td className='tr'>{res.laps}</td>\r\n                  <td>{res.status}</td>\r\n                  <td className='tr'>{res.points}</td>\r\n                  <td>{res.FastestLap ? res.FastestLap.Time.time: 'N/A'}</td>\r\n                  <td>\r\n                    {\r\n                      res.FastestLap ?\r\n                        `${res.FastestLap.AverageSpeed.speed} ${res.FastestLap.AverageSpeed.units}`\r\n                      : 'N/A'\r\n                    }\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RaceResults;\r\n","import React from 'react';\r\nimport { ThemeConsumer } from '../ThemeContext';\r\nimport { notificationOptions } from '../constants';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBell } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst AddNotification = ({\r\n  addNotification, raceName, dateTime, notificationWhen, setNotificationWhen\r\n}) => {\r\n  let options = [];\r\n  for (const [key, value] of Object.entries(notificationOptions)) {\r\n    options.push(<option key={key} value={key}>{value + ' Before'}</option>);\r\n  }\r\n\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <div>\r\n          <button className={'button ' + theme}\r\n          onClick={addNotification(raceName, dateTime, notificationWhen)}>\r\n            <FontAwesomeIcon icon={faBell} /> Add notification\r\n          </button>\r\n          <select value={notificationWhen} onChange={setNotificationWhen}\r\n          className={theme} aria-label='Select notification time'>\r\n            {options}\r\n          </select>\r\n        </div>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default AddNotification;\r\n","import React, { Fragment } from 'react';\r\nimport './RaceDetails.css';\r\nimport RaceResults from './RaceResults';\r\nimport AddNotification from './AddNotification';\r\nimport { getDate } from '../helpers';\r\nimport { ThemeConsumer } from '../ThemeContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faExternalLinkAlt, faChevronLeft, faChevronRight, faSpinner\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst RaceDetails = ({\r\n  race, raceCount, results, isLoadingResults, resultsError, onClickRace,\r\n  getRaceResults, addNotification, notificationWhen, setNotificationWhen\r\n}) => {\r\n  const dateTime = getDate(race.date, race.time);\r\n  const round = Number(race.round);\r\n\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <div className='container p10'>\r\n          <div className='prev-next mb10 mt10'>\r\n            {\r\n              round !== 1 &&\r\n                <button className={'button button-left mr10 ' + theme}\r\n                onClick={onClickRace(round - 1)}>\r\n                  <FontAwesomeIcon icon={faChevronLeft} /> Previous Race\r\n                </button>\r\n            }\r\n            {\r\n              round !== raceCount &&\r\n                <button className={'button button-right ' + theme}\r\n                onClick={onClickRace(round + 1)}>\r\n                  Next Race <FontAwesomeIcon icon={faChevronRight} />\r\n                </button>\r\n            }\r\n          </div>\r\n          <AddNotification\r\n            addNotification={addNotification}\r\n            raceName={race.raceName}\r\n            dateTime={dateTime}\r\n            notificationWhen={notificationWhen}\r\n            setNotificationWhen={setNotificationWhen}\r\n          />\r\n          <h2>Race Details</h2>\r\n          <p>Race: <a href={race.url} className='break-word'\r\n          target='_blank' rel='noopener noreferrer'>\r\n            {race.raceName} <FontAwesomeIcon icon={faExternalLinkAlt} />\r\n          </a></p>\r\n          <p>Season: {race.season}</p>\r\n          <p>Round: {round}</p>\r\n          <p>\r\n            Location: {race.Circuit.Location.country}, {race.Circuit.Location.locality}\r\n          </p>\r\n          <p>Circuit: <a href={race.Circuit.url} className='break-word'\r\n          target='_blank' rel='noopener noreferrer'>\r\n            {race.Circuit.circuitName} <FontAwesomeIcon icon={faExternalLinkAlt} />\r\n          </a></p>\r\n          <p>\r\n            Date and time: {dateTime.toLocaleDateString()} {race.time && dateTime.toLocaleTimeString()}\r\n          </p>\r\n          {\r\n            results ?\r\n              <RaceResults results={results} />\r\n            :\r\n              <button onClick={getRaceResults(race.season, round)}\r\n              className={'button ' + theme} disabled={isLoadingResults}>\r\n                {\r\n                  isLoadingResults ?\r\n                    <Fragment>\r\n                      <FontAwesomeIcon icon={faSpinner} spin={true} /> {'Loading...'}\r\n                    </Fragment>\r\n                  :\r\n                    <Fragment>Load Results</Fragment>\r\n                }\r\n              </button>\r\n          }\r\n          { resultsError && <p>{resultsError.message}</p> }\r\n        </div>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default RaceDetails;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Notifications = ({ notifications, deleteNotification }) => {\r\n  const sortedNotifications = notifications.slice().sort((a, b) => {\r\n    return a.notificationDate - b.notificationDate;\r\n  });\r\n\r\n  return (\r\n    <div className='container'>\r\n      <h2 className='ml10 mr10'>Saved Notifications</h2>\r\n      {\r\n        notifications.length === 0 ?\r\n          <p className='p10'>No saved notifications</p>\r\n        :\r\n          <div className='responsive-table'>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th></th>\r\n                  <th>Title</th>\r\n                  <th>Notified</th>\r\n                  <th>Race Date</th>\r\n                  <th>Notification Date</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {\r\n                  sortedNotifications.map(notification => {\r\n                    const {\r\n                      id, title, notified, raceDate, notificationDate\r\n                    } = notification;\r\n                    return (\r\n                      <tr key={id}>\r\n                        <td>\r\n                          <button onClick={deleteNotification(id)}\r\n                          className='button' title='Delete Notification'>\r\n                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                          </button>\r\n                        </td>\r\n                        <td>{title}</td>\r\n                        <td>{notified ? 'Yes': 'No'}</td>\r\n                        <td>{raceDate.toLocaleDateString()} {raceDate.toLocaleTimeString()}</td>\r\n                        <td>{notificationDate.toLocaleDateString()} {notificationDate.toLocaleTimeString()}</td>\r\n                      </tr>\r\n                    );\r\n                  })\r\n                }\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n      }\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default Notifications;\r\n","import Joi from 'joi';\r\nimport { teams } from './constants';\r\n\r\nexport const getCalendars = () => {\r\n  try {\r\n    let calendars = [];\r\n    for (let i = 0, l = localStorage.length; i < l; i++) {\r\n      if (/^calendar_\\d{4}$/.test(localStorage.key(i))) {\r\n        calendars.push(localStorage.key(i));\r\n      }\r\n    }\r\n    return calendars;\r\n  } catch (error) {\r\n    console.error('load from localStorage error', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport const saveRaces = (races, season) => {\r\n  try {\r\n    const serializedRaces = JSON.stringify(races);\r\n    localStorage.setItem('calendar_' + season, serializedRaces);\r\n  } catch (error) {\r\n    console.error('save to localStorage error', error);\r\n    return error;\r\n  }\r\n}\r\n\r\nexport const loadRaces = (season) => {\r\n  try {\r\n    const locationObject = Joi.object().keys({\r\n      lat: Joi.string(),\r\n      long: Joi.string(),\r\n      locality: Joi.string().required(),\r\n      country: Joi.string().required()\r\n    });\r\n    const circuitObject = Joi.object().keys({\r\n      circuitId: Joi.string(),\r\n      url: Joi.string().required(),\r\n      circuitName: Joi.string().required(),\r\n      Location: locationObject.required()\r\n    });\r\n    const raceObject = Joi.object().keys({\r\n      season: Joi.string().required(),\r\n      round: Joi.string().required(),\r\n      url: Joi.string().required(),\r\n      raceName: Joi.string().required(),\r\n      Circuit: circuitObject.required(),\r\n      date: Joi.string().required(),\r\n      time: Joi.string()\r\n    });\r\n    const schema = Joi.array().items(raceObject);\r\n\r\n    const serializedRaces = localStorage.getItem('calendar_' + season);\r\n    if (serializedRaces === null) return undefined;\r\n    const races = JSON.parse(serializedRaces);\r\n\r\n    const test = Joi.validate(races, schema);\r\n    if (test.error) {\r\n      localStorage.removeItem('calendar_' + season);\r\n      return undefined;\r\n    } else {\r\n      return races;\r\n    }\r\n  } catch (error) {\r\n    console.error('load from localStorage error', error);\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport const saveNotifications = (notifications) => {\r\n  try {\r\n    const serializedNotifications = JSON.stringify(notifications);\r\n    localStorage.setItem('notifications', serializedNotifications);\r\n  } catch (error) {\r\n    console.error('save to localStorage error', error);\r\n    return error;\r\n  }\r\n}\r\n\r\nexport const loadNotifications = () => {\r\n  try {\r\n    const notificationObject = Joi.object().keys({\r\n      id: Joi.number().required(),\r\n      body: Joi.string().required(),\r\n      raceDate: Joi.date().required(),\r\n      notificationDate: Joi.date().required(),\r\n      notified: Joi.boolean().required(),\r\n      title: Joi.string().required()\r\n    });\r\n    const schema = Joi.array().items(notificationObject);\r\n\r\n    const serializedNotifications = localStorage.getItem('notifications');\r\n    if (serializedNotifications === null) return undefined;\r\n    const notifications = JSON.parse(serializedNotifications, (key, value) => {\r\n      if (key === 'notificationDate' || key === 'raceDate') {\r\n        return new Date(value);\r\n      } else {\r\n        return value;\r\n      }\r\n    });\r\n    \r\n    const test = Joi.validate(notifications, schema);\r\n    if (test.error) {\r\n      localStorage.removeItem('notifications');\r\n      return undefined;\r\n    } else {\r\n      return notifications;\r\n    }\r\n  } catch (error) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport const saveTheme = (theme) => {\r\n  try {\r\n    localStorage.setItem('theme', theme);\r\n  } catch (error) {\r\n    console.error('save to localStorage error', error);\r\n  }\r\n}\r\n\r\nexport const loadTheme = () => {\r\n  try {\r\n    const theme = localStorage.getItem('theme');\r\n    for (let i = 0, l = teams.length; i < l; i++) {\r\n      if (teams[i].id === theme) {\r\n        return theme;\r\n      }\r\n    }\r\n    return 'ferrari';\r\n  } catch (error) {\r\n    console.error('load from localStorage error', error);\r\n    return 'ferrari';\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Calendars.css';\r\nimport { getCalendars } from '../localStorage';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Calendars extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      calendars: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const calendars = getCalendars();\r\n    this.setState({ calendars });\r\n  }\r\n\r\n  deleteCalendar = (calendar) => () => {\r\n    const calendars = this.state.calendars.filter(c => c !== calendar);\r\n    this.setState({ calendars });\r\n    localStorage.removeItem(calendar);\r\n  }\r\n\r\n  render() {\r\n    const sortedCalendars = this.state.calendars.slice().sort((a, b) => {\r\n      return a.slice(-4) - b.slice(-4);\r\n    });\r\n\r\n    return (\r\n      <div className='container'>\r\n        <h2 className='ml10 mr10'>Saved Calendars</h2>\r\n        {\r\n          this.state.calendars.length === 0 ?\r\n            <p className='p10'>No saved calendars</p>\r\n          :\r\n            <ul className='ml10 mr10'>\r\n              {\r\n                sortedCalendars.map(calendar => {\r\n                  return (\r\n                    <li key={calendar}>\r\n                      <button className='button mr10 mb10'\r\n                      title='Delete Calendar'\r\n                      onClick={this.deleteCalendar(calendar)}>\r\n                        <FontAwesomeIcon icon={faTrashAlt} />\r\n                      </button>\r\n                      <span>{calendar.slice(-4)}</span>\r\n                    </li>\r\n                  );\r\n                })\r\n              }\r\n            </ul>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calendars;\r\n","import React from 'react';\r\nimport './SeasonSelect.css';\r\nimport { FIRST_SEASON, CURRENT_SEASON } from '../constants';\r\nimport { ThemeConsumer } from '../ThemeContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst SeasonSelect = ({ season, onSelectSeason, onChangeSeason }) => {\r\n  let seasonOptions = [];\r\n  for (let i = FIRST_SEASON; i <= CURRENT_SEASON; i++) {\r\n    seasonOptions.push(<option key={i} value={i}>Season {i}</option>);\r\n  }\r\n\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <div className='season ml10 mb10'>\r\n          { season !== FIRST_SEASON &&\r\n            <button onClick={onChangeSeason(-1)} title='Previous season'\r\n            className={'button ' + theme}>\r\n              <FontAwesomeIcon icon={faChevronLeft} />\r\n            </button>\r\n          }\r\n          <select value={season} onChange={onSelectSeason}\r\n          className={theme} aria-label='Select season'>\r\n            {seasonOptions}\r\n          </select>\r\n          { season !== CURRENT_SEASON &&\r\n            <button onClick={onChangeSeason(1)} title='Next season'\r\n            className={'button ' + theme}>\r\n              <FontAwesomeIcon icon={faChevronRight} />\r\n            </button>\r\n          }\r\n        </div>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default SeasonSelect;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <div className='p10'>\r\n        Icons made by <a href=\"https://www.freepik.com/\" title=\"Freepik\">\r\n        Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\r\n        www.flaticon.com</a> is licensed by <a href=\"http://creativecommons.org/licenses/by/3.0/\"\r\n        title=\"Creative Commons BY 3.0\" target=\"_blank\"\r\n        rel=\"noopener noreferrer\">CC 3.0 BY</a>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component, Fragment } from 'react';\r\nimport { fetchRaces, fetchRaceResults } from './api';\r\nimport * as deepmerge from 'deepmerge';\r\nimport Header from './components/Header';\r\nimport RaceList from './components/RaceList';\r\nimport RaceDetails from './components/RaceDetails';\r\nimport Notifications from './components/Notifications';\r\nimport Calendars from './components/Calendars';\r\nimport SeasonSelect from './components/SeasonSelect';\r\nimport Footer from './components/Footer';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport { ThemeProvider } from './ThemeContext';\r\nimport {\r\n  FIRST_SEASON, CURRENT_SEASON, notificationOptions\r\n} from './constants';\r\nimport {\r\n  saveRaces, loadRaces, saveNotifications, loadNotifications,\r\n  saveTheme, loadTheme\r\n} from './localStorage';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      races: {},\r\n      isLoading: false,\r\n      error: null,\r\n      season: CURRENT_SEASON,\r\n      selectedRaceRound: 0,\r\n      results: {},\r\n      isLoadingResults: false,\r\n      resultsError: null,\r\n      notifications: [],\r\n      notificationWhen: '60',\r\n      route: 'RaceList',\r\n      theme: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getRaces(this.state.season);\r\n    const notifications = loadNotifications();\r\n    if (notifications) {\r\n      this.setState({ notifications });\r\n    }\r\n    const theme = loadTheme();\r\n    this.setState({ theme });\r\n    this.interval = setInterval(this.checkNotifications, 60 * 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  setTheme = (e) => {\r\n    this.setState({ theme: e.target.value });\r\n    saveTheme(e.target.value);\r\n  }\r\n\r\n  checkNotifications = () => {\r\n    const { notifications } = this.state;\r\n    const nowTime = Math.floor(new Date().getTime() / 1000 / 60);\r\n\r\n    notifications.forEach(notification => {\r\n      const { notificationDate, raceDate, title, body } = notification;\r\n      const notificationTime = Math.floor(notificationDate.getTime() / 1000 / 60);\r\n\r\n      if (notificationTime === nowTime && !notification.notified) {\r\n        new Notification(title, { body: body });\r\n        notification.notified = true;\r\n        this.setState({ notifications });\r\n        saveNotifications(notifications);\r\n      } else if (notificationTime < nowTime && !notification.notified) {\r\n        new Notification('Missed notification: ' + title, {\r\n          body: `Notification time: ${notificationDate.toLocaleDateString()} ${notificationDate.toLocaleTimeString()}\r\nRace time: ${raceDate.toLocaleDateString()} ${raceDate.toLocaleTimeString()}`\r\n        });\r\n        notification.notified = true;\r\n        this.setState({ notifications });\r\n        saveNotifications(notifications);\r\n      }\r\n    });\r\n  }\r\n\r\n  getRaces = (season) => {\r\n    const races = loadRaces(season);\r\n    if (races) {\r\n      const newRaces = { [season]: races };\r\n      this.setState((state) => {\r\n        return { races: { ...state.races, ...newRaces } };\r\n      });\r\n    } else {\r\n      this.setState({ isLoading: true });\r\n      fetchRaces(season)\r\n        .then(data => {\r\n          if (data.MRData.RaceTable.Races.length === 0) {\r\n            throw Error('No data available');\r\n          }\r\n\r\n          const newRaces = { [season]: data.MRData.RaceTable.Races };\r\n          this.setState({\r\n            races: { ...this.state.races, ...newRaces },\r\n            isLoading: false\r\n          });\r\n          if (season === CURRENT_SEASON) {\r\n            saveRaces(data.MRData.RaceTable.Races, season);\r\n          }\r\n        })\r\n        .catch(error => this.setState({ error, isLoading: false }));\r\n    }\r\n  }\r\n\r\n  getRaceResults = (season, round) => () => {\r\n    const { results } = this.state;\r\n\r\n    this.setState({ isLoadingResults: true });\r\n    fetchRaceResults(season, round)\r\n      .then(data => {\r\n        if (data.MRData.RaceTable.Races.length === 0) {\r\n          throw Error('No data available');\r\n        }\r\n\r\n        let res = {\r\n          [season]: {\r\n            [round]: data.MRData.RaceTable.Races[0].Results\r\n          }\r\n        };\r\n\r\n        this.setState({\r\n          results: deepmerge(results, res),\r\n          isLoadingResults: false,\r\n          resultsError: null\r\n        });\r\n      })\r\n      .catch(error => {\r\n         this.setState({ resultsError: error, isLoadingResults: false });\r\n       });\r\n  }\r\n\r\n  onClickRace = (raceRound) => () => {\r\n    this.selectRace(raceRound);\r\n  }\r\n\r\n  onEnterRace = (raceRound) => (e) => {\r\n    if (e.key === 'Enter') {\r\n      this.selectRace(raceRound);\r\n    }\r\n  }\r\n\r\n  selectRace = (raceRound) => {\r\n    this.setState({\r\n      selectedRaceRound: Number(raceRound),\r\n      route: 'RaceDetails',\r\n      resultsError: null\r\n    });\r\n  }\r\n\r\n  onSelectSeason = (e) => {\r\n    this.setSeason(Number(e.target.value));\r\n  }\r\n\r\n  onChangeSeason = (change) => () => {\r\n    const newSeason = Number(this.state.season) + change;\r\n    if (newSeason >= FIRST_SEASON && newSeason <= CURRENT_SEASON) {\r\n      this.setSeason(newSeason);\r\n    }\r\n  }\r\n\r\n  setSeason = (season) => {\r\n    this.setState({\r\n      season,\r\n      error: null\r\n    });\r\n    if (!this.state.races[season]) {\r\n      this.getRaces(season);\r\n    }\r\n  }\r\n\r\n  onSaveRaces = () => {\r\n    const error = saveRaces(this.state.races[this.state.season], this.state.season);\r\n    if (error) {\r\n      toast.error('Error - calendar was not saved :(');\r\n    } else {\r\n      toast.success('Calendar saved to browser storage');\r\n    }\r\n  }\r\n\r\n  addNotification = (raceName, raceDate, notificationWhen) => () => {\r\n    if (!('Notification' in window)) {\r\n      toast.error('This browser does not support notifications :(');\r\n      return;\r\n    }\r\n\r\n    if (raceDate < new Date()) {\r\n      toast.error('This race already started or is over');\r\n      return;\r\n    }\r\n\r\n    let notificationDate = new Date(raceDate);\r\n    notificationDate.setMinutes(notificationDate.getMinutes() - (Number(notificationWhen) ? notificationWhen : 60));\r\n\r\n    let body = 'Race Starts in ';\r\n    body += notificationOptions[notificationWhen] ? notificationOptions[notificationWhen] : notificationOptions['60'];\r\n\r\n    const id = notificationDate.getTime();\r\n    for (let i = 0, l = this.state.notifications.length; i < l; i++) {\r\n      if (this.state.notifications[i].id === id) {\r\n        toast.error('Notification already exists');\r\n        return;\r\n      }\r\n    }\r\n\r\n    const notification = {\r\n      id,\r\n      raceDate,\r\n      notificationDate,\r\n      notified: false,\r\n      title: raceName,\r\n      body\r\n    };\r\n\r\n    if (Notification.permission === 'granted') {\r\n      this.setState(\r\n        (state) => {\r\n          return { notifications: state.notifications.concat(notification) };\r\n        },\r\n        () => {\r\n          const error = saveNotifications(this.state.notifications);\r\n          if (error) {\r\n            toast.error('Error - notification was not saved :(');\r\n          } else {\r\n            toast.success('Notification saved to browser storage');\r\n            this.checkNotifications();\r\n          }\r\n        }\r\n      );\r\n    } else if (Notification.permission !== 'denied') {\r\n      Notification.requestPermission().then((permission) => {\r\n        if (permission === 'granted') {\r\n          this.setState(\r\n            (state) => {\r\n              return { notifications: state.notifications.concat(notification) };\r\n            },\r\n            () => {\r\n              const error = saveNotifications(this.state.notifications);\r\n              if (error) {\r\n                toast.error('Error - notification was not saved :(');\r\n              } else {\r\n                toast.success('Notification saved to browser storage');\r\n                this.checkNotifications();\r\n              }\r\n            }\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  deleteNotification = (id) => () => {\r\n    const notifications = this.state.notifications.filter(notification => {\r\n      return notification.id !== id;\r\n    });\r\n    const error = saveNotifications(notifications);\r\n    if (error) {\r\n      toast.error('Error - Unable to delete notification :(');\r\n    } else {\r\n      this.setState({ notifications });\r\n    }\r\n  }\r\n\r\n  setNotificationWhen = (e) => {\r\n    this.setState({ notificationWhen: e.target.value });\r\n  }\r\n\r\n  setRoute = (route) => () => {\r\n    this.setState({ route });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      races, isLoading, error, season, notifications, selectedRaceRound, route,\r\n      results, isLoadingResults, resultsError, notificationWhen\r\n    } = this.state;\r\n    const seasonRaces = this.state.races[season];\r\n\r\n    let selectedRace = null;\r\n    if (selectedRaceRound > 0 && races[season]) {\r\n      const i = races[season].findIndex((race) => {\r\n        return Number(race.round) === selectedRaceRound;\r\n      });\r\n      selectedRace = this.state.races[this.state.season][i];\r\n    }\r\n\r\n    let upcomingRace = '';\r\n    if (seasonRaces && season === CURRENT_SEASON) {\r\n      for (let i = 0, l = seasonRaces.length, d = new Date(); i < l; i++) {\r\n        if (d < new Date(seasonRaces[i].date + 'T' + seasonRaces[i].time)) {\r\n          upcomingRace = seasonRaces[i].round;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    let raceResults;\r\n    if (selectedRace && results[selectedRace.season]) {\r\n      raceResults = results[selectedRace.season][selectedRace.round];\r\n    }\r\n\r\n    return (\r\n      <ThemeProvider value={this.state.theme}>\r\n        <Fragment>\r\n          <Header\r\n            setRoute={this.setRoute}\r\n            route={route}\r\n            setTheme={this.setTheme}\r\n          />\r\n          <ToastContainer\r\n            position='bottom-center'\r\n            autoClose={5000}\r\n            hideProgressBar\r\n            newestOnTop={false}\r\n            closeOnClick={false}\r\n            rtl={false}\r\n            pauseOnVisibilityChange\r\n            draggable={false}\r\n            pauseOnHover\r\n          />\r\n          { route === 'Notifications' &&\r\n            <Notifications\r\n              notifications={notifications}\r\n              deleteNotification={this.deleteNotification}\r\n            />\r\n          }\r\n          { route === 'Calendars' && <Calendars /> }\r\n          { route === 'RaceDetails' &&\r\n            <RaceDetails\r\n              race={selectedRace}\r\n              raceCount={seasonRaces.length}\r\n              results={raceResults}\r\n              isLoadingResults={isLoadingResults}\r\n              resultsError={resultsError}\r\n              onClickRace={this.onClickRace}\r\n              getRaceResults={this.getRaceResults}\r\n              addNotification={this.addNotification}\r\n              notificationWhen={notificationWhen}\r\n              setNotificationWhen={this.setNotificationWhen}\r\n            />\r\n          }\r\n          { route === 'RaceList' &&\r\n            <div className='container'>\r\n              <SeasonSelect\r\n                season={season}\r\n                onSelectSeason={this.onSelectSeason}\r\n                onChangeSeason={this.onChangeSeason}\r\n              />\r\n              <RaceList\r\n                races={seasonRaces}\r\n                upcomingRace={upcomingRace}\r\n                isLoading={isLoading}\r\n                error={error}\r\n                onClickRace={this.onClickRace}\r\n                onEnterRace={this.onEnterRace}\r\n                onSaveRaces={this.onSaveRaces}\r\n              />\r\n            </div>\r\n          }\r\n          <Footer />\r\n        </Fragment>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}