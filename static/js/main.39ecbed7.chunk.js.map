{"version":3,"sources":["api.js","ThemeContext.js","constants.js","components/Header.js","components/Navigation.js","helpers.js","components/Race.js","components/RaceList.js","components/Standings/DriverStandings.js","components/Standings/ConstructorStandings.js","components/Standings/Standings.js","components/RaceResults.js","components/AddNotification.js","components/RaceDetails.js","components/Notifications.js","localStorage.js","components/Calendars.js","components/SeasonSelect.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["urlBase","fetchData","url","fetch","then","response","json","fetchRaces","season","concat","fetchRaceResults","round","fetchDriverStandings","fetchConstructorStandings","ThemeContext","React","createContext","ThemeProvider","Provider","ThemeConsumer","Consumer","FIRST_SEASON","CURRENT_SEASON","Date","getFullYear","teams","id","name","notificationOptions","10","30","60","120","1440","Header","_ref","setTheme","react_default","a","createElement","theme","className","value","onChange","aria-label","map","team","key","Navigation","setRoute","route","onClick","getDate","date","time","Race","country","locality","upcomingRace","onClickRace","onEnterRace","striped","Number","upcoming","dateTime","onKeyPress","title","tabIndex","toLocaleDateString","toLocaleTimeString","RaceList","races","isLoading","error","onSaveRaces","seasonSelect","index_es","icon","faSave","message","race","src_components_Race","Circuit","Location","DriverStandings","standings","react","s","constructors","i","l","Constructors","length","Driver","driverId","position","givenName","familyName","points","wins","ConstructorStandings","Constructor","Standings","this","props","driverStandings","getDriverStandings","constructorStandings","getConstructorStandings","_this$props","isLoadingDrivers","errorDrivers","isLoadingConstructors","errorConstructors","Standings_DriverStandings","Standings_ConstructorStandings","Component","RaceResults","results","res","grid","Time","laps","status","FastestLap","rank","AverageSpeed","speed","units","AddNotification","addNotification","raceName","notificationWhen","setNotificationWhen","options","_i","_Object$entries","Object","entries","_ref4","_ref3","slicedToArray","push","faBell","RaceDetails","raceCount","isLoadingResults","resultsError","getRaceResults","faChevronLeft","faChevronRight","components_AddNotification","href","target","rel","faExternalLinkAlt","circuitName","src_components_RaceResults","disabled","faSpinner","spin","Notifications","notifications","deleteNotification","sortedNotifications","slice","sort","b","notificationDate","notification","notified","raceDate","faTrashAlt","saveRaces","serializedRaces","JSON","stringify","localStorage","setItem","console","loadRaces","locationObject","Joi","object","keys","lat","string","long","required","circuitObject","circuitId","raceObject","schema","array","items","getItem","parse","validate","removeItem","saveNotifications","serializedNotifications","saveTheme","Calendars","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","deleteCalendar","calendar","calendars","state","filter","c","setState","test","getCalendars","_this2","sortedCalendars","SeasonSelect","onSelectSeason","onChangeSeason","seasonOptions","Footer","App","e","checkNotifications","nowTime","Math","floor","getTime","forEach","body","notificationTime","Notification","getRaces","newRaces","defineProperty","objectSpread","data","MRData","RaceTable","Races","Error","catch","newResults","Results","prevState","deepmerge","newStandings","StandingsTable","StandingsLists","raceRound","selectRace","selectedRaceRound","setSeason","change","newSeason","_this$state","toast","success","window","setMinutes","getMinutes","permission","requestPermission","notificationObject","number","boolean","loadNotifications","loadTheme","interval","setInterval","clearInterval","_this$state2","seasonRaces","selectedRace","findIndex","raceResults","d","src_components_SeasonSelect","src_components_Header","src_components_Navigation","react_toastify","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","components_Notifications","src_components_Calendars","src_components_RaceDetails","components_RaceList","components_Standings_Standings","components_Footer","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.39ecbed7.chunk.js","sourcesContent":["const urlBase = 'https://ergast.com/api/f1';\r\n\r\nconst fetchData = (url) => {\r\n  return fetch(url).then(response => response.json());\r\n}\r\n\r\nexport const fetchRaces = (season) => {\r\n  return fetchData(`${urlBase}/${season}.json`);\r\n}\r\n\r\nexport const fetchRaceResults = (season, round) => {\r\n  return fetchData(`${urlBase}/${season}/${round}/results.json`);\r\n}\r\n\r\nexport const fetchDriverStandings = (season) => {\r\n  return fetchData(`${urlBase}/${season}/driverStandings.json`);\r\n}\r\n\r\nexport const fetchConstructorStandings = (season) => {\r\n  return fetchData(`${urlBase}/${season}/constructorStandings.json`);\r\n}\r\n","import React from 'react';\r\n\r\nconst ThemeContext = React.createContext('');\r\nexport const ThemeProvider = ThemeContext.Provider;\r\nexport const ThemeConsumer = ThemeContext.Consumer;\r\n","export const FIRST_SEASON = 1950;\r\nexport const CURRENT_SEASON = new Date().getFullYear();\r\n\r\nexport const teams = [\r\n  { id: 'ferrari', name: 'Ferrari' },\r\n  { id: 'mercedes', name: 'Mercedes' },\r\n  { id: 'redbull', name: 'Red Bull Racing' },\r\n  { id: 'renault', name: 'Renault' },\r\n  { id: 'haas', name: 'Haas' },\r\n  { id: 'racingpoint', name: 'Racing Point' },\r\n  { id: 'tororosso', name: 'Toro Rosso' },\r\n  { id: 'mclaren', name: 'McLaren' },\r\n  { id: 'alfaromeo', name: 'Alfa Romeo Racing' },\r\n  { id: 'williams', name: 'Williams' }\r\n];\r\n\r\nexport const notificationOptions = {\r\n  '10': '10 Minutes',\r\n  '30': '30 Minutes',\r\n  '60': '1 Hour',\r\n  '120': '2 Hours',\r\n  '1440': '1 Day'\r\n}\r\n","import React from 'react';\r\nimport './Header.css';\r\nimport { ThemeConsumer } from '../ThemeContext';\r\nimport { teams } from '../constants';\r\n\r\nconst Header = ({ setTheme }) => {\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <header className={theme}>\r\n          <div className='flex'>\r\n            <h1 className={'dib p10 ' + theme}>F1 Races</h1>\r\n            <div className='select-wrapper'>\r\n              <select\r\n                value={theme}\r\n                onChange={setTheme}\r\n                className={theme}\r\n                aria-label='Select theme'\r\n              >\r\n                {\r\n                  teams.map(team => {\r\n                    return (\r\n                      <option key={team.id} value={team.id}>\r\n                        {team.name}\r\n                      </option>\r\n                    );\r\n                  })\r\n                }\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </header>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { ThemeConsumer } from '../ThemeContext';\r\nimport './Navigation.css';\r\n\r\nconst Navigation = ({ setRoute, route }) => {\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <nav className={theme}>\r\n          <button\r\n            onClick={setRoute('RaceList')}\r\n            className={`${route === 'RaceList' ? 'active' : ''} ${theme}`}\r\n          >\r\n            Calendar\r\n          </button>\r\n          <button\r\n            onClick={setRoute('Standings')}\r\n            className={`${route === 'Standings' ? 'active' : ''} ${theme}`}\r\n          >\r\n            Standings\r\n          </button>\r\n          <button\r\n            onClick={setRoute('Notifications')}\r\n            className={`${route === 'Notifications' ? 'active' : ''} ${theme}`}\r\n          >\r\n            Saved Notifications\r\n          </button>\r\n          <button\r\n            onClick={setRoute('Calendars')}\r\n            className={`${route === 'Calendars' ? 'active' : ''} ${theme}`}\r\n          >\r\n            Saved Calendars\r\n          </button>\r\n        </nav>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","export const getDate = (date, time) => {\r\n  return time ? new Date(date + 'T' + time) : new Date(date);\r\n}\r\n","import React from 'react';\r\nimport './Race.css';\r\nimport { getDate } from '../helpers';\r\nimport { ThemeConsumer } from '../ThemeContext';\r\n\r\nconst Race = ({\r\n  round, country, locality, date, time, upcomingRace,\r\n  onClickRace, onEnterRace\r\n}) => {\r\n  const striped = Number(round) % 2 === 1 ? 'striped' : '';\r\n  const upcoming = upcomingRace ? 'upcoming' : '';\r\n  const dateTime = getDate(date, time);\r\n\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <div className={`race unselectable ${striped} ${upcoming} ${theme}`}\r\n        onClick={onClickRace(round)} onKeyPress={onEnterRace(round)}\r\n        title='Show details' tabIndex='0'>\r\n          <span className='round'>{round}.</span>\r\n          <span className='location'>{country}, {locality}</span>\r\n          <span className='date-time'>\r\n            <span className='date'>{dateTime.toLocaleDateString()}</span>\r\n            <span className='time'>{ time && dateTime.toLocaleTimeString() }</span>\r\n          </span>\r\n        </div>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default Race;\r\n","import React from 'react';\r\nimport Race from './Race';\r\nimport { ThemeConsumer } from '../ThemeContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\r\nconst RaceList = ({\r\n  races, upcomingRace, isLoading, error, onClickRace, onEnterRace, onSaveRaces,\r\n  seasonSelect\r\n}) => {\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <div className='container'>\r\n          {seasonSelect}\r\n          { !error && !isLoading &&\r\n            <button onClick={onSaveRaces}\r\n            className={'button ml10 mb10 ' + theme}>\r\n              <FontAwesomeIcon icon={faSave} /> Save calendar\r\n            </button>\r\n          }\r\n          { isLoading && <p className='p10'>Loading...</p> }\r\n          { error && <p className='p10'>{error.message}</p> }\r\n          { races &&\r\n            races.map(race => {\r\n              return (\r\n                <Race\r\n                  key={race.round}\r\n                  round={race.round}\r\n                  country={race.Circuit.Location.country}\r\n                  locality={race.Circuit.Location.locality}\r\n                  date={race.date}\r\n                  time={race.time}\r\n                  upcomingRace={Number(race.round) === Number(upcomingRace)}\r\n                  onClickRace={onClickRace}\r\n                  onEnterRace={onEnterRace}\r\n                />\r\n              );\r\n            })\r\n          }\r\n        </div>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default RaceList;\r\n","import React, { Fragment } from 'react';\r\n\r\nconst DriverStandings = ({ standings, isLoading, error }) => {\r\n  return (\r\n    <Fragment>\r\n      { isLoading && <p className='p10'>Loading...</p> }\r\n      { error && <p className='p10'>{error.message}</p> }\r\n      { standings &&\r\n        <Fragment>\r\n          <h2 className='p10'>Driver Standings</h2>\r\n          <div className='responsive-table'>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th className='tr' title='Position'>Pos.</th>\r\n                  <th>Driver</th>\r\n                  <th>Constructor</th>\r\n                  <th className='tr'>Points</th>\r\n                  <th className='tr'>Wins</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {\r\n                  standings.map(s => {\r\n                    let constructors = '';\r\n                    for (let i = 0, l = s.Constructors.length; i < l; i++) {\r\n                      constructors += s.Constructors[i].name;\r\n                      if (i + 1 !== l) {\r\n                        constructors += ', ';\r\n                      }\r\n                    }\r\n                    return (\r\n                      <tr key={s.Driver.driverId}>\r\n                        <td className='tr'>{s.position}</td>\r\n                        <td>{s.Driver.givenName} {s.Driver.familyName}</td>\r\n                        <td>{constructors}</td>\r\n                        <td className='tr'>{s.points}</td>\r\n                        <td className='tr'>{s.wins}</td>\r\n                      </tr>\r\n                    );\r\n                  })\r\n                }\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </Fragment>\r\n      }\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default DriverStandings;\r\n","import React, { Fragment } from 'react';\r\n\r\nconst ConstructorStandings = ({ standings, isLoading, error }) => {\r\n  return (\r\n    <Fragment>\r\n      { isLoading && <p className='p10'>Loading...</p> }\r\n      { error && <p className='p10'>{error.message}</p> }\r\n      { standings &&\r\n        <Fragment>\r\n          <h2 className='p10'>Constructor Standings</h2>\r\n          <div className='responsive-table'>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th className='tr' title='Position'>Pos.</th>\r\n                  <th>Constructor</th>\r\n                  <th className='tr'>Points</th>\r\n                  <th className='tr'>Wins</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {\r\n                  standings.map(s => {\r\n                    return (\r\n                      <tr key={s.Constructor.name}>\r\n                        <td className='tr'>{s.position}</td>\r\n                        <td>{s.Constructor.name}</td>\r\n                        <td className='tr'>{s.points}</td>\r\n                        <td className='tr'>{s.wins}</td>\r\n                      </tr>\r\n                    );\r\n                  })\r\n                }\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </Fragment>\r\n      }\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default ConstructorStandings;\r\n","import React, { Component } from 'react';\r\nimport DriverStandings from './DriverStandings';\r\nimport ConstructorStandings from './ConstructorStandings';\r\n\r\nclass Standings extends Component {\r\n  componentDidMount() {\r\n    const { season } = this.props;\r\n    if (!this.props.driverStandings[season]) {\r\n      this.props.getDriverStandings(season);\r\n    }\r\n    if (!this.props.constructorStandings[season]) {\r\n      this.props.getConstructorStandings(season);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      season, driverStandings, isLoadingDrivers, errorDrivers,\r\n      constructorStandings, isLoadingConstructors, errorConstructors\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className='container'>\r\n        {this.props.seasonSelect}\r\n        <DriverStandings\r\n          standings={driverStandings[season]}\r\n          isLoading={isLoadingDrivers}\r\n          error={errorDrivers}\r\n        />\r\n        <ConstructorStandings\r\n          standings={constructorStandings[season]}\r\n          isLoading={isLoadingConstructors}\r\n          error={errorConstructors}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Standings;\r\n","import React from 'react';\r\nimport './RaceResults.css';\r\n\r\nconst RaceResults = ({ results }) => {\r\n  return (\r\n    <div className='responsive-table'>\r\n      <h2>Results</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th className='tr' title='Finish Position'>Pos.</th>\r\n            <th className='tr' title='Grid Position'>Grid</th>\r\n            <th>Driver</th>\r\n            <th>Constructor</th>\r\n            <th>Time</th>\r\n            <th className='tr'>Laps</th>\r\n            <th>Status</th>\r\n            <th className='tr' title='Points'>Pts</th>\r\n            <th>Fastest Lap</th>\r\n            <th title='Average Speed'>Avg Speed</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            results.map(res => {\r\n              return (\r\n                <tr key={res.Driver.driverId + res.position}>\r\n                  <td className='tr'>{res.position}.</td>\r\n                  <td className='tr'>\r\n                    {res.grid === '0' ? 'Pit Lane' : (res.grid + '.')}\r\n                  </td>\r\n                  <td>{res.Driver.givenName} {res.Driver.familyName}</td>\r\n                  <td>{res.Constructor.name}</td>\r\n                  <td>{res.Time ? res.Time.time : 'N/A'}</td>\r\n                  <td className='tr'>{res.laps}</td>\r\n                  <td>{res.status}</td>\r\n                  <td className='tr'>{res.points}</td>\r\n                  <td\r\n                    className={res.FastestLap && res.FastestLap.rank === '1' ? 'fastest' : ''}\r\n                  >\r\n                    {res.FastestLap ? res.FastestLap.Time.time: 'N/A'}\r\n                  </td>\r\n                  <td>\r\n                    { res.FastestLap\r\n                      ? `${res.FastestLap.AverageSpeed.speed} ${res.FastestLap.AverageSpeed.units}`\r\n                      : 'N/A'\r\n                    }\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RaceResults;\r\n","import React from 'react';\r\nimport { ThemeConsumer } from '../ThemeContext';\r\nimport { notificationOptions } from '../constants';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBell } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst AddNotification = ({\r\n  addNotification, raceName, dateTime, notificationWhen, setNotificationWhen\r\n}) => {\r\n  let options = [];\r\n  for (const [key, value] of Object.entries(notificationOptions)) {\r\n    options.push(<option key={key} value={key}>{value + ' Before'}</option>);\r\n  }\r\n\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <div>\r\n          <button className={'button ' + theme}\r\n          onClick={addNotification(raceName, dateTime, notificationWhen)}>\r\n            <FontAwesomeIcon icon={faBell} /> Add notification\r\n          </button>\r\n          <select value={notificationWhen} onChange={setNotificationWhen}\r\n          className={theme} aria-label='Select notification time'>\r\n            {options}\r\n          </select>\r\n        </div>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default AddNotification;\r\n","import React, { Fragment } from 'react';\r\nimport './RaceDetails.css';\r\nimport RaceResults from './RaceResults';\r\nimport AddNotification from './AddNotification';\r\nimport { getDate } from '../helpers';\r\nimport { ThemeConsumer } from '../ThemeContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faExternalLinkAlt, faChevronLeft, faChevronRight, faSpinner\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst RaceDetails = ({\r\n  race, raceCount, results, isLoadingResults, resultsError, onClickRace,\r\n  getRaceResults, addNotification, notificationWhen, setNotificationWhen\r\n}) => {\r\n  const dateTime = getDate(race.date, race.time);\r\n  const round = Number(race.round);\r\n\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <div className='container p10'>\r\n          <div className='prev-next mb10 mt10'>\r\n            {\r\n              round !== 1 &&\r\n                <button className={'button button-left mr10 ' + theme}\r\n                onClick={onClickRace(round - 1)}>\r\n                  <FontAwesomeIcon icon={faChevronLeft} /> Previous Race\r\n                </button>\r\n            }\r\n            {\r\n              round !== raceCount &&\r\n                <button className={'button button-right ' + theme}\r\n                onClick={onClickRace(round + 1)}>\r\n                  Next Race <FontAwesomeIcon icon={faChevronRight} />\r\n                </button>\r\n            }\r\n          </div>\r\n          <AddNotification\r\n            addNotification={addNotification}\r\n            raceName={race.raceName}\r\n            dateTime={dateTime}\r\n            notificationWhen={notificationWhen}\r\n            setNotificationWhen={setNotificationWhen}\r\n          />\r\n          <h2>Race Details</h2>\r\n          <p>Race: <a href={race.url} className='break-word'\r\n          target='_blank' rel='noopener noreferrer'>\r\n            {race.raceName} <FontAwesomeIcon icon={faExternalLinkAlt} />\r\n          </a></p>\r\n          <p>Season: {race.season}</p>\r\n          <p>Round: {round}</p>\r\n          <p>\r\n            Location: {race.Circuit.Location.country}, {race.Circuit.Location.locality}\r\n          </p>\r\n          <p>Circuit: <a href={race.Circuit.url} className='break-word'\r\n          target='_blank' rel='noopener noreferrer'>\r\n            {race.Circuit.circuitName} <FontAwesomeIcon icon={faExternalLinkAlt} />\r\n          </a></p>\r\n          <p>\r\n            Date and time: {dateTime.toLocaleDateString()} {race.time && dateTime.toLocaleTimeString()}\r\n          </p>\r\n          {\r\n            results ?\r\n              <RaceResults results={results} />\r\n            :\r\n              <button onClick={getRaceResults(race.season, round)}\r\n              className={'button ' + theme} disabled={isLoadingResults}>\r\n                {\r\n                  isLoadingResults ?\r\n                    <Fragment>\r\n                      <FontAwesomeIcon icon={faSpinner} spin={true} /> {'Loading...'}\r\n                    </Fragment>\r\n                  :\r\n                    <Fragment>Load Results</Fragment>\r\n                }\r\n              </button>\r\n          }\r\n          { resultsError && <p>{resultsError.message}</p> }\r\n        </div>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default RaceDetails;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Notifications = ({ notifications, deleteNotification }) => {\r\n  const sortedNotifications = notifications.slice().sort((a, b) => {\r\n    return a.notificationDate - b.notificationDate;\r\n  });\r\n\r\n  return (\r\n    <div className='container'>\r\n      <h2 className='ml10 mr10'>Saved Notifications</h2>\r\n      {\r\n        notifications.length === 0 ?\r\n          <p className='p10'>No saved notifications</p>\r\n        :\r\n          <div className='responsive-table'>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th></th>\r\n                  <th>Title</th>\r\n                  <th>Notified</th>\r\n                  <th>Race Date</th>\r\n                  <th>Notification Date</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {\r\n                  sortedNotifications.map(notification => {\r\n                    const {\r\n                      id, title, notified, raceDate, notificationDate\r\n                    } = notification;\r\n                    return (\r\n                      <tr key={id}>\r\n                        <td>\r\n                          <button onClick={deleteNotification(id)}\r\n                          className='button' title='Delete Notification'>\r\n                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                          </button>\r\n                        </td>\r\n                        <td>{title}</td>\r\n                        <td>{notified ? 'Yes': 'No'}</td>\r\n                        <td>{raceDate.toLocaleDateString()} {raceDate.toLocaleTimeString()}</td>\r\n                        <td>{notificationDate.toLocaleDateString()} {notificationDate.toLocaleTimeString()}</td>\r\n                      </tr>\r\n                    );\r\n                  })\r\n                }\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n      }\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default Notifications;\r\n","import Joi from 'joi';\r\nimport { teams } from './constants';\r\n\r\nexport const getCalendars = () => {\r\n  try {\r\n    let calendars = [];\r\n    for (let i = 0, l = localStorage.length; i < l; i++) {\r\n      if (/^calendar_\\d{4}$/.test(localStorage.key(i))) {\r\n        calendars.push(localStorage.key(i));\r\n      }\r\n    }\r\n    return calendars;\r\n  } catch (error) {\r\n    console.error('load from localStorage error', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport const saveRaces = (races, season) => {\r\n  try {\r\n    const serializedRaces = JSON.stringify(races);\r\n    localStorage.setItem('calendar_' + season, serializedRaces);\r\n  } catch (error) {\r\n    console.error('save to localStorage error', error);\r\n    return error;\r\n  }\r\n}\r\n\r\nexport const loadRaces = (season) => {\r\n  try {\r\n    const locationObject = Joi.object().keys({\r\n      lat: Joi.string(),\r\n      long: Joi.string(),\r\n      locality: Joi.string().required(),\r\n      country: Joi.string().required()\r\n    });\r\n    const circuitObject = Joi.object().keys({\r\n      circuitId: Joi.string(),\r\n      url: Joi.string().required(),\r\n      circuitName: Joi.string().required(),\r\n      Location: locationObject.required()\r\n    });\r\n    const raceObject = Joi.object().keys({\r\n      season: Joi.string().required(),\r\n      round: Joi.string().required(),\r\n      url: Joi.string().required(),\r\n      raceName: Joi.string().required(),\r\n      Circuit: circuitObject.required(),\r\n      date: Joi.string().required(),\r\n      time: Joi.string()\r\n    });\r\n    const schema = Joi.array().items(raceObject);\r\n\r\n    const serializedRaces = localStorage.getItem('calendar_' + season);\r\n    if (serializedRaces === null) return undefined;\r\n    const races = JSON.parse(serializedRaces);\r\n\r\n    const test = Joi.validate(races, schema);\r\n    if (test.error) {\r\n      localStorage.removeItem('calendar_' + season);\r\n      return undefined;\r\n    } else {\r\n      return races;\r\n    }\r\n  } catch (error) {\r\n    console.error('load from localStorage error', error);\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport const saveNotifications = (notifications) => {\r\n  try {\r\n    const serializedNotifications = JSON.stringify(notifications);\r\n    localStorage.setItem('notifications', serializedNotifications);\r\n  } catch (error) {\r\n    console.error('save to localStorage error', error);\r\n    return error;\r\n  }\r\n}\r\n\r\nexport const loadNotifications = () => {\r\n  try {\r\n    const notificationObject = Joi.object().keys({\r\n      id: Joi.number().required(),\r\n      body: Joi.string().required(),\r\n      raceDate: Joi.date().required(),\r\n      notificationDate: Joi.date().required(),\r\n      notified: Joi.boolean().required(),\r\n      title: Joi.string().required()\r\n    });\r\n    const schema = Joi.array().items(notificationObject);\r\n\r\n    const serializedNotifications = localStorage.getItem('notifications');\r\n    if (serializedNotifications === null) return undefined;\r\n    const notifications = JSON.parse(serializedNotifications, (key, value) => {\r\n      if (key === 'notificationDate' || key === 'raceDate') {\r\n        return new Date(value);\r\n      } else {\r\n        return value;\r\n      }\r\n    });\r\n    \r\n    const test = Joi.validate(notifications, schema);\r\n    if (test.error) {\r\n      localStorage.removeItem('notifications');\r\n      return undefined;\r\n    } else {\r\n      return notifications;\r\n    }\r\n  } catch (error) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport const saveTheme = (theme) => {\r\n  try {\r\n    localStorage.setItem('theme', theme);\r\n  } catch (error) {\r\n    console.error('save to localStorage error', error);\r\n  }\r\n}\r\n\r\nexport const loadTheme = () => {\r\n  try {\r\n    const theme = localStorage.getItem('theme');\r\n    for (let i = 0, l = teams.length; i < l; i++) {\r\n      if (teams[i].id === theme) {\r\n        return theme;\r\n      }\r\n    }\r\n    return 'ferrari';\r\n  } catch (error) {\r\n    console.error('load from localStorage error', error);\r\n    return 'ferrari';\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Calendars.css';\r\nimport { getCalendars } from '../localStorage';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Calendars extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      calendars: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const calendars = getCalendars();\r\n    this.setState({ calendars });\r\n  }\r\n\r\n  deleteCalendar = (calendar) => () => {\r\n    const calendars = this.state.calendars.filter(c => c !== calendar);\r\n    this.setState({ calendars });\r\n    localStorage.removeItem(calendar);\r\n  }\r\n\r\n  render() {\r\n    const sortedCalendars = this.state.calendars.slice().sort((a, b) => {\r\n      return a.slice(-4) - b.slice(-4);\r\n    });\r\n\r\n    return (\r\n      <div className='container'>\r\n        <h2 className='ml10 mr10'>Saved Calendars</h2>\r\n        {\r\n          this.state.calendars.length === 0 ?\r\n            <p className='p10'>No saved calendars</p>\r\n          :\r\n            <ul className='ml10 mr10'>\r\n              {\r\n                sortedCalendars.map(calendar => {\r\n                  return (\r\n                    <li key={calendar}>\r\n                      <button className='button mr10 mb10'\r\n                      title='Delete Calendar'\r\n                      onClick={this.deleteCalendar(calendar)}>\r\n                        <FontAwesomeIcon icon={faTrashAlt} />\r\n                      </button>\r\n                      <span>{calendar.slice(-4)}</span>\r\n                    </li>\r\n                  );\r\n                })\r\n              }\r\n            </ul>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calendars;\r\n","import React from 'react';\r\nimport './SeasonSelect.css';\r\nimport { FIRST_SEASON, CURRENT_SEASON } from '../constants';\r\nimport { ThemeConsumer } from '../ThemeContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst SeasonSelect = ({ season, onSelectSeason, onChangeSeason }) => {\r\n  let seasonOptions = [];\r\n  for (let i = FIRST_SEASON; i <= CURRENT_SEASON; i++) {\r\n    seasonOptions.push(<option key={i} value={i}>Season {i}</option>);\r\n  }\r\n\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <div className='season ml10 mb10'>\r\n          { season !== FIRST_SEASON &&\r\n            <button onClick={onChangeSeason(-1)} title='Previous season'\r\n            className={'button ' + theme}>\r\n              <FontAwesomeIcon icon={faChevronLeft} />\r\n            </button>\r\n          }\r\n          <select value={season} onChange={onSelectSeason}\r\n          className={theme} aria-label='Select season'>\r\n            {seasonOptions}\r\n          </select>\r\n          { season !== CURRENT_SEASON &&\r\n            <button onClick={onChangeSeason(1)} title='Next season'\r\n            className={'button ' + theme}>\r\n              <FontAwesomeIcon icon={faChevronRight} />\r\n            </button>\r\n          }\r\n        </div>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default SeasonSelect;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <div className='p10'>\r\n        Icons made by <a href=\"https://www.freepik.com/\" title=\"Freepik\">\r\n        Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\r\n        www.flaticon.com</a> is licensed by <a href=\"http://creativecommons.org/licenses/by/3.0/\"\r\n        title=\"Creative Commons BY 3.0\" target=\"_blank\"\r\n        rel=\"noopener noreferrer\">CC 3.0 BY</a>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component, Fragment } from 'react';\r\nimport {\r\n  fetchRaces, fetchRaceResults, fetchDriverStandings, fetchConstructorStandings\r\n} from './api';\r\nimport * as deepmerge from 'deepmerge';\r\nimport Header from './components/Header';\r\nimport Navigation from './components/Navigation';\r\nimport RaceList from './components/RaceList';\r\nimport Standings from './components/Standings/Standings';\r\nimport RaceDetails from './components/RaceDetails';\r\nimport Notifications from './components/Notifications';\r\nimport Calendars from './components/Calendars';\r\nimport SeasonSelect from './components/SeasonSelect';\r\nimport Footer from './components/Footer';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport { ThemeProvider } from './ThemeContext';\r\nimport {\r\n  FIRST_SEASON, CURRENT_SEASON, notificationOptions\r\n} from './constants';\r\nimport {\r\n  saveRaces, loadRaces, saveNotifications, loadNotifications,\r\n  saveTheme, loadTheme\r\n} from './localStorage';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      races: {},\r\n      isLoading: false,\r\n      error: null,\r\n      season: CURRENT_SEASON,\r\n      selectedRaceRound: 0,\r\n      results: {},\r\n      isLoadingResults: false,\r\n      resultsError: null,\r\n      notifications: [],\r\n      notificationWhen: '60',\r\n      route: 'RaceList',\r\n      theme: '',\r\n      driverStandings: {},\r\n      isLoadingDrivers: false,\r\n      errorDrivers: null,\r\n      constructorStandings: {},\r\n      isLoadingConstructors: false,\r\n      errorConstructors: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getRaces(this.state.season);\r\n    const notifications = loadNotifications();\r\n    if (notifications) {\r\n      this.setState({ notifications });\r\n    }\r\n    const theme = loadTheme();\r\n    this.setState({ theme });\r\n    this.interval = setInterval(this.checkNotifications, 60 * 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  setTheme = (e) => {\r\n    this.setState({ theme: e.target.value });\r\n    saveTheme(e.target.value);\r\n  }\r\n\r\n  checkNotifications = () => {\r\n    const { notifications } = this.state;\r\n    const nowTime = Math.floor(new Date().getTime() / 1000 / 60);\r\n\r\n    notifications.forEach(notification => {\r\n      const { notificationDate, raceDate, title, body } = notification;\r\n      const notificationTime = Math.floor(notificationDate.getTime() / 1000 / 60);\r\n\r\n      if (notificationTime === nowTime && !notification.notified) {\r\n        new Notification(title, { body: body });\r\n        notification.notified = true;\r\n        this.setState({ notifications });\r\n        saveNotifications(notifications);\r\n      } else if (notificationTime < nowTime && !notification.notified) {\r\n        new Notification('Missed notification: ' + title, {\r\n          body: `Notification time: ${notificationDate.toLocaleDateString()} ${notificationDate.toLocaleTimeString()}\r\nRace time: ${raceDate.toLocaleDateString()} ${raceDate.toLocaleTimeString()}`\r\n        });\r\n        notification.notified = true;\r\n        this.setState({ notifications });\r\n        saveNotifications(notifications);\r\n      }\r\n    });\r\n  }\r\n\r\n  getRaces = (season) => {\r\n    const races = loadRaces(season);\r\n    if (races) {\r\n      const newRaces = { [season]: races };\r\n      this.setState((state) => {\r\n        return { races: { ...state.races, ...newRaces } };\r\n      });\r\n    } else {\r\n      this.setState({ isLoading: true });\r\n      fetchRaces(season)\r\n        .then(data => {\r\n          if (data.MRData.RaceTable.Races.length === 0) {\r\n            throw Error('No data available');\r\n          }\r\n\r\n          const newRaces = { [season]: data.MRData.RaceTable.Races };\r\n          this.setState({\r\n            races: { ...this.state.races, ...newRaces },\r\n            isLoading: false\r\n          });\r\n          if (season === CURRENT_SEASON) {\r\n            saveRaces(data.MRData.RaceTable.Races, season);\r\n          }\r\n        })\r\n        .catch(error => this.setState({ error, isLoading: false }));\r\n    }\r\n  }\r\n\r\n  getRaceResults = (season, round) => () => {\r\n    this.setState({ isLoadingResults: true });\r\n    fetchRaceResults(season, round)\r\n      .then(data => {\r\n        if (data.MRData.RaceTable.Races.length === 0) {\r\n          throw Error('No data available');\r\n        }\r\n\r\n        let newResults = {\r\n          [season]: {\r\n            [round]: data.MRData.RaceTable.Races[0].Results\r\n          }\r\n        };\r\n\r\n        this.setState(prevState => {\r\n          return {\r\n            results: deepmerge(prevState.results, newResults),\r\n            isLoadingResults: false,\r\n            resultsError: null\r\n          };\r\n        });\r\n      })\r\n      .catch(error => {\r\n        this.setState({ resultsError: error, isLoadingResults: false });\r\n      });\r\n  }\r\n\r\n  getDriverStandings = (season) => {\r\n    this.setState({ isLoadingDrivers: true });\r\n    fetchDriverStandings(season)\r\n      .then(data => {\r\n        this.setState(prevState => {\r\n          const newStandings = {\r\n            [season]: data.MRData.StandingsTable.StandingsLists[0].DriverStandings\r\n          };\r\n          return {\r\n            driverStandings: { ...prevState.driverStandings, ...newStandings },\r\n            isLoadingDrivers: false\r\n          };\r\n        });\r\n      })\r\n      .catch(error => {\r\n        this.setState({ isLoadingDrivers: false, errorDrivers: error })\r\n      });\r\n  }\r\n\r\n  getConstructorStandings = (season) => {\r\n    this.setState({ isLoadingConstructors: true });\r\n    fetchConstructorStandings(season)\r\n      .then(data => {\r\n        this.setState(prevState => {\r\n          const newStandings = {\r\n            [season]: data.MRData.StandingsTable.StandingsLists[0].ConstructorStandings\r\n          };\r\n          return {\r\n            constructorStandings: {\r\n              ...prevState.constructorStandings, ...newStandings\r\n            },\r\n            isLoadingConstructors: false\r\n          };\r\n        });\r\n      })\r\n      .catch(error => {\r\n        this.setState({\r\n          isLoadingConstructors: false,\r\n          errorConstructors: error\r\n        });\r\n      });\r\n  }\r\n\r\n  onClickRace = (raceRound) => () => {\r\n    this.selectRace(raceRound);\r\n  }\r\n\r\n  onEnterRace = (raceRound) => (e) => {\r\n    if (e.key === 'Enter') {\r\n      this.selectRace(raceRound);\r\n    }\r\n  }\r\n\r\n  selectRace = (raceRound) => {\r\n    this.setState({\r\n      selectedRaceRound: Number(raceRound),\r\n      route: 'RaceDetails',\r\n      resultsError: null\r\n    });\r\n  }\r\n\r\n  onSelectSeason = (e) => {\r\n    this.setSeason(Number(e.target.value));\r\n  }\r\n\r\n  onChangeSeason = (change) => () => {\r\n    const newSeason = Number(this.state.season) + change;\r\n    if (newSeason >= FIRST_SEASON && newSeason <= CURRENT_SEASON) {\r\n      this.setSeason(newSeason);\r\n    }\r\n  }\r\n\r\n  setSeason = (season) => {\r\n    const { route, races, driverStandings } = this.state;\r\n    this.setState({\r\n      season,\r\n      error: null\r\n    });\r\n    if (!races[season] && route === 'RaceList') {\r\n      this.getRaces(season);\r\n    }\r\n    if (!driverStandings[season] && route === 'Standings') {\r\n      this.getDriverStandings(season);\r\n      this.getConstructorStandings(season);\r\n    }\r\n  }\r\n\r\n  onSaveRaces = () => {\r\n    const error = saveRaces(this.state.races[this.state.season], this.state.season);\r\n    if (error) {\r\n      toast.error('Error - calendar was not saved :(');\r\n    } else {\r\n      toast.success('Calendar saved to browser storage');\r\n    }\r\n  }\r\n\r\n  addNotification = (raceName, raceDate, notificationWhen) => () => {\r\n    if (!('Notification' in window)) {\r\n      toast.error('This browser does not support notifications :(');\r\n      return;\r\n    }\r\n\r\n    if (raceDate < new Date()) {\r\n      toast.error('This race already started or is over');\r\n      return;\r\n    }\r\n\r\n    let notificationDate = new Date(raceDate);\r\n    notificationDate.setMinutes(notificationDate.getMinutes() - (Number(notificationWhen) ? notificationWhen : 60));\r\n\r\n    let body = 'Race Starts in ';\r\n    body += notificationOptions[notificationWhen] ? notificationOptions[notificationWhen] : notificationOptions['60'];\r\n\r\n    const id = notificationDate.getTime();\r\n    for (let i = 0, l = this.state.notifications.length; i < l; i++) {\r\n      if (this.state.notifications[i].id === id) {\r\n        toast.error('Notification already exists');\r\n        return;\r\n      }\r\n    }\r\n\r\n    const notification = {\r\n      id,\r\n      raceDate,\r\n      notificationDate,\r\n      notified: false,\r\n      title: raceName,\r\n      body\r\n    };\r\n\r\n    if (Notification.permission === 'granted') {\r\n      this.setState(\r\n        (state) => {\r\n          return { notifications: state.notifications.concat(notification) };\r\n        },\r\n        () => {\r\n          const error = saveNotifications(this.state.notifications);\r\n          if (error) {\r\n            toast.error('Error - notification was not saved :(');\r\n          } else {\r\n            toast.success('Notification saved to browser storage');\r\n            this.checkNotifications();\r\n          }\r\n        }\r\n      );\r\n    } else if (Notification.permission !== 'denied') {\r\n      Notification.requestPermission().then((permission) => {\r\n        if (permission === 'granted') {\r\n          this.setState(\r\n            (state) => {\r\n              return { notifications: state.notifications.concat(notification) };\r\n            },\r\n            () => {\r\n              const error = saveNotifications(this.state.notifications);\r\n              if (error) {\r\n                toast.error('Error - notification was not saved :(');\r\n              } else {\r\n                toast.success('Notification saved to browser storage');\r\n                this.checkNotifications();\r\n              }\r\n            }\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  deleteNotification = (id) => () => {\r\n    const notifications = this.state.notifications.filter(notification => {\r\n      return notification.id !== id;\r\n    });\r\n    const error = saveNotifications(notifications);\r\n    if (error) {\r\n      toast.error('Error - Unable to delete notification :(');\r\n    } else {\r\n      this.setState({ notifications });\r\n    }\r\n  }\r\n\r\n  setNotificationWhen = (e) => {\r\n    this.setState({ notificationWhen: e.target.value });\r\n  }\r\n\r\n  setRoute = (route) => () => {\r\n    this.setState({ route });\r\n    if (route === 'RaceList' || route === 'Standings') {\r\n      this.setState({ season: CURRENT_SEASON });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      races, isLoading, error, season, notifications, selectedRaceRound, route,\r\n      results, isLoadingResults, resultsError, notificationWhen, theme,\r\n      driverStandings, isLoadingDrivers, errorDrivers,\r\n      constructorStandings, isLoadingConstructors, errorConstructors\r\n    } = this.state;\r\n    const seasonRaces = races[season];\r\n\r\n    let selectedRace = null;\r\n    if (selectedRaceRound > 0 && races[season]) {\r\n      const i = races[season].findIndex((race) => {\r\n        return Number(race.round) === selectedRaceRound;\r\n      });\r\n      selectedRace = races[season][i];\r\n    }\r\n\r\n    let upcomingRace = '';\r\n    if (seasonRaces && season === CURRENT_SEASON) {\r\n      for (let i = 0, l = seasonRaces.length, d = new Date(); i < l; i++) {\r\n        if (d < new Date(seasonRaces[i].date + 'T' + seasonRaces[i].time)) {\r\n          upcomingRace = seasonRaces[i].round;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    let raceResults;\r\n    if (selectedRace && results[selectedRace.season]) {\r\n      raceResults = results[selectedRace.season][selectedRace.round];\r\n    }\r\n\r\n    const seasonSelect = (\r\n      <SeasonSelect\r\n        season={season}\r\n        onSelectSeason={this.onSelectSeason}\r\n        onChangeSeason={this.onChangeSeason}\r\n      />\r\n    );\r\n\r\n    return (\r\n      <ThemeProvider value={theme}>\r\n        <Fragment>\r\n          <Header setTheme={this.setTheme} />\r\n          <Navigation setRoute={this.setRoute} route={route} />\r\n          <ToastContainer\r\n            position='bottom-center'\r\n            autoClose={5000}\r\n            hideProgressBar\r\n            newestOnTop={false}\r\n            closeOnClick={false}\r\n            rtl={false}\r\n            pauseOnVisibilityChange\r\n            draggable={false}\r\n            pauseOnHover\r\n          />\r\n          { route === 'Notifications' &&\r\n            <Notifications\r\n              notifications={notifications}\r\n              deleteNotification={this.deleteNotification}\r\n            />\r\n          }\r\n          { route === 'Calendars' && <Calendars /> }\r\n          { route === 'RaceDetails' &&\r\n            <RaceDetails\r\n              race={selectedRace}\r\n              raceCount={seasonRaces.length}\r\n              results={raceResults}\r\n              isLoadingResults={isLoadingResults}\r\n              resultsError={resultsError}\r\n              onClickRace={this.onClickRace}\r\n              getRaceResults={this.getRaceResults}\r\n              addNotification={this.addNotification}\r\n              notificationWhen={notificationWhen}\r\n              setNotificationWhen={this.setNotificationWhen}\r\n            />\r\n          }\r\n          { route === 'RaceList' &&\r\n            <RaceList\r\n              races={seasonRaces}\r\n              upcomingRace={upcomingRace}\r\n              isLoading={isLoading}\r\n              error={error}\r\n              onClickRace={this.onClickRace}\r\n              onEnterRace={this.onEnterRace}\r\n              onSaveRaces={this.onSaveRaces}\r\n              seasonSelect={seasonSelect}\r\n            />\r\n          }\r\n          { route === 'Standings' &&\r\n            <Standings\r\n              season={season}\r\n              driverStandings={driverStandings}\r\n              isLoadingDrivers={isLoadingDrivers}\r\n              errorDrivers={errorDrivers}\r\n              getDriverStandings={this.getDriverStandings}\r\n              constructorStandings={constructorStandings}\r\n              isLoadingConstructors={isLoadingConstructors}\r\n              errorConstructors={errorConstructors}\r\n              getConstructorStandings={this.getConstructorStandings}\r\n              seasonSelect={seasonSelect}\r\n            />\r\n          }\r\n          <Footer />\r\n        </Fragment>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}