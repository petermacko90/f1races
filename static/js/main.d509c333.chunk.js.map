{"version":3,"sources":["api.js","ThemeContext.js","constants.js","components/Header.js","components/Navigation/NavItem.js","components/Navigation/Navigation.js","helpers.js","components/RaceList/Race.js","components/RaceList/RaceList.js","components/Standings/DriverStandings.js","components/Standings/ConstructorStandings.js","components/Standings/Standings.js","components/RaceDetails/RaceResults.js","components/RaceDetails/AddNotification.js","components/RaceDetails/RaceDetails.js","components/SavedData/Notifications.js","localStorage.js","components/SavedData/Calendars.js","components/SeasonSelect.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["urlBase","fetchData","url","fetch","then","response","json","fetchRaces","season","concat","fetchRaceResults","round","fetchDriverStandings","fetchConstructorStandings","ThemeContext","React","createContext","ThemeProvider","Provider","ThemeConsumer","Consumer","FIRST_SEASON","CURRENT_SEASON","Date","getFullYear","teams","id","name","notificationOptions","10","30","60","120","1440","Header","_ref","setTheme","react_default","a","createElement","theme","className","value","onChange","aria-label","map","team","key","NavItem","setRoute","route","active","children","onClick","Navigation","Navigation_NavItem","getDate","date","time","Race","country","locality","upcomingRace","onClickRace","onEnterRace","raceClasses","Number","dateTime","onKeyPress","title","tabIndex","toLocaleDateString","toLocaleTimeString","RaceList","races","isLoading","error","onSaveRaces","seasonSelect","index_es","icon","faSave","message","race","components_RaceList_Race","Circuit","Location","DriverStandings","standings","react","s","constructors","i","l","Constructors","length","Driver","driverId","position","givenName","familyName","points","wins","ConstructorStandings","Constructor","Standings","this","props","driverStandings","getDriverStandings","constructorStandings","getConstructorStandings","_this$props","isLoadingDrivers","errorDrivers","isLoadingConstructors","errorConstructors","Standings_DriverStandings","Standings_ConstructorStandings","Component","RaceResults","results","res","grid","Time","laps","status","FastestLap","rank","AverageSpeed","speed","units","AddNotification","addNotification","raceName","notificationWhen","setNotificationWhen","options","_i","_Object$entries","Object","entries","_ref4","_ref3","slicedToArray","push","faBell","RaceDetails","raceCount","isLoadingResults","resultsError","getRaceResults","faChevronLeft","faChevronRight","RaceDetails_AddNotification","href","target","rel","faExternalLinkAlt","circuitName","components_RaceDetails_RaceResults","disabled","faSpinner","spin","Notifications","notifications","deleteNotification","sortedNotifications","slice","sort","b","notificationDate","notification","notified","raceDate","faTrashAlt","saveRaces","serializedRaces","JSON","stringify","localStorage","setItem","loadRaces","getItem","parse","saveNotifications","serializedNotifications","saveTheme","Calendars","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","deleteCalendar","calendar","calendars","state","filter","c","setState","removeItem","test","getCalendars","_this2","sortedCalendars","SeasonSelect","onSelectSeason","onChangeSeason","seasonOptions","Footer","App","e","checkNotifications","nowTime","Math","floor","getTime","forEach","body","notificationTime","showNotification","Notification","getRaces","newRaces","defineProperty","prevState","objectSpread","data","MRData","RaceTable","Races","Error","catch","newResults","Results","deepmerge","newStandings","StandingsTable","StandingsLists","raceRound","selectRace","selectedRaceRound","setSeason","change","newSeason","_this$state","toast","success","window","setMinutes","getMinutes","createNotification","permission","requestPermission","loadNotifications","loadTheme","interval","setInterval","clearInterval","_this$state2","seasonRaces","selectedRace","findIndex","raceResults","d","src_components_SeasonSelect","src_components_Header","components_Navigation_Navigation","react_toastify","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","SavedData_Notifications","components_SavedData_Calendars","components_RaceDetails_RaceDetails","components_RaceList_RaceList","components_Standings_Standings","components_Footer","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d509c333.chunk.js","sourcesContent":["const urlBase = 'https://ergast.com/api/f1';\r\n\r\nconst fetchData = (url) => {\r\n  return fetch(url).then(response => response.json());\r\n}\r\n\r\nexport const fetchRaces = (season) => {\r\n  return fetchData(`${urlBase}/${season}.json`);\r\n}\r\n\r\nexport const fetchRaceResults = (season, round) => {\r\n  return fetchData(`${urlBase}/${season}/${round}/results.json`);\r\n}\r\n\r\nexport const fetchDriverStandings = (season) => {\r\n  return fetchData(`${urlBase}/${season}/driverStandings.json`);\r\n}\r\n\r\nexport const fetchConstructorStandings = (season) => {\r\n  return fetchData(`${urlBase}/${season}/constructorStandings.json`);\r\n}\r\n","import React from 'react';\r\n\r\nconst ThemeContext = React.createContext('');\r\nexport const ThemeProvider = ThemeContext.Provider;\r\nexport const ThemeConsumer = ThemeContext.Consumer;\r\n","export const FIRST_SEASON = 1950;\r\nexport const CURRENT_SEASON = new Date().getFullYear();\r\n\r\nexport const teams = [\r\n  { id: 'ferrari', name: 'Ferrari' },\r\n  { id: 'mercedes', name: 'Mercedes' },\r\n  { id: 'redbull', name: 'Red Bull Racing' },\r\n  { id: 'renault', name: 'Renault' },\r\n  { id: 'haas', name: 'Haas' },\r\n  { id: 'racingpoint', name: 'Racing Point' },\r\n  { id: 'tororosso', name: 'Toro Rosso' },\r\n  { id: 'mclaren', name: 'McLaren' },\r\n  { id: 'alfaromeo', name: 'Alfa Romeo Racing' },\r\n  { id: 'williams', name: 'Williams' }\r\n];\r\n\r\nexport const notificationOptions = {\r\n  '10': '10 Minutes',\r\n  '30': '30 Minutes',\r\n  '60': '1 Hour',\r\n  '120': '2 Hours',\r\n  '1440': '1 Day'\r\n}\r\n","import React from 'react';\r\nimport './Header.css';\r\nimport { ThemeConsumer } from '../ThemeContext';\r\nimport { teams } from '../constants';\r\n\r\nconst Header = ({ setTheme }) => {\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <header className={'bg-' + theme}>\r\n          <div className='flex'>\r\n            <h1 className={'dib p10 ' + theme}>F1 Races</h1>\r\n            <div className='select-wrapper'>\r\n              <select\r\n                value={theme}\r\n                onChange={setTheme}\r\n                className={'b-' + theme}\r\n                aria-label='Select theme'\r\n              >\r\n                {\r\n                  teams.map(team => {\r\n                    return (\r\n                      <option\r\n                        key={team.id}\r\n                        value={team.id}\r\n                        className={'bg-' + team.id}\r\n                      >\r\n                        {team.name}\r\n                      </option>\r\n                    );\r\n                  })\r\n                }\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </header>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { ThemeConsumer } from '../../ThemeContext';\r\n\r\nconst NavItem = ({ setRoute, route, active, children }) => {\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <button\r\n          onClick={setRoute(route)}\r\n          className={`${active ? ('active bg-' + theme) : ''} h-${theme}`}\r\n        >\r\n          {children}\r\n        </button>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default NavItem;\r\n","import React from 'react';\r\nimport './Navigation.css';\r\nimport NavItem from './NavItem';\r\n\r\nconst Navigation = ({ setRoute, route }) => {\r\n  return (\r\n    <nav>\r\n      <NavItem\r\n        setRoute={setRoute}\r\n        route='RaceList'\r\n        active={route ==='RaceList'}\r\n      >\r\n        Calendar\r\n      </NavItem>\r\n      <NavItem\r\n        setRoute={setRoute}\r\n        route='Standings'\r\n        active={route === 'Standings'}\r\n      >\r\n        Standings\r\n      </NavItem>\r\n      <NavItem\r\n        setRoute={setRoute}\r\n        route='Notifications'\r\n        active={route === 'Notifications'}\r\n      >\r\n        Saved Notifications\r\n      </NavItem>\r\n      <NavItem\r\n        setRoute={setRoute}\r\n        route='Calendars'\r\n        active={route === 'Calendars'}\r\n      >\r\n        Saved Calendars\r\n      </NavItem>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","export const getDate = (date, time) => {\r\n  return time ? new Date(date + 'T' + time) : new Date(date);\r\n}\r\n","import React from 'react';\r\nimport './Race.css';\r\nimport { getDate } from '../../helpers';\r\n\r\nconst Race = ({\r\n  round, country, locality, date, time, upcomingRace,\r\n  onClickRace, onEnterRace\r\n}) => {\r\n  let raceClasses = 'race unselectable';\r\n  raceClasses += Number(round) % 2 === 1 ? ' striped' : '';\r\n  raceClasses += upcomingRace ? ' upcoming' : '';\r\n  const dateTime = getDate(date, time);\r\n\r\n  return (\r\n    <div\r\n      className={raceClasses}\r\n      onClick={onClickRace(round)}\r\n      onKeyPress={onEnterRace(round)}\r\n      title='Show details'\r\n      tabIndex='0'\r\n    >\r\n      <span className='round'>{round}.</span>\r\n      <span className='location'>{country}, {locality}</span>\r\n      <span className='date-time'>\r\n        <span className='date'>{dateTime.toLocaleDateString()}</span>\r\n        <span className='time'>\r\n          {time && dateTime.toLocaleTimeString()}\r\n        </span>\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Race;\r\n","import React from 'react';\r\nimport Race from './Race';\r\nimport { ThemeConsumer } from '../../ThemeContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\r\nconst RaceList = ({\r\n  races, upcomingRace, isLoading, error, onClickRace, onEnterRace, onSaveRaces,\r\n  seasonSelect\r\n}) => {\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <div className='container'>\r\n          {seasonSelect}\r\n          { !error && !isLoading &&\r\n            <button\r\n              onClick={onSaveRaces}\r\n              className={`button ml10 mb10 bg-${theme} b-${theme}`}\r\n            >\r\n              <FontAwesomeIcon icon={faSave} /> Save calendar\r\n            </button>\r\n          }\r\n          { isLoading && <p className='p10'>Loading...</p> }\r\n          { error && <p className='p10'>{error.message}</p> }\r\n          { races &&\r\n            races.map(race => {\r\n              return (\r\n                <Race\r\n                  key={race.round}\r\n                  round={race.round}\r\n                  country={race.Circuit.Location.country}\r\n                  locality={race.Circuit.Location.locality}\r\n                  date={race.date}\r\n                  time={race.time}\r\n                  upcomingRace={Number(race.round) === Number(upcomingRace)}\r\n                  onClickRace={onClickRace}\r\n                  onEnterRace={onEnterRace}\r\n                />\r\n              );\r\n            })\r\n          }\r\n        </div>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default RaceList;\r\n","import React, { Fragment } from 'react';\r\n\r\nconst DriverStandings = ({ standings, isLoading, error }) => {\r\n  return (\r\n    <Fragment>\r\n      { isLoading && <p className='p10'>Loading...</p> }\r\n      { error && <p className='p10'>{error.message}</p> }\r\n      { standings &&\r\n        <Fragment>\r\n          <h2 className='p10'>Driver Standings</h2>\r\n          <div className='responsive-table'>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th className='tr' title='Position'>Pos.</th>\r\n                  <th>Driver</th>\r\n                  <th>Constructor</th>\r\n                  <th className='tr'>Points</th>\r\n                  <th className='tr'>Wins</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {\r\n                  standings.map(s => {\r\n                    let constructors = '';\r\n                    for (let i = 0, l = s.Constructors.length; i < l; i++) {\r\n                      constructors += s.Constructors[i].name;\r\n                      if (i + 1 !== l) {\r\n                        constructors += ', ';\r\n                      }\r\n                    }\r\n                    return (\r\n                      <tr key={s.Driver.driverId}>\r\n                        <td className='tr'>{s.position}</td>\r\n                        <td>{s.Driver.givenName} {s.Driver.familyName}</td>\r\n                        <td>{constructors}</td>\r\n                        <td className='tr'>{s.points}</td>\r\n                        <td className='tr'>{s.wins}</td>\r\n                      </tr>\r\n                    );\r\n                  })\r\n                }\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </Fragment>\r\n      }\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default DriverStandings;\r\n","import React, { Fragment } from 'react';\r\n\r\nconst ConstructorStandings = ({ standings, isLoading, error }) => {\r\n  return (\r\n    <Fragment>\r\n      { isLoading && <p className='p10'>Loading...</p> }\r\n      { error && <p className='p10'>{error.message}</p> }\r\n      { standings &&\r\n        <Fragment>\r\n          <h2 className='p10'>Constructor Standings</h2>\r\n          <div className='responsive-table'>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th className='tr' title='Position'>Pos.</th>\r\n                  <th>Constructor</th>\r\n                  <th className='tr'>Points</th>\r\n                  <th className='tr'>Wins</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {\r\n                  standings.map(s => {\r\n                    return (\r\n                      <tr key={s.Constructor.name}>\r\n                        <td className='tr'>{s.position}</td>\r\n                        <td>{s.Constructor.name}</td>\r\n                        <td className='tr'>{s.points}</td>\r\n                        <td className='tr'>{s.wins}</td>\r\n                      </tr>\r\n                    );\r\n                  })\r\n                }\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </Fragment>\r\n      }\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default ConstructorStandings;\r\n","import React, { Component } from 'react';\r\nimport DriverStandings from './DriverStandings';\r\nimport ConstructorStandings from './ConstructorStandings';\r\n\r\nclass Standings extends Component {\r\n  componentDidMount() {\r\n    const { season } = this.props;\r\n    if (!this.props.driverStandings[season]) {\r\n      this.props.getDriverStandings(season);\r\n    }\r\n    if (!this.props.constructorStandings[season]) {\r\n      this.props.getConstructorStandings(season);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      season, driverStandings, isLoadingDrivers, errorDrivers,\r\n      constructorStandings, isLoadingConstructors, errorConstructors\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className='container'>\r\n        {this.props.seasonSelect}\r\n        <DriverStandings\r\n          standings={driverStandings[season]}\r\n          isLoading={isLoadingDrivers}\r\n          error={errorDrivers}\r\n        />\r\n        <ConstructorStandings\r\n          standings={constructorStandings[season]}\r\n          isLoading={isLoadingConstructors}\r\n          error={errorConstructors}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Standings;\r\n","import React from 'react';\r\nimport './RaceResults.css';\r\n\r\nconst RaceResults = ({ results }) => {\r\n  return (\r\n    <div className='responsive-table'>\r\n      <h2>Results</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th className='tr' title='Finish Position'>Pos.</th>\r\n            <th className='tr' title='Grid Position'>Grid</th>\r\n            <th>Driver</th>\r\n            <th>Constructor</th>\r\n            <th>Time</th>\r\n            <th className='tr'>Laps</th>\r\n            <th>Status</th>\r\n            <th className='tr' title='Points'>Pts</th>\r\n            <th>Fastest Lap</th>\r\n            <th title='Average Speed'>Avg Speed</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            results.map(res => {\r\n              return (\r\n                <tr key={res.Driver.driverId + res.position}>\r\n                  <td className='tr'>{res.position}.</td>\r\n                  <td className='tr'>\r\n                    {res.grid === '0' ? 'Pit Lane' : (res.grid + '.')}\r\n                  </td>\r\n                  <td>{res.Driver.givenName} {res.Driver.familyName}</td>\r\n                  <td>{res.Constructor.name}</td>\r\n                  <td>{res.Time ? res.Time.time : 'N/A'}</td>\r\n                  <td className='tr'>{res.laps}</td>\r\n                  <td>{res.status}</td>\r\n                  <td className='tr'>{res.points}</td>\r\n                  <td\r\n                    className={res.FastestLap && res.FastestLap.rank === '1' ? 'fastest' : ''}\r\n                  >\r\n                    {res.FastestLap ? res.FastestLap.Time.time: 'N/A'}\r\n                  </td>\r\n                  <td>\r\n                    { res.FastestLap\r\n                      ? `${res.FastestLap.AverageSpeed.speed} ${res.FastestLap.AverageSpeed.units}`\r\n                      : 'N/A'\r\n                    }\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RaceResults;\r\n","import React from 'react';\r\nimport { ThemeConsumer } from '../../ThemeContext';\r\nimport { notificationOptions } from '../../constants';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBell } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst AddNotification = ({\r\n  addNotification, raceName, dateTime, notificationWhen, setNotificationWhen\r\n}) => {\r\n  let options = [];\r\n  for (const [key, value] of Object.entries(notificationOptions)) {\r\n    options.push(<option key={key} value={key}>{value + ' Before'}</option>);\r\n  }\r\n\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <div>\r\n          <button\r\n            className={`button bg-${theme} b-${theme}`}\r\n            onClick={addNotification(raceName, dateTime, notificationWhen)}\r\n          >\r\n            <FontAwesomeIcon icon={faBell} /> Add notification\r\n          </button>\r\n          <select\r\n            value={notificationWhen}\r\n            onChange={setNotificationWhen}\r\n            className={'b-' + theme}\r\n            aria-label='Select notification time'\r\n          >\r\n            {options}\r\n          </select>\r\n        </div>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default AddNotification;\r\n","import React, { Fragment } from 'react';\r\nimport './RaceDetails.css';\r\nimport RaceResults from './RaceResults';\r\nimport AddNotification from './AddNotification';\r\nimport { getDate } from '../../helpers';\r\nimport { ThemeConsumer } from '../../ThemeContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faExternalLinkAlt, faChevronLeft, faChevronRight, faSpinner\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst RaceDetails = ({\r\n  race, raceCount, results, isLoadingResults, resultsError, onClickRace,\r\n  getRaceResults, addNotification, notificationWhen, setNotificationWhen\r\n}) => {\r\n  const dateTime = getDate(race.date, race.time);\r\n  const round = Number(race.round);\r\n\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <div className='container p10'>\r\n          <div className='prev-next mb10 mt10'>\r\n            { round !== 1 &&\r\n              <button\r\n                className={`button button-left mr10 bg-${theme} b-${theme}`}\r\n                onClick={onClickRace(round - 1)}\r\n              >\r\n                <FontAwesomeIcon icon={faChevronLeft} /> Previous Race\r\n              </button>\r\n            }\r\n            { round !== raceCount &&\r\n              <button\r\n                className={`button button-right bg-${theme} b-${theme}`}\r\n                onClick={onClickRace(round + 1)}\r\n              >\r\n                Next Race <FontAwesomeIcon icon={faChevronRight} />\r\n              </button>\r\n            }\r\n          </div>\r\n          <AddNotification\r\n            addNotification={addNotification}\r\n            raceName={race.raceName}\r\n            dateTime={dateTime}\r\n            notificationWhen={notificationWhen}\r\n            setNotificationWhen={setNotificationWhen}\r\n          />\r\n          <h2>Race Details</h2>\r\n          <p>Race: <a href={race.url} className='break-word'\r\n          target='_blank' rel='noopener noreferrer'>\r\n            {race.raceName} <FontAwesomeIcon icon={faExternalLinkAlt} />\r\n          </a></p>\r\n          <p>Season: {race.season}</p>\r\n          <p>Round: {round}</p>\r\n          <p>\r\n            Location: {race.Circuit.Location.country}, {race.Circuit.Location.locality}\r\n          </p>\r\n          <p>Circuit: <a href={race.Circuit.url} className='break-word'\r\n          target='_blank' rel='noopener noreferrer'>\r\n            {race.Circuit.circuitName} <FontAwesomeIcon icon={faExternalLinkAlt} />\r\n          </a></p>\r\n          <p>\r\n            Date and time: {dateTime.toLocaleDateString()} {race.time && dateTime.toLocaleTimeString()}\r\n          </p>\r\n          {\r\n            results ?\r\n              <RaceResults results={results} />\r\n            :\r\n              <button\r\n                onClick={getRaceResults(race.season, round)}\r\n                className={`button bg-${theme} b-${theme}`}\r\n                disabled={isLoadingResults}\r\n              >\r\n                {\r\n                  isLoadingResults ?\r\n                    <Fragment>\r\n                      <FontAwesomeIcon icon={faSpinner} spin={true} /> {'Loading...'}\r\n                    </Fragment>\r\n                  :\r\n                    <Fragment>Load Results</Fragment>\r\n                }\r\n              </button>\r\n          }\r\n          { resultsError && <p>{resultsError.message}</p> }\r\n        </div>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default RaceDetails;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Notifications = ({ notifications, deleteNotification }) => {\r\n  const sortedNotifications = notifications.slice().sort((a, b) => {\r\n    return a.notificationDate - b.notificationDate;\r\n  });\r\n\r\n  return (\r\n    <div className='container'>\r\n      <h2 className='ml10 mr10'>Saved Notifications</h2>\r\n      {\r\n        notifications.length === 0 ?\r\n          <p className='p10'>No saved notifications</p>\r\n        :\r\n          <div className='responsive-table'>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th></th>\r\n                  <th>Title</th>\r\n                  <th>Notified</th>\r\n                  <th>Race Date</th>\r\n                  <th>Notification Date</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {\r\n                  sortedNotifications.map(notification => {\r\n                    const {\r\n                      id, title, notified, raceDate, notificationDate\r\n                    } = notification;\r\n                    return (\r\n                      <tr key={id}>\r\n                        <td>\r\n                          <button\r\n                            onClick={deleteNotification(id)}\r\n                            className='button bg-ferrari b-ferrari'\r\n                            title='Delete Notification'\r\n                          >\r\n                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                          </button>\r\n                        </td>\r\n                        <td>{title}</td>\r\n                        <td>{notified ? 'Yes': 'No'}</td>\r\n                        <td>\r\n                          {raceDate.toLocaleDateString()} {raceDate.toLocaleTimeString()}\r\n                        </td>\r\n                        <td>\r\n                          {notificationDate.toLocaleDateString()} {notificationDate.toLocaleTimeString()}\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })\r\n                }\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Notifications;\r\n","import { teams } from './constants';\r\n\r\nexport const getCalendars = () => {\r\n  try {\r\n    let calendars = [];\r\n    for (let i = 0, l = localStorage.length; i < l; i++) {\r\n      if (/^calendar_\\d{4}$/.test(localStorage.key(i))) {\r\n        calendars.push(localStorage.key(i));\r\n      }\r\n    }\r\n    return calendars;\r\n  } catch (error) {\r\n    return [];\r\n  }\r\n}\r\n\r\nexport const saveRaces = (races, season) => {\r\n  try {\r\n    const serializedRaces = JSON.stringify(races);\r\n    localStorage.setItem('calendar_' + season, serializedRaces);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n}\r\n\r\nexport const loadRaces = (season) => {\r\n  try {\r\n    const serializedRaces = localStorage.getItem('calendar_' + season);\r\n    if (serializedRaces === null) return undefined;\r\n    return JSON.parse(serializedRaces);\r\n  } catch (error) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport const saveNotifications = (notifications) => {\r\n  try {\r\n    const serializedNotifications = JSON.stringify(notifications);\r\n    localStorage.setItem('notifications', serializedNotifications);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n}\r\n\r\nexport const loadNotifications = () => {\r\n  try {\r\n    const serializedNotifications = localStorage.getItem('notifications');\r\n    if (serializedNotifications === null) return undefined;\r\n    return JSON.parse(serializedNotifications, (key, value) => {\r\n      if (key === 'notificationDate' || key === 'raceDate') {\r\n        return new Date(value);\r\n      } else {\r\n        return value;\r\n      }\r\n    });\r\n  } catch (error) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport const saveTheme = (theme) => {\r\n  try {\r\n    localStorage.setItem('theme', theme);\r\n  } catch (error) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport const loadTheme = () => {\r\n  try {\r\n    const theme = localStorage.getItem('theme');\r\n    for (let i = 0, l = teams.length; i < l; i++) {\r\n      if (teams[i].id === theme) {\r\n        return theme;\r\n      }\r\n    }\r\n    return 'ferrari';\r\n  } catch (error) {\r\n    return 'ferrari';\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Calendars.css';\r\nimport { getCalendars } from '../../localStorage';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Calendars extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      calendars: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const calendars = getCalendars();\r\n    this.setState({ calendars });\r\n  }\r\n\r\n  deleteCalendar = (calendar) => () => {\r\n    const calendars = this.state.calendars.filter(c => c !== calendar);\r\n    this.setState({ calendars });\r\n    localStorage.removeItem(calendar);\r\n  }\r\n\r\n  render() {\r\n    const sortedCalendars = this.state.calendars.slice().sort((a, b) => {\r\n      return a.slice(-4) - b.slice(-4);\r\n    });\r\n\r\n    return (\r\n      <div className='container'>\r\n        <h2 className='ml10 mr10'>Saved Calendars</h2>\r\n        {\r\n          this.state.calendars.length === 0 ?\r\n            <p className='p10'>No saved calendars</p>\r\n          :\r\n            <ul className='ml10 mr10'>\r\n              {\r\n                sortedCalendars.map(calendar => {\r\n                  return (\r\n                    <li key={calendar}>\r\n                      <button\r\n                        className='button bg-ferrari b-ferrari mr10 mb10'\r\n                        title='Delete Calendar'\r\n                        onClick={this.deleteCalendar(calendar)}\r\n                      >\r\n                        <FontAwesomeIcon icon={faTrashAlt} />\r\n                      </button>\r\n                      <span>{calendar.slice(-4)}</span>\r\n                    </li>\r\n                  );\r\n                })\r\n              }\r\n            </ul>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calendars;\r\n","import React from 'react';\r\nimport './SeasonSelect.css';\r\nimport { FIRST_SEASON, CURRENT_SEASON } from '../constants';\r\nimport { ThemeConsumer } from '../ThemeContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst SeasonSelect = ({ season, onSelectSeason, onChangeSeason }) => {\r\n  let seasonOptions = [];\r\n  for (let i = FIRST_SEASON; i <= CURRENT_SEASON; i++) {\r\n    seasonOptions.push(<option key={i} value={i}>Season {i}</option>);\r\n  }\r\n\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <div className='season ml10 mb10'>\r\n          { season !== FIRST_SEASON &&\r\n            <button\r\n              onClick={onChangeSeason(-1)}\r\n              title='Previous season'\r\n              className={`button bg-${theme} b-${theme}`}\r\n            >\r\n              <FontAwesomeIcon icon={faChevronLeft} />\r\n            </button>\r\n          }\r\n          <select\r\n            value={season}\r\n            onChange={onSelectSeason}\r\n            className={'b-' + theme}\r\n            aria-label='Select season'\r\n          >\r\n            {seasonOptions}\r\n          </select>\r\n          { season !== CURRENT_SEASON &&\r\n            <button\r\n              onClick={onChangeSeason(1)}\r\n              title='Next season'\r\n              className={`button bg-${theme} b-${theme}`}\r\n            >\r\n              <FontAwesomeIcon icon={faChevronRight} />\r\n            </button>\r\n          }\r\n        </div>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default SeasonSelect;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <div className='p10'>\r\n        Icons made by <a href=\"https://www.freepik.com/\" title=\"Freepik\">\r\n        Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\r\n        www.flaticon.com</a> is licensed by <a href=\"http://creativecommons.org/licenses/by/3.0/\"\r\n        title=\"Creative Commons BY 3.0\" target=\"_blank\"\r\n        rel=\"noopener noreferrer\">CC 3.0 BY</a>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component, Fragment } from 'react';\r\nimport {\r\n  fetchRaces, fetchRaceResults, fetchDriverStandings, fetchConstructorStandings\r\n} from './api';\r\nimport * as deepmerge from 'deepmerge';\r\nimport Header from './components/Header';\r\nimport Navigation from './components/Navigation/Navigation';\r\nimport RaceList from './components/RaceList/RaceList';\r\nimport Standings from './components/Standings/Standings';\r\nimport RaceDetails from './components/RaceDetails/RaceDetails';\r\nimport Notifications from './components/SavedData/Notifications';\r\nimport Calendars from './components/SavedData/Calendars';\r\nimport SeasonSelect from './components/SeasonSelect';\r\nimport Footer from './components/Footer';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport { ThemeProvider } from './ThemeContext';\r\nimport {\r\n  FIRST_SEASON, CURRENT_SEASON, notificationOptions\r\n} from './constants';\r\nimport {\r\n  saveRaces, loadRaces, saveNotifications, loadNotifications,\r\n  saveTheme, loadTheme\r\n} from './localStorage';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      races: {},\r\n      isLoading: false,\r\n      error: null,\r\n      season: CURRENT_SEASON,\r\n      selectedRaceRound: 0,\r\n      results: {},\r\n      isLoadingResults: false,\r\n      resultsError: null,\r\n      notifications: [],\r\n      notificationWhen: '60',\r\n      route: 'RaceList',\r\n      theme: '',\r\n      driverStandings: {},\r\n      isLoadingDrivers: false,\r\n      errorDrivers: null,\r\n      constructorStandings: {},\r\n      isLoadingConstructors: false,\r\n      errorConstructors: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getRaces(this.state.season);\r\n    const notifications = loadNotifications();\r\n    if (notifications) {\r\n      this.setState({ notifications });\r\n    }\r\n    const theme = loadTheme();\r\n    this.setState({ theme });\r\n    this.interval = setInterval(this.checkNotifications, 60 * 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  setTheme = (e) => {\r\n    this.setState({ theme: e.target.value });\r\n    saveTheme(e.target.value);\r\n  }\r\n\r\n  checkNotifications = () => {\r\n    const { notifications } = this.state;\r\n    const nowTime = Math.floor(new Date().getTime() / 1000 / 60);\r\n\r\n    notifications.forEach(notification => {\r\n      const { notificationDate, raceDate, title, body } = notification;\r\n      const notificationTime = Math.floor(notificationDate.getTime() / 1000 / 60);\r\n\r\n      const showNotification = (title, body) => {\r\n        new Notification(title, { body: body });\r\n        notification.notified = true;\r\n        const error = saveNotifications(notifications);\r\n        if (!error) {\r\n          this.setState({ notifications });\r\n        }\r\n      }\r\n\r\n      if (notificationTime === nowTime && !notification.notified) {\r\n        showNotification(title, body);\r\n      } else if (notificationTime < nowTime && !notification.notified) {\r\n        showNotification(\r\n          'Missed notification: ' + title,\r\n          `Notification time: ${notificationDate.toLocaleDateString()} ${notificationDate.toLocaleTimeString()}\r\nRace time: ${raceDate.toLocaleDateString()} ${raceDate.toLocaleTimeString()}`\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  getRaces = (season) => {\r\n    const races = loadRaces(season);\r\n    if (races) {\r\n      const newRaces = { [season]: races };\r\n      this.setState(prevState => {\r\n        return { races: { ...prevState.races, ...newRaces } };\r\n      });\r\n    } else {\r\n      this.setState({ isLoading: true });\r\n      fetchRaces(season)\r\n        .then(data => {\r\n          if (data.MRData.RaceTable.Races.length === 0) {\r\n            throw Error('No data available');\r\n          }\r\n\r\n          const newRaces = { [season]: data.MRData.RaceTable.Races };\r\n          this.setState(prevState => {\r\n            return {\r\n              races: { ...prevState.races, ...newRaces },\r\n              isLoading: false\r\n            };\r\n          });\r\n\r\n          if (season === CURRENT_SEASON) {\r\n            saveRaces(data.MRData.RaceTable.Races, season);\r\n          }\r\n        })\r\n        .catch(error => this.setState({ error, isLoading: false }));\r\n    }\r\n  }\r\n\r\n  getRaceResults = (season, round) => () => {\r\n    this.setState({ isLoadingResults: true });\r\n    fetchRaceResults(season, round)\r\n      .then(data => {\r\n        if (data.MRData.RaceTable.Races.length === 0) {\r\n          throw Error('No data available');\r\n        }\r\n\r\n        let newResults = {\r\n          [season]: {\r\n            [round]: data.MRData.RaceTable.Races[0].Results\r\n          }\r\n        };\r\n\r\n        this.setState(prevState => {\r\n          return {\r\n            results: deepmerge(prevState.results, newResults),\r\n            isLoadingResults: false,\r\n            resultsError: null\r\n          };\r\n        });\r\n      })\r\n      .catch(error => {\r\n        this.setState({ resultsError: error, isLoadingResults: false });\r\n      });\r\n  }\r\n\r\n  getDriverStandings = (season) => {\r\n    this.setState({ isLoadingDrivers: true });\r\n    fetchDriverStandings(season)\r\n      .then(data => {\r\n        this.setState(prevState => {\r\n          const newStandings = {\r\n            [season]: data.MRData.StandingsTable.StandingsLists[0].DriverStandings\r\n          };\r\n          return {\r\n            driverStandings: { ...prevState.driverStandings, ...newStandings },\r\n            isLoadingDrivers: false\r\n          };\r\n        });\r\n      })\r\n      .catch(error => {\r\n        this.setState({ isLoadingDrivers: false, errorDrivers: error });\r\n      });\r\n  }\r\n\r\n  getConstructorStandings = (season) => {\r\n    this.setState({ isLoadingConstructors: true });\r\n    fetchConstructorStandings(season)\r\n      .then(data => {\r\n        this.setState(prevState => {\r\n          const newStandings = {\r\n            [season]: data.MRData.StandingsTable.StandingsLists[0].ConstructorStandings\r\n          };\r\n          return {\r\n            constructorStandings: {\r\n              ...prevState.constructorStandings, ...newStandings\r\n            },\r\n            isLoadingConstructors: false\r\n          };\r\n        });\r\n      })\r\n      .catch(error => {\r\n        this.setState({\r\n          isLoadingConstructors: false,\r\n          errorConstructors: error\r\n        });\r\n      });\r\n  }\r\n\r\n  onClickRace = (raceRound) => () => {\r\n    this.selectRace(raceRound);\r\n  }\r\n\r\n  onEnterRace = (raceRound) => (e) => {\r\n    if (e.key === 'Enter') {\r\n      this.selectRace(raceRound);\r\n    }\r\n  }\r\n\r\n  selectRace = (raceRound) => {\r\n    this.setState({\r\n      selectedRaceRound: Number(raceRound),\r\n      route: 'RaceDetails',\r\n      resultsError: null\r\n    });\r\n  }\r\n\r\n  onSelectSeason = (e) => {\r\n    this.setSeason(Number(e.target.value));\r\n  }\r\n\r\n  onChangeSeason = (change) => () => {\r\n    const newSeason = Number(this.state.season) + change;\r\n    if (newSeason >= FIRST_SEASON && newSeason <= CURRENT_SEASON) {\r\n      this.setSeason(newSeason);\r\n    }\r\n  }\r\n\r\n  setSeason = (season) => {\r\n    const { route, races, driverStandings } = this.state;\r\n    this.setState({\r\n      season,\r\n      error: null\r\n    });\r\n    if (!races[season] && route === 'RaceList') {\r\n      this.getRaces(season);\r\n    }\r\n    if (!driverStandings[season] && route === 'Standings') {\r\n      this.getDriverStandings(season);\r\n      this.getConstructorStandings(season);\r\n    }\r\n  }\r\n\r\n  onSaveRaces = () => {\r\n    const error = saveRaces(this.state.races[this.state.season], this.state.season);\r\n    if (error) {\r\n      toast.error('Error - calendar was not saved :(');\r\n    } else {\r\n      toast.success('Calendar saved to browser storage');\r\n    }\r\n  }\r\n\r\n  addNotification = (raceName, raceDate, notificationWhen) => () => {\r\n    if (!('Notification' in window)) {\r\n      toast.error('This browser does not support notifications :(');\r\n      return;\r\n    }\r\n\r\n    if (raceDate < new Date()) {\r\n      toast.error('This race already started or is over');\r\n      return;\r\n    }\r\n\r\n    let notificationDate = new Date(raceDate);\r\n    notificationDate.setMinutes(notificationDate.getMinutes() - (Number(notificationWhen) ? notificationWhen : 60));\r\n\r\n    const id = notificationDate.getTime();\r\n    for (let i = 0, l = this.state.notifications.length; i < l; i++) {\r\n      if (this.state.notifications[i].id === id) {\r\n        toast.error('Notification already exists');\r\n        return;\r\n      }\r\n    }\r\n\r\n    const createNotification = () => {\r\n      let body = 'Race Starts in ';\r\n      body += notificationOptions[notificationWhen] ? notificationOptions[notificationWhen] : notificationOptions['60'];\r\n\r\n      const notification = {\r\n        id,\r\n        raceDate,\r\n        notificationDate,\r\n        notified: false,\r\n        title: raceName,\r\n        body\r\n      };\r\n\r\n      const error = saveNotifications(this.state.notifications.concat(notification));\r\n      if (error) {\r\n        toast.error('Error - notification was not saved :(');\r\n      } else {\r\n        toast.success('Notification saved to browser storage');\r\n        this.setState(state => {\r\n          return { notifications: state.notifications.concat(notification) };\r\n        }, () => this.checkNotifications());\r\n      }\r\n    }\r\n\r\n    if (Notification.permission === 'granted') {\r\n      createNotification();\r\n    } else if (Notification.permission !== 'denied') {\r\n      Notification.requestPermission().then(permission => {\r\n        if (permission === 'granted') {\r\n          createNotification();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  deleteNotification = (id) => () => {\r\n    const notifications = this.state.notifications.filter(notification => {\r\n      return notification.id !== id;\r\n    });\r\n    const error = saveNotifications(notifications);\r\n    if (error) {\r\n      toast.error('Error - Unable to delete notification :(');\r\n    } else {\r\n      this.setState({ notifications });\r\n    }\r\n  }\r\n\r\n  setNotificationWhen = (e) => {\r\n    this.setState({ notificationWhen: e.target.value });\r\n  }\r\n\r\n  setRoute = (route) => () => {\r\n    this.setState({ route });\r\n    if (route === 'RaceList' || route === 'Standings') {\r\n      this.setState({ season: CURRENT_SEASON });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      races, isLoading, error, season, notifications, selectedRaceRound, route,\r\n      results, isLoadingResults, resultsError, notificationWhen, theme,\r\n      driverStandings, isLoadingDrivers, errorDrivers,\r\n      constructorStandings, isLoadingConstructors, errorConstructors\r\n    } = this.state;\r\n    const seasonRaces = races[season];\r\n\r\n    let selectedRace = null;\r\n    if (selectedRaceRound > 0 && races[season]) {\r\n      const i = races[season].findIndex((race) => {\r\n        return Number(race.round) === selectedRaceRound;\r\n      });\r\n      selectedRace = races[season][i];\r\n    }\r\n\r\n    let upcomingRace = '';\r\n    if (seasonRaces && season === CURRENT_SEASON) {\r\n      for (let i = 0, l = seasonRaces.length, d = new Date(); i < l; i++) {\r\n        if (d < new Date(seasonRaces[i].date + 'T' + seasonRaces[i].time)) {\r\n          upcomingRace = seasonRaces[i].round;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    let raceResults;\r\n    if (selectedRace && results[selectedRace.season]) {\r\n      raceResults = results[selectedRace.season][selectedRace.round];\r\n    }\r\n\r\n    const seasonSelect = (\r\n      <SeasonSelect\r\n        season={season}\r\n        onSelectSeason={this.onSelectSeason}\r\n        onChangeSeason={this.onChangeSeason}\r\n      />\r\n    );\r\n\r\n    return (\r\n      <ThemeProvider value={theme}>\r\n        <Fragment>\r\n          <Header setTheme={this.setTheme} />\r\n          <Navigation setRoute={this.setRoute} route={route} />\r\n          <ToastContainer\r\n            position='bottom-center'\r\n            autoClose={5000}\r\n            hideProgressBar\r\n            newestOnTop={false}\r\n            closeOnClick={false}\r\n            rtl={false}\r\n            pauseOnVisibilityChange\r\n            draggable={false}\r\n            pauseOnHover\r\n          />\r\n          { route === 'Notifications' &&\r\n            <Notifications\r\n              notifications={notifications}\r\n              deleteNotification={this.deleteNotification}\r\n            />\r\n          }\r\n          { route === 'Calendars' && <Calendars /> }\r\n          { route === 'RaceDetails' &&\r\n            <RaceDetails\r\n              race={selectedRace}\r\n              raceCount={seasonRaces.length}\r\n              results={raceResults}\r\n              isLoadingResults={isLoadingResults}\r\n              resultsError={resultsError}\r\n              onClickRace={this.onClickRace}\r\n              getRaceResults={this.getRaceResults}\r\n              addNotification={this.addNotification}\r\n              notificationWhen={notificationWhen}\r\n              setNotificationWhen={this.setNotificationWhen}\r\n            />\r\n          }\r\n          { route === 'RaceList' &&\r\n            <RaceList\r\n              races={seasonRaces}\r\n              upcomingRace={upcomingRace}\r\n              isLoading={isLoading}\r\n              error={error}\r\n              onClickRace={this.onClickRace}\r\n              onEnterRace={this.onEnterRace}\r\n              onSaveRaces={this.onSaveRaces}\r\n              seasonSelect={seasonSelect}\r\n            />\r\n          }\r\n          { route === 'Standings' &&\r\n            <Standings\r\n              season={season}\r\n              driverStandings={driverStandings}\r\n              isLoadingDrivers={isLoadingDrivers}\r\n              errorDrivers={errorDrivers}\r\n              getDriverStandings={this.getDriverStandings}\r\n              constructorStandings={constructorStandings}\r\n              isLoadingConstructors={isLoadingConstructors}\r\n              errorConstructors={errorConstructors}\r\n              getConstructorStandings={this.getConstructorStandings}\r\n              seasonSelect={seasonSelect}\r\n            />\r\n          }\r\n          <Footer />\r\n        </Fragment>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}