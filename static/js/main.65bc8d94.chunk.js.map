{"version":3,"sources":["api.js","ThemeContext.js","constants.js","components/Header.js","components/Navigation/NavItem.js","components/Navigation/Navigation.js","helpers.js","components/RaceList/Race.js","components/RaceList/RaceList.js","components/Standings/DriverStandings.js","components/Standings/ConstructorStandings.js","components/Standings/Standings.js","components/RaceDetails/RaceResults.js","components/RaceDetails/AddNotification.js","components/RaceDetails/RaceDetails.js","components/SavedData/Notifications.js","localStorage.js","components/SavedData/Calendars.js","components/SeasonSelect.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["urlBase","fetchData","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","url","response","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","_x","apply","this","arguments","fetchRaces","_ref2","_callee2","season","data","_context2","concat","MRData","RaceTable","Races","length","Error","_x2","fetchRaceResults","_ref3","_callee3","round","_context3","Results","_x3","_x4","fetchDriverStandings","_ref4","_callee4","_context4","StandingsTable","StandingsLists","DriverStandings","_x5","fetchConstructorStandings","_ref5","_callee5","_context5","ConstructorStandings","_x6","ThemeContext","React","createContext","ThemeProvider","Provider","ThemeConsumer","Consumer","FIRST_SEASON","CURRENT_SEASON","Date","getFullYear","teams","id","name","notificationOptions","10","30","60","120","1440","Header","setTheme","react_default","createElement","theme","className","value","onChange","aria-label","map","team","key","NavItem","setRoute","route","active","children","onClick","Navigation","Navigation_NavItem","getDate","date","time","Race","country","locality","upcomingRace","onClickRace","onEnterRace","raceClasses","Number","dateTime","onKeyPress","title","tabIndex","toLocaleDateString","toLocaleTimeString","RaceList","races","isLoading","error","onSaveRaces","seasonSelect","index_es","icon","faSave","message","race","components_RaceList_Race","Circuit","Location","standings","react","s","constructors","i","l","Constructors","Driver","driverId","position","givenName","familyName","points","wins","Constructor","Standings","props","driverStandings","getDriverStandings","constructorStandings","getConstructorStandings","_this$props","isLoadingDrivers","errorDrivers","isLoadingConstructors","errorConstructors","Standings_DriverStandings","Standings_ConstructorStandings","Component","RaceResults","results","res","grid","Time","laps","status","FastestLap","rank","AverageSpeed","speed","units","AddNotification","addNotification","raceName","notificationWhen","setNotificationWhen","options","_i","_Object$entries","entries","slicedToArray","push","faBell","RaceDetails","raceCount","isLoadingResults","resultsError","getRaceResults","faChevronLeft","faChevronRight","RaceDetails_AddNotification","href","target","rel","faExternalLinkAlt","circuitName","disabled","faSpinner","spin","components_RaceDetails_RaceResults","Notifications","notifications","deleteNotification","sortedNotifications","slice","sort","b","notificationDate","notification","notified","raceDate","faTrashAlt","saveRaces","serializedRaces","JSON","stringify","localStorage","setItem","loadRaces","getItem","parse","saveNotifications","serializedNotifications","saveTheme","Calendars","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","deleteCalendar","calendar","calendars","state","filter","c","setState","removeItem","test","getCalendars","_this2","sortedCalendars","SeasonSelect","onSelectSeason","onChangeSeason","seasonOptions","Footer","App","e","checkNotifications","nowTime","Math","floor","getTime","forEach","body","notificationTime","showNotification","Notification","getRaces","newRaces","defineProperty","prevState","objectSpread","navigator","onLine","toast","then","catch","newResults","deepmerge","newStandings","raceRound","selectRace","selectedRaceRound","setSeason","change","newSeason","_this$state","success","window","setMinutes","getMinutes","createNotification","permission","requestPermission","loadNotifications","loadTheme","interval","setInterval","clearInterval","_this$state2","seasonRaces","selectedRace","findIndex","raceResults","d","src_components_SeasonSelect","src_components_Header","components_Navigation_Navigation","react_toastify","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","SavedData_Notifications","components_SavedData_Calendars","components_RaceDetails_RaceDetails","components_RaceList_RaceList","components_Standings_Standings","components_Footer","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"saAAMA,EAAU,4BAEVC,EAAS,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACOC,MAAMN,GADb,cACVC,EADUE,EAAAI,KAAAJ,EAAAE,KAAA,EAEHJ,EAASO,OAFN,cAAAL,EAAAM,OAAA,SAAAN,EAAAI,MAAA,wBAAAJ,EAAAO,SAAAX,MAAH,gBAAAY,GAAA,OAAAlB,EAAAmB,MAAAC,KAAAC,YAAA,GAKFC,EAAU,eAAAC,EAAAtB,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAmB,EAAOC,GAAP,IAAAC,EAAA,OAAAvB,EAAAC,EAAAK,KAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,cAAAe,EAAAf,KAAA,EACLb,EAAS,GAAA6B,OAAI9B,EAAJ,KAAA8B,OAAeH,EAAf,UADJ,UAEmB,KADrCC,EADkBC,EAAAb,MAEfe,OAAOC,UAAUC,MAAMC,OAFR,CAAAL,EAAAf,KAAA,cAGhB,IAAIqB,MAAM,qBAHM,cAAAN,EAAAX,OAAA,SAKjBU,EAAKG,OAAOC,UAAUC,OALL,wBAAAJ,EAAAV,SAAAO,MAAH,gBAAAU,GAAA,OAAAX,EAAAJ,MAAAC,KAAAC,YAAA,GAQVc,EAAgB,eAAAC,EAAAnC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAgC,EAAOZ,EAAQa,GAAf,IAAAZ,EAAA,OAAAvB,EAAAC,EAAAK,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,cAAA2B,EAAA3B,KAAA,EACXb,EAAS,GAAA6B,OAAI9B,EAAJ,KAAA8B,OAAeH,EAAf,KAAAG,OAAyBU,EAAzB,kBADE,UAEa,KADrCZ,EADwBa,EAAAzB,MAErBe,OAAOC,UAAUC,MAAMC,OAFF,CAAAO,EAAA3B,KAAA,cAGtB,IAAIqB,MAAM,qBAHY,cAAAM,EAAAvB,OAAA,SAKvBU,EAAKG,OAAOC,UAAUC,MAAM,GAAGS,SALR,wBAAAD,EAAAtB,SAAAoB,MAAH,gBAAAI,EAAAC,GAAA,OAAAN,EAAAjB,MAAAC,KAAAC,YAAA,GAQhBsB,EAAoB,eAAAC,EAAA3C,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAwC,EAAOpB,GAAP,IAAAC,EAAA,OAAAvB,EAAAC,EAAAK,KAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,cAAAkC,EAAAlC,KAAA,EACfb,EAAS,GAAA6B,OAAI9B,EAAJ,KAAA8B,OAAeH,EAAf,0BADM,UAEuB,KADnDC,EAD4BoB,EAAAhC,MAEzBe,OAAOkB,eAAeC,eAAehB,OAFZ,CAAAc,EAAAlC,KAAA,cAG1B,IAAIqB,MAAM,qBAHgB,cAAAa,EAAA9B,OAAA,SAK3BU,EAAKG,OAAOkB,eAAeC,eAAe,GAAGC,iBALlB,wBAAAH,EAAA7B,SAAA4B,MAAH,gBAAAK,GAAA,OAAAN,EAAAzB,MAAAC,KAAAC,YAAA,GAQpB8B,EAAyB,eAAAC,EAAAnD,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAgD,EAAO5B,GAAP,IAAAC,EAAA,OAAAvB,EAAAC,EAAAK,KAAA,SAAA6C,GAAA,cAAAA,EAAA3C,KAAA2C,EAAA1C,MAAA,cAAA0C,EAAA1C,KAAA,EACpBb,EAAS,GAAA6B,OAAI9B,EAAJ,KAAA8B,OAAeH,EAAf,+BADW,UAEkB,KADnDC,EADiC4B,EAAAxC,MAE9Be,OAAOkB,eAAeC,eAAehB,OAFP,CAAAsB,EAAA1C,KAAA,cAG/B,IAAIqB,MAAM,qBAHqB,cAAAqB,EAAAtC,OAAA,SAKhCU,EAAKG,OAAOkB,eAAeC,eAAe,GAAGO,sBALb,wBAAAD,EAAArC,SAAAoC,MAAH,gBAAAG,GAAA,OAAAJ,EAAAjC,MAAAC,KAAAC,YAAA,WC7BhCoC,SAAeC,IAAMC,cAAc,KAC5BC,EAAgBH,EAAaI,SAC7BC,EAAgBL,EAAaM,SCJ7BC,EAAe,KACfC,GAAiB,IAAIC,MAAOC,cAE5BC,EAAQ,CACnB,CAAEC,GAAI,UAAWC,KAAM,WACvB,CAAED,GAAI,WAAYC,KAAM,YACxB,CAAED,GAAI,UAAWC,KAAM,mBACvB,CAAED,GAAI,UAAWC,KAAM,WACvB,CAAED,GAAI,OAAQC,KAAM,QACpB,CAAED,GAAI,cAAeC,KAAM,gBAC3B,CAAED,GAAI,YAAaC,KAAM,cACzB,CAAED,GAAI,UAAWC,KAAM,WACvB,CAAED,GAAI,YAAaC,KAAM,qBACzB,CAAED,GAAI,WAAYC,KAAM,aAGbC,EAAsB,CACjCC,GAAM,aACNC,GAAM,aACNC,GAAM,SACNC,IAAO,UACPC,KAAQ,SCoBKC,EApCA,SAAA7E,GAAkB,IAAf8E,EAAe9E,EAAf8E,SAChB,OACEC,EAAA3E,EAAA4E,cAAClB,EAAD,KACG,SAAAmB,GAAK,OACJF,EAAA3E,EAAA4E,cAAA,UAAQE,UAAW,MAAQD,GACzBF,EAAA3E,EAAA4E,cAAA,OAAKE,UAAU,QACbH,EAAA3E,EAAA4E,cAAA,MAAIE,UAAW,WAAaD,GAA5B,YACAF,EAAA3E,EAAA4E,cAAA,OAAKE,UAAU,kBACbH,EAAA3E,EAAA4E,cAAA,UACEG,MAAOF,EACPG,SAAUN,EACVI,UAAW,KAAOD,EAClBI,aAAW,gBAGTjB,EAAMkB,IAAI,SAAAC,GACR,OACER,EAAA3E,EAAA4E,cAAA,UACEQ,IAAKD,EAAKlB,GACVc,MAAOI,EAAKlB,GACZa,UAAW,MAAQK,EAAKlB,IAEvBkB,EAAKjB,eCTfmB,SAfC,SAAAzF,GAA2C,IAAxC0F,EAAwC1F,EAAxC0F,SAAUC,EAA8B3F,EAA9B2F,MAAOC,EAAuB5F,EAAvB4F,OAAQC,EAAe7F,EAAf6F,SAC1C,OACEd,EAAA3E,EAAA4E,cAAClB,EAAD,KACG,SAAAmB,GAAK,OACJF,EAAA3E,EAAA4E,cAAA,UACEc,QAASJ,EAASC,GAClBT,UAAS,GAAAtD,OAAKgE,EAAU,aAAeX,EAAS,GAAvC,OAAArD,OAA+CqD,IAEvDY,OC4BIE,EAnCI,SAAA/F,GAAyB,IAAtB0F,EAAsB1F,EAAtB0F,SAAUC,EAAY3F,EAAZ2F,MAC9B,OACEZ,EAAA3E,EAAA4E,cAAA,WACED,EAAA3E,EAAA4E,cAACgB,EAAD,CACEN,SAAUA,EACVC,MAAM,WACNC,OAAiB,aAATD,GAHV,YAOAZ,EAAA3E,EAAA4E,cAACgB,EAAD,CACEN,SAAUA,EACVC,MAAM,YACNC,OAAkB,cAAVD,GAHV,aAOAZ,EAAA3E,EAAA4E,cAACgB,EAAD,CACEN,SAAUA,EACVC,MAAM,gBACNC,OAAkB,kBAAVD,GAHV,uBAOAZ,EAAA3E,EAAA4E,cAACgB,EAAD,CACEN,SAAUA,EACVC,MAAM,YACNC,OAAkB,cAAVD,GAHV,qBC5BOM,SAAU,SAACC,EAAMC,GAC5B,OAAOA,EAAO,IAAIjC,KAAKgC,EAAO,IAAMC,GAAQ,IAAIjC,KAAKgC,KCgCxCE,EA7BF,SAAApG,GAGP,IAFJsC,EAEItC,EAFJsC,MAAO+D,EAEHrG,EAFGqG,QAASC,EAEZtG,EAFYsG,SAAUJ,EAEtBlG,EAFsBkG,KAAMC,EAE5BnG,EAF4BmG,KAAMI,EAElCvG,EAFkCuG,aACtCC,EACIxG,EADJwG,YAAaC,EACTzG,EADSyG,YAETC,EAAc,oBAClBA,GAAeC,OAAOrE,GAAS,IAAM,EAAI,WAAa,GACtDoE,GAAeH,EAAe,YAAc,GAC5C,IAAMK,EAAWX,EAAQC,EAAMC,GAE/B,OACEpB,EAAA3E,EAAA4E,cAAA,OACEE,UAAWwB,EACXZ,QAASU,EAAYlE,GACrBuE,WAAYJ,EAAYnE,GACxBwE,MAAM,eACNC,SAAS,KAEThC,EAAA3E,EAAA4E,cAAA,QAAME,UAAU,SAAS5C,EAAzB,KACAyC,EAAA3E,EAAA4E,cAAA,QAAME,UAAU,YAAYmB,EAA5B,KAAuCC,GACvCvB,EAAA3E,EAAA4E,cAAA,QAAME,UAAU,aACdH,EAAA3E,EAAA4E,cAAA,QAAME,UAAU,QAAQ0B,EAASI,sBACjCjC,EAAA3E,EAAA4E,cAAA,QAAME,UAAU,QACbiB,GAAQS,EAASK,uCCqBbC,EA1CE,SAAAlH,GAGX,IAFJmH,EAEInH,EAFJmH,MAAOZ,EAEHvG,EAFGuG,aAAca,EAEjBpH,EAFiBoH,UAAWC,EAE5BrH,EAF4BqH,MAAOb,EAEnCxG,EAFmCwG,YAAaC,EAEhDzG,EAFgDyG,YAAaa,EAE7DtH,EAF6DsH,YACjEC,EACIvH,EADJuH,aAEA,OACExC,EAAA3E,EAAA4E,cAAClB,EAAD,KACG,SAAAmB,GAAK,OACJF,EAAA3E,EAAA4E,cAAA,OAAKE,UAAU,aACZqC,GACEF,IAAUD,GACXrC,EAAA3E,EAAA4E,cAAA,UACEc,QAASwB,EACTpC,UAAS,uBAAAtD,OAAyBqD,EAAzB,OAAArD,OAAoCqD,IAE7CF,EAAA3E,EAAA4E,cAACwC,EAAA,EAAD,CAAiBC,KAAMC,MAJzB,kBAOAN,GAAarC,EAAA3E,EAAA4E,cAAA,KAAGE,UAAU,OAAb,cACbmC,GAAStC,EAAA3E,EAAA4E,cAAA,KAAGE,UAAU,OAAOmC,EAAMM,SACnCR,GACAA,EAAM7B,IAAI,SAAAsC,GACR,OACE7C,EAAA3E,EAAA4E,cAAC6C,EAAD,CACErC,IAAKoC,EAAKtF,MACVA,MAAOsF,EAAKtF,MACZ+D,QAASuB,EAAKE,QAAQC,SAAS1B,QAC/BC,SAAUsB,EAAKE,QAAQC,SAASzB,SAChCJ,KAAM0B,EAAK1B,KACXC,KAAMyB,EAAKzB,KACXI,aAAcI,OAAOiB,EAAKtF,SAAWqE,OAAOJ,GAC5CC,YAAaA,EACbC,YAAaA,UCahBxD,EA/CS,SAAAjD,GAAqC,IAAlCgI,EAAkChI,EAAlCgI,UAAWZ,EAAuBpH,EAAvBoH,UAAWC,EAAYrH,EAAZqH,MAC/C,OACEtC,EAAA3E,EAAA4E,cAACiD,EAAA,SAAD,KACElD,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,OAAd,oBACEkC,GAAarC,EAAA3E,EAAA4E,cAAA,KAAGE,UAAU,OAAb,cACbmC,GAAStC,EAAA3E,EAAA4E,cAAA,KAAGE,UAAU,OAAOmC,EAAMM,SACnCK,GACAjD,EAAA3E,EAAA4E,cAAA,OAAKE,UAAU,oBACbH,EAAA3E,EAAA4E,cAAA,aACED,EAAA3E,EAAA4E,cAAA,aACED,EAAA3E,EAAA4E,cAAA,UACED,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,KAAK4B,MAAM,YAAzB,QACA/B,EAAA3E,EAAA4E,cAAA,oBACAD,EAAA3E,EAAA4E,cAAA,yBACAD,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,MAAd,UACAH,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,MAAd,UAGJH,EAAA3E,EAAA4E,cAAA,aAEIgD,EAAU1C,IAAI,SAAA4C,GAEZ,IADA,IAAIC,EAAe,GACVC,EAAI,EAAGC,EAAIH,EAAEI,aAAatG,OAAQoG,EAAIC,EAAGD,IAChDD,GAAgBD,EAAEI,aAAaF,GAAG9D,KAC9B8D,EAAI,IAAMC,IACZF,GAAgB,MAGpB,OACEpD,EAAA3E,EAAA4E,cAAA,MAAIQ,IAAK0C,EAAEK,OAAOC,UAChBzD,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,MAAMgD,EAAEO,SAAtB,KACA1D,EAAA3E,EAAA4E,cAAA,UAAKkD,EAAEK,OAAOG,UAAd,IAA0BR,EAAEK,OAAOI,YACnC5D,EAAA3E,EAAA4E,cAAA,UAAKmD,GACLpD,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,MAAMgD,EAAEU,QACtB7D,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,MAAMgD,EAAEW,cCI7BtF,EAtCc,SAAAvD,GAAqC,IAAlCgI,EAAkChI,EAAlCgI,UAAWZ,EAAuBpH,EAAvBoH,UAAWC,EAAYrH,EAAZqH,MACpD,OACEtC,EAAA3E,EAAA4E,cAACiD,EAAA,SAAD,KACElD,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,OAAd,yBACEkC,GAAarC,EAAA3E,EAAA4E,cAAA,KAAGE,UAAU,OAAb,cACbmC,GAAStC,EAAA3E,EAAA4E,cAAA,KAAGE,UAAU,OAAOmC,EAAMM,SACnCK,GACAjD,EAAA3E,EAAA4E,cAAA,OAAKE,UAAU,oBACbH,EAAA3E,EAAA4E,cAAA,aACED,EAAA3E,EAAA4E,cAAA,aACED,EAAA3E,EAAA4E,cAAA,UACED,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,KAAK4B,MAAM,YAAzB,QACA/B,EAAA3E,EAAA4E,cAAA,yBACAD,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,MAAd,UACAH,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,MAAd,UAGJH,EAAA3E,EAAA4E,cAAA,aAEIgD,EAAU1C,IAAI,SAAA4C,GACZ,OACEnD,EAAA3E,EAAA4E,cAAA,MAAIQ,IAAK0C,EAAEY,YAAYxE,MACrBS,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,MAAMgD,EAAEO,SAAtB,KACA1D,EAAA3E,EAAA4E,cAAA,UAAKkD,EAAEY,YAAYxE,MACnBS,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,MAAMgD,EAAEU,QACtB7D,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,MAAMgD,EAAEW,cCY7BE,8LAlCO,IACVtH,EAAWL,KAAK4H,MAAhBvH,OACHL,KAAK4H,MAAMC,gBAAgBxH,IAC9BL,KAAK4H,MAAME,mBAAmBzH,GAE3BL,KAAK4H,MAAMG,qBAAqB1H,IACnCL,KAAK4H,MAAMI,wBAAwB3H,oCAI9B,IAAA4H,EAIHjI,KAAK4H,MAFPvH,EAFK4H,EAEL5H,OAAQwH,EAFHI,EAEGJ,gBAAiBK,EAFpBD,EAEoBC,iBAAkBC,EAFtCF,EAEsCE,aAC3CJ,EAHKE,EAGLF,qBAAsBK,EAHjBH,EAGiBG,sBAAuBC,EAHxCJ,EAGwCI,kBAG/C,OACE1E,EAAA3E,EAAA4E,cAAA,OAAKE,UAAU,aACZ9D,KAAK4H,MAAMzB,aACZxC,EAAA3E,EAAA4E,cAAC0E,EAAD,CACE1B,UAAWiB,EAAgBxH,GAC3B2F,UAAWkC,EACXjC,MAAOkC,IAETxE,EAAA3E,EAAA4E,cAAC2E,EAAD,CACE3B,UAAWmB,EAAqB1H,GAChC2F,UAAWoC,EACXnC,MAAOoC,YA5BOG,aCsDTC,eAvDK,SAAA7J,GAAiB,IAAd8J,EAAc9J,EAAd8J,QACrB,OACE/E,EAAA3E,EAAA4E,cAAA,OAAKE,UAAU,4BACbH,EAAA3E,EAAA4E,cAAA,qBACAD,EAAA3E,EAAA4E,cAAA,aACED,EAAA3E,EAAA4E,cAAA,aACED,EAAA3E,EAAA4E,cAAA,UACED,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,KAAK4B,MAAM,mBAAzB,QACA/B,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,KAAK4B,MAAM,iBAAzB,QACA/B,EAAA3E,EAAA4E,cAAA,oBACAD,EAAA3E,EAAA4E,cAAA,yBACAD,EAAA3E,EAAA4E,cAAA,kBACAD,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,MAAd,QACAH,EAAA3E,EAAA4E,cAAA,oBACAD,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,KAAK4B,MAAM,UAAzB,OACA/B,EAAA3E,EAAA4E,cAAA,yBACAD,EAAA3E,EAAA4E,cAAA,MAAI8B,MAAM,iBAAV,eAGJ/B,EAAA3E,EAAA4E,cAAA,aAEI8E,EAAQxE,IAAI,SAAAyE,GACV,OACEhF,EAAA3E,EAAA4E,cAAA,MAAIQ,IAAKuE,EAAIxB,OAAOC,SAAWuB,EAAItB,UACjC1D,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,MAAM6E,EAAItB,SAAxB,KACA1D,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,MACE,MAAb6E,EAAIC,KAAe,WAAcD,EAAIC,KAAO,KAE/CjF,EAAA3E,EAAA4E,cAAA,UAAK+E,EAAIxB,OAAOG,UAAhB,IAA4BqB,EAAIxB,OAAOI,YACvC5D,EAAA3E,EAAA4E,cAAA,UAAK+E,EAAIjB,YAAYxE,MACrBS,EAAA3E,EAAA4E,cAAA,UAAK+E,EAAIE,KAAOF,EAAIE,KAAK9D,KAAO,OAChCpB,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,MAAM6E,EAAIG,MACxBnF,EAAA3E,EAAA4E,cAAA,UAAK+E,EAAII,QACTpF,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,MAAM6E,EAAInB,QACxB7D,EAAA3E,EAAA4E,cAAA,MACEE,UAAW6E,EAAIK,YAAsC,MAAxBL,EAAIK,WAAWC,KAAe,UAAY,IAEtEN,EAAIK,WAAaL,EAAIK,WAAWH,KAAK9D,KAAM,OAE9CpB,EAAA3E,EAAA4E,cAAA,UACI+E,EAAIK,WAAJ,GAAAxI,OACKmI,EAAIK,WAAWE,aAAaC,MADjC,KAAA3I,OAC0CmI,EAAIK,WAAWE,aAAaE,OACpE,uBCPTC,EAhCS,SAAAzK,GAItB,IAFI,IADJ0K,EACI1K,EADJ0K,gBAAiBC,EACb3K,EADa2K,SAAU/D,EACvB5G,EADuB4G,SAAUgE,EACjC5K,EADiC4K,iBAAkBC,EACnD7K,EADmD6K,oBAEnDC,EAAU,GACdC,EAAA,EAAAC,EAA2B/K,OAAOgL,QAAQ1G,GAA1CwG,EAAAC,EAAAhJ,OAAA+I,IAAgE,KAAAnI,EAAAoI,EAAAD,GAAA3I,EAAAnC,OAAAiL,EAAA,EAAAjL,CAAA2C,EAAA,GAApD4C,EAAoDpD,EAAA,GAA/C+C,EAA+C/C,EAAA,GAC9D0I,EAAQK,KAAKpG,EAAA3E,EAAA4E,cAAA,UAAQQ,IAAKA,EAAKL,MAAOK,GAAML,EAAQ,YAGtD,OACEJ,EAAA3E,EAAA4E,cAAClB,EAAD,KACG,SAAAmB,GAAK,OACJF,EAAA3E,EAAA4E,cAAA,WACED,EAAA3E,EAAA4E,cAAA,UACEE,UAAS,aAAAtD,OAAeqD,EAAf,OAAArD,OAA0BqD,GACnCa,QAAS4E,EAAgBC,EAAU/D,EAAUgE,IAE7C7F,EAAA3E,EAAA4E,cAACwC,EAAA,EAAD,CAAiBC,KAAM2D,MAJzB,qBAMArG,EAAA3E,EAAA4E,cAAA,UACEG,MAAOyF,EACPxF,SAAUyF,EACV3F,UAAW,KAAOD,EAClBI,aAAW,4BAEVyF,OC4DEO,EA/EK,SAAArL,GAGd,IAFJ4H,EAEI5H,EAFJ4H,KAAM0D,EAEFtL,EAFEsL,UAAWxB,EAEb9J,EAFa8J,QAASyB,EAEtBvL,EAFsBuL,iBAAkBC,EAExCxL,EAFwCwL,aAAchF,EAEtDxG,EAFsDwG,YAC1DiF,EACIzL,EADJyL,eAAgBf,EACZ1K,EADY0K,gBAAiBE,EAC7B5K,EAD6B4K,iBAAkBC,EAC/C7K,EAD+C6K,oBAE7CjE,EAAWX,EAAQ2B,EAAK1B,KAAM0B,EAAKzB,MACnC7D,EAAQqE,OAAOiB,EAAKtF,OAE1B,OACEyC,EAAA3E,EAAA4E,cAAClB,EAAD,KACG,SAAAmB,GAAK,OACJF,EAAA3E,EAAA4E,cAACiD,EAAA,SAAD,KACElD,EAAA3E,EAAA4E,cAAA,OAAKE,UAAU,iBACbH,EAAA3E,EAAA4E,cAAA,OAAKE,UAAU,uBACD,IAAV5C,GACAyC,EAAA3E,EAAA4E,cAAA,UACEE,UAAS,8BAAAtD,OAAgCqD,EAAhC,OAAArD,OAA2CqD,GACpDa,QAASU,EAAYlE,EAAQ,IAE7ByC,EAAA3E,EAAA4E,cAACwC,EAAA,EAAD,CAAiBC,KAAMiE,MAJzB,kBAOApJ,IAAUgJ,GACVvG,EAAA3E,EAAA4E,cAAA,UACEE,UAAS,0BAAAtD,OAA4BqD,EAA5B,OAAArD,OAAuCqD,GAChDa,QAASU,EAAYlE,EAAQ,IAF/B,aAIYyC,EAAA3E,EAAA4E,cAACwC,EAAA,EAAD,CAAiBC,KAAMkE,QAIvC5G,EAAA3E,EAAA4E,cAAC4G,EAAD,CACElB,gBAAiBA,EACjBC,SAAU/C,EAAK+C,SACf/D,SAAUA,EACVgE,iBAAkBA,EAClBC,oBAAqBA,IAEvB9F,EAAA3E,EAAA4E,cAAA,0BACAD,EAAA3E,EAAA4E,cAAA,kBAASD,EAAA3E,EAAA4E,cAAA,KAAG6G,KAAMjE,EAAKrH,IAAK2E,UAAU,aACtC4G,OAAO,SAASC,IAAI,uBACjBnE,EAAK+C,SAFC,IAES5F,EAAA3E,EAAA4E,cAACwC,EAAA,EAAD,CAAiBC,KAAMuE,QAEzCjH,EAAA3E,EAAA4E,cAAA,oBAAY4C,EAAKnG,QACjBsD,EAAA3E,EAAA4E,cAAA,mBAAW1C,GACXyC,EAAA3E,EAAA4E,cAAA,sBACa4C,EAAKE,QAAQC,SAAS1B,QADnC,KAC8CuB,EAAKE,QAAQC,SAASzB,UAEpEvB,EAAA3E,EAAA4E,cAAA,qBAAYD,EAAA3E,EAAA4E,cAAA,KAAG6G,KAAMjE,EAAKE,QAAQvH,IAAK2E,UAAU,aACjD4G,OAAO,SAASC,IAAI,uBACjBnE,EAAKE,QAAQmE,YAFJ,IAEiBlH,EAAA3E,EAAA4E,cAACwC,EAAA,EAAD,CAAiBC,KAAMuE,QAEpDjH,EAAA3E,EAAA4E,cAAA,2BACkB4B,EAASI,qBAD3B,IACkDY,EAAKzB,MAAQS,EAASK,uBAEtE6C,GACA/E,EAAA3E,EAAA4E,cAAA,UACEc,QAAS2F,EAAe7D,EAAKnG,OAAQa,GACrC4C,UAAS,aAAAtD,OAAeqD,EAAf,OAAArD,OAA0BqD,GACnCiH,SAAUX,GAETA,EAEGxG,EAAA3E,EAAA4E,cAACiD,EAAA,SAAD,KACElD,EAAA3E,EAAA4E,cAACwC,EAAA,EAAD,CAAiBC,KAAM0E,IAAWC,MAAM,IAD1C,IACoD,cAGpDrH,EAAA3E,EAAA4E,cAACiD,EAAA,SAAD,sBAINuD,GAAgBzG,EAAA3E,EAAA4E,cAAA,SAAIwG,EAAa7D,UAEnCmC,GAAW/E,EAAA3E,EAAA4E,cAACqH,EAAD,CAAavC,QAASA,QCnB9BwC,EA5DO,SAAAtM,GAA2C,IAAxCuM,EAAwCvM,EAAxCuM,cAAeC,EAAyBxM,EAAzBwM,mBAChCC,EAAsBF,EAAcG,QAAQC,KAAK,SAACvM,EAAGwM,GACzD,OAAOxM,EAAEyM,iBAAmBD,EAAEC,mBAGhC,OACE9H,EAAA3E,EAAA4E,cAAA,OAAKE,UAAU,aACbH,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,aAAd,uBAE2B,IAAzBqH,EAAcvK,OACZ+C,EAAA3E,EAAA4E,cAAA,KAAGE,UAAU,OAAb,0BAEAH,EAAA3E,EAAA4E,cAAA,OAAKE,UAAU,oBACbH,EAAA3E,EAAA4E,cAAA,aACED,EAAA3E,EAAA4E,cAAA,aACED,EAAA3E,EAAA4E,cAAA,UACED,EAAA3E,EAAA4E,cAAA,WACAD,EAAA3E,EAAA4E,cAAA,mBACAD,EAAA3E,EAAA4E,cAAA,sBACAD,EAAA3E,EAAA4E,cAAA,uBACAD,EAAA3E,EAAA4E,cAAA,iCAGJD,EAAA3E,EAAA4E,cAAA,aAEIyH,EAAoBnH,IAAI,SAAAwH,GAAgB,IAEpCzI,EACEyI,EADFzI,GAAIyC,EACFgG,EADEhG,MAAOiG,EACTD,EADSC,SAAUC,EACnBF,EADmBE,SAAUH,EAC7BC,EAD6BD,iBAEjC,OACE9H,EAAA3E,EAAA4E,cAAA,MAAIQ,IAAKnB,GACPU,EAAA3E,EAAA4E,cAAA,UACED,EAAA3E,EAAA4E,cAAA,UACEc,QAAS,kBAAM0G,EAAmBnI,IAClCa,UAAU,8BACV4B,MAAM,uBAEN/B,EAAA3E,EAAA4E,cAACwC,EAAA,EAAD,CAAiBC,KAAMwF,QAG3BlI,EAAA3E,EAAA4E,cAAA,UAAK8B,GACL/B,EAAA3E,EAAA4E,cAAA,UAAK+H,EAAW,MAAO,MACvBhI,EAAA3E,EAAA4E,cAAA,UACGgI,EAAShG,qBADZ,IACmCgG,EAAS/F,sBAE5ClC,EAAA3E,EAAA4E,cAAA,UACG6H,EAAiB7F,qBADpB,IAC2C6F,EAAiB5F,8BClCvEiG,SAAY,SAAC/F,EAAO1F,GAC/B,IACE,IAAM0L,EAAkBC,KAAKC,UAAUlG,GACvCmG,aAAaC,QAAQ,YAAc9L,EAAQ0L,GAC3C,MAAO9F,GACP,OAAOA,KAIEmG,EAAY,SAAC/L,GACxB,IACE,IAAM0L,EAAkBG,aAAaG,QAAQ,YAAchM,GAC3D,GAAwB,OAApB0L,EAA0B,OAC9B,OAAOC,KAAKM,MAAMP,GAClB,MAAO9F,GACP,SAISsG,EAAoB,SAACpB,GAChC,IACE,IAAMqB,EAA0BR,KAAKC,UAAUd,GAC/Ce,aAAaC,QAAQ,gBAAiBK,GACtC,MAAOvG,GACP,OAAOA,IAoBEwG,EAAY,SAAC5I,GACxB,IACEqI,aAAaC,QAAQ,QAAStI,GAC9B,MAAOoC,GACP,SCHWyG,cAtDb,SAAAA,IAAc,IAAAC,EAAA,OAAA9N,OAAA+N,EAAA,EAAA/N,CAAAmB,KAAA0M,IACZC,EAAA9N,OAAAgO,EAAA,EAAAhO,CAAAmB,KAAAnB,OAAAiO,EAAA,EAAAjO,CAAA6N,GAAAK,KAAA/M,QAWFgN,eAAiB,SAACC,GAAD,OAAc,WAC7B,IAAMC,EAAYP,EAAKQ,MAAMD,UAAUE,OAAO,SAAAC,GAAC,OAAIA,IAAMJ,IACzDN,EAAKW,SAAS,CAAEJ,cAChBhB,aAAaqB,WAAWN,KAbxBN,EAAKQ,MAAQ,CACXD,UAAW,IAHDP,mFAQZ,IAAMO,EDbkB,WAC1B,IAEE,IADA,IAAIA,EAAY,GACPlG,EAAI,EAAGC,EAAIiF,aAAatL,OAAQoG,EAAIC,EAAGD,IAC1C,mBAAmBwG,KAAKtB,aAAa9H,IAAI4C,KAC3CkG,EAAUnD,KAAKmC,aAAa9H,IAAI4C,IAGpC,OAAOkG,EACP,MAAOjH,GACP,MAAO,ICGWwH,GAClBzN,KAAKsN,SAAS,CAAEJ,+CAST,IAAAQ,EAAA1N,KACD2N,EAAkB3N,KAAKmN,MAAMD,UAAU5B,QAAQC,KAAK,SAACvM,EAAGwM,GAC5D,OAAOxM,EAAEsM,OAAO,GAAKE,EAAEF,OAAO,KAGhC,OACE3H,EAAA3E,EAAA4E,cAAA,OAAKE,UAAU,aACbH,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,aAAd,mBAEkC,IAAhC9D,KAAKmN,MAAMD,UAAUtM,OACnB+C,EAAA3E,EAAA4E,cAAA,KAAGE,UAAU,OAAb,sBAEAH,EAAA3E,EAAA4E,cAAA,MAAIE,UAAU,aAEV6J,EAAgBzJ,IAAI,SAAA+I,GAClB,OACEtJ,EAAA3E,EAAA4E,cAAA,MAAIQ,IAAK6I,GACPtJ,EAAA3E,EAAA4E,cAAA,UACEE,UAAU,wCACV4B,MAAM,kBACNhB,QAASgJ,EAAKV,eAAeC,IAE7BtJ,EAAA3E,EAAA4E,cAACwC,EAAA,EAAD,CAAiBC,KAAMwF,OAEzBlI,EAAA3E,EAAA4E,cAAA,YAAOqJ,EAAS3B,OAAO,gBA3CrB9C,aC2CToF,SA1CM,SAAAhP,GAEnB,IAFmE,IAA7CyB,EAA6CzB,EAA7CyB,OAAQwN,EAAqCjP,EAArCiP,eAAgBC,EAAqBlP,EAArBkP,eAC1CC,EAAgB,GACX/G,EAAIpE,EAAcoE,GAAKnE,EAAgBmE,IAC9C+G,EAAchE,KAAKpG,EAAA3E,EAAA4E,cAAA,UAAQQ,IAAK4C,EAAGjD,MAAOiD,GAAvB,UAAkCA,IAGvD,OACErD,EAAA3E,EAAA4E,cAAClB,EAAD,KACG,SAAAmB,GAAK,OACJF,EAAA3E,EAAA4E,cAAA,OAAKE,UAAU,oBACXzD,IAAWuC,GACXe,EAAA3E,EAAA4E,cAAA,UACEc,QAASoJ,GAAgB,GACzBpI,MAAM,kBACN5B,UAAS,aAAAtD,OAAeqD,EAAf,OAAArD,OAA0BqD,IAEnCF,EAAA3E,EAAA4E,cAACwC,EAAA,EAAD,CAAiBC,KAAMiE,OAG3B3G,EAAA3E,EAAA4E,cAAA,UACEG,MAAO1D,EACP2D,SAAU6J,EACV/J,UAAW,KAAOD,EAClBI,aAAW,iBAEV8J,GAED1N,IAAWwC,GACXc,EAAA3E,EAAA4E,cAAA,UACEc,QAASoJ,EAAe,GACxBpI,MAAM,cACN5B,UAAS,aAAAtD,OAAeqD,EAAf,OAAArD,OAA0BqD,IAEnCF,EAAA3E,EAAA4E,cAACwC,EAAA,EAAD,CAAiBC,KAAMkE,YCxBtByD,EAdA,WACb,OACErK,EAAA3E,EAAA4E,cAAA,cACED,EAAA3E,EAAA4E,cAAA,OAAKE,UAAU,OAAf,iBACgBH,EAAA3E,EAAA4E,cAAA,KAAG6G,KAAK,2BAA2B/E,MAAM,WAAzC,WADhB,SAEmB/B,EAAA3E,EAAA4E,cAAA,KAAG6G,KAAK,4BAA4B/E,MAAM,YAA1C,oBAFnB,mBAGsC/B,EAAA3E,EAAA4E,cAAA,KAAG6G,KAAK,8CAC5C/E,MAAM,0BAA0BgF,OAAO,SACvCC,IAAI,uBAFgC,wBC4b7BsD,sBA1ab,SAAAA,IAAc,IAAAtB,EAAA,OAAA9N,OAAA+N,EAAA,EAAA/N,CAAAmB,KAAAiO,IACZtB,EAAA9N,OAAAgO,EAAA,EAAAhO,CAAAmB,KAAAnB,OAAAiO,EAAA,EAAAjO,CAAAoP,GAAAlB,KAAA/M,QAyCF0D,SAAW,SAACwK,GACVvB,EAAKW,SAAS,CAAEzJ,MAAOqK,EAAExD,OAAO3G,QAChC0I,EAAUyB,EAAExD,OAAO3G,QA5CP4I,EA+CdwB,mBAAqB,WAAM,IACjBhD,EAAkBwB,EAAKQ,MAAvBhC,cACFiD,EAAUC,KAAKC,OAAM,IAAIxL,MAAOyL,UAAY,IAAO,IAEzDpD,EAAcqD,QAAQ,SAAA9C,GAAgB,IAC5BD,EAA4CC,EAA5CD,iBAAkBG,EAA0BF,EAA1BE,SAAUlG,EAAgBgG,EAAhBhG,MAAO+I,EAAS/C,EAAT+C,KACrCC,EAAmBL,KAAKC,MAAM7C,EAAiB8C,UAAY,IAAO,IAElEI,EAAmB,SAACjJ,EAAO+I,GAC/B,IAAIG,aAAalJ,EAAO,CAAE+I,KAAMA,IAChC/C,EAAaC,UAAW,EACxBgB,EAAKvB,mBAAmBM,EAAazI,KAGnCyL,IAAqBN,GAAY1C,EAAaC,SAEvC+C,EAAmBN,IAAY1C,EAAaC,SACrDgD,EACE,wBAA0BjJ,EADZ,sBAAAlF,OAEQiL,EAAiB7F,qBAFzB,KAAApF,OAEiDiL,EAAiB5F,qBAFlE,iBAAArF,OAGXoL,EAAShG,qBAHE,KAAApF,OAGsBoL,EAAS/F,uBAEtC6F,EAAaC,UACtBgB,EAAKvB,mBAAmBM,EAAazI,IARrC0L,EAAiBjJ,EAAO+I,MA9DhB9B,EA2EdkC,SAAW,SAACxO,GACV,IAAM0F,EAAQqG,EAAU/L,GACxB,GAAI0F,EAAO,CACT,IAAM+I,EAAQjQ,OAAAkQ,EAAA,EAAAlQ,CAAA,GAAMwB,EAAS0F,GAC7B4G,EAAKW,SAAS,SAAA0B,GACZ,MAAO,CAAEjJ,MAAMlH,OAAAoQ,EAAA,EAAApQ,CAAA,GAAMmQ,EAAUjJ,MAAU+I,UAEtC,CACL,IAAKI,UAAUC,OAEb,YADAC,KAAMnJ,MAAM,sBAId0G,EAAKW,SAAS,CAAEtH,WAAW,IAC3B9F,EAAWG,GACRgP,KAAK,SAAAtJ,GACJ,IAAM+I,EAAQjQ,OAAAkQ,EAAA,EAAAlQ,CAAA,GAAMwB,EAAS0F,GAC7B4G,EAAKW,SAAS,SAAA0B,GACZ,MAAO,CACLjJ,MAAMlH,OAAAoQ,EAAA,EAAApQ,CAAA,GAAMmQ,EAAUjJ,MAAU+I,GAChC9I,WAAW,KAIX3F,IAAWwC,GACbiJ,EAAU/F,EAAO1F,KAGpBiP,MAAM,SAAArJ,GAAK,OAAI0G,EAAKW,SAAS,CAAErH,QAAOD,WAAW,QAvG1C2G,EA2GdtC,eAAiB,SAAChK,EAAQa,GAAT,OAAmB,WAC7BgO,UAAUC,QAKfxC,EAAKW,SAAS,CAAEnD,kBAAkB,IAClCpJ,EAAiBV,EAAQa,GACtBmO,KAAK,SAAA3G,GACJ,IAAI6G,EAAU1Q,OAAAkQ,EAAA,EAAAlQ,CAAA,GACXwB,EADWxB,OAAAkQ,EAAA,EAAAlQ,CAAA,GAETqC,EAAQwH,IAIbiE,EAAKW,SAAS,SAAA0B,GACZ,MAAO,CACLtG,QAAS8G,EAAUR,EAAUtG,QAAS6G,GACtCpF,kBAAkB,EAClBC,aAAc,UAInBkF,MAAM,SAAArJ,GACL0G,EAAKW,SAAS,CAAElD,aAAcnE,EAAOkE,kBAAkB,OAtBzDiF,KAAMnJ,MAAM,wBA7GF0G,EAuId7E,mBAAqB,SAACzH,GACf6O,UAAUC,QAKfxC,EAAKW,SAAS,CAAEpF,kBAAkB,IAClC3G,EAAqBlB,GAClBgP,KAAK,SAAAzI,GACJ+F,EAAKW,SAAS,SAAA0B,GACZ,IAAMS,EAAY5Q,OAAAkQ,EAAA,EAAAlQ,CAAA,GAAMwB,EAASuG,GACjC,MAAO,CACLiB,gBAAgBhJ,OAAAoQ,EAAA,EAAApQ,CAAA,GAAMmQ,EAAUnH,gBAAoB4H,GACpDvH,kBAAkB,OAIvBoH,MAAM,SAAArJ,GACL0G,EAAKW,SAAS,CAAEpF,kBAAkB,EAAOC,aAAclC,OAhBzDmJ,KAAMnJ,MAAM,uBAzIF0G,EA6Jd3E,wBAA0B,SAAC3H,GACpB6O,UAAUC,SAIfxC,EAAKW,SAAS,CAAElF,uBAAuB,IACvCrG,EAA0B1B,GACvBgP,KAAK,SAAAzI,GACJ+F,EAAKW,SAAS,SAAA0B,GACZ,IAAMS,EAAY5Q,OAAAkQ,EAAA,EAAAlQ,CAAA,GAAMwB,EAASuG,GACjC,MAAO,CACLmB,qBAAqBlJ,OAAAoQ,EAAA,EAAApQ,CAAA,GAChBmQ,EAAUjH,qBAAyB0H,GAExCrH,uBAAuB,OAI5BkH,MAAM,SAAArJ,GACL0G,EAAKW,SAAS,CACZlF,uBAAuB,EACvBC,kBAAmBpC,QAlLb0G,EAuLdvH,YAAc,SAACsK,GAAD,OAAe,WAC3B/C,EAAKgD,WAAWD,KAxLJ/C,EA2LdtH,YAAc,SAACqK,GAAD,OAAe,SAACxB,GACd,UAAVA,EAAE9J,KACJuI,EAAKgD,WAAWD,KA7LN/C,EAiMdgD,WAAa,SAACD,GACZ/C,EAAKW,SAAS,CACZsC,kBAAmBrK,OAAOmK,GAC1BnL,MAAO,cACP6F,aAAc,QArMJuC,EAyMdkB,eAAiB,SAACK,GAChBvB,EAAKkD,UAAUtK,OAAO2I,EAAExD,OAAO3G,SA1MnB4I,EA6MdmB,eAAiB,SAACgC,GAAD,OAAY,WAC3B,IAAMC,EAAYxK,OAAOoH,EAAKQ,MAAM9M,QAAUyP,EAC1CC,GAAanN,GAAgBmN,GAAalN,GAC5C8J,EAAKkD,UAAUE,KAhNLpD,EAoNdkD,UAAY,SAACxP,GAAW,IAAA2P,EACoBrD,EAAKQ,MAAvC5I,EADcyL,EACdzL,MAAOwB,EADOiK,EACPjK,MAAO8B,EADAmI,EACAnI,gBACtB8E,EAAKW,SAAS,CACZjN,SACA4F,MAAO,OAEJF,EAAM1F,IAAqB,aAAVkE,GACpBoI,EAAKkC,SAASxO,GAEXwH,EAAgBxH,IAAqB,cAAVkE,IAC9BoI,EAAK7E,mBAAmBzH,GACxBsM,EAAK3E,wBAAwB3H,KA/NnBsM,EAmOdzG,YAAc,WACE4F,EAAUa,EAAKQ,MAAMpH,MAAM4G,EAAKQ,MAAM9M,QAASsM,EAAKQ,MAAM9M,QAEtE+O,KAAMnJ,MAAM,qCAEZmJ,KAAMa,QAAQ,sCAxOJtD,EA4OdrD,gBAAkB,SAACC,EAAUqC,EAAUpC,GAArB,OAA0C,WAC1D,GAAM,iBAAkB0G,OAKxB,GAAItE,EAAW,IAAI9I,KACjBsM,KAAMnJ,MAAM,4CADd,CAKA,IAAIwF,EAAmB,IAAI3I,KAAK8I,GAChCH,EAAiB0E,WAAW1E,EAAiB2E,cAAgB7K,OAAOiE,GAAoBA,EAAmB,KAG3G,IADA,IAAMvG,EAAKwI,EAAiB8C,UACnBvH,EAAI,EAAGC,EAAI0F,EAAKQ,MAAMhC,cAAcvK,OAAQoG,EAAIC,EAAGD,IAC1D,GAAI2F,EAAKQ,MAAMhC,cAAcnE,GAAG/D,KAAOA,EAErC,YADAmM,KAAMnJ,MAAM,+BAKhB,IAAMoK,EAAqB,WACzB,IAAI5B,EAAO,kBACXA,GAAQtL,EAAoBqG,GAAoBrG,EAAoBqG,GAAoBrG,EAAoB,IAE5G,IAAMuI,EAAe,CACnBzI,KACA2I,WACAH,mBACAE,UAAU,EACVjG,MAAO6D,EACPkF,QAGYlC,EAAkBI,EAAKQ,MAAMhC,cAAc3K,OAAOkL,IAE9D0D,KAAMnJ,MAAM,0CAEZmJ,KAAMa,QAAQ,yCACdtD,EAAKW,SAAS,SAAAH,GACZ,MAAO,CAAEhC,cAAegC,EAAMhC,cAAc3K,OAAOkL,KAClD,kBAAMiB,EAAKwB,yBAIc,YAA5BS,aAAa0B,WACfD,IACqC,WAA5BzB,aAAa0B,YACtB1B,aAAa2B,oBAAoBlB,KAAK,SAAAiB,GACjB,YAAfA,GACFD,WAjDJjB,KAAMnJ,MAAM,oDA9OF0G,EAqSdvB,mBAAqB,SAACnI,GACpB,IAAMkI,EAAgBwB,EAAKQ,MAAMhC,cAAciC,OAAO,SAAA1B,GACpD,OAAOA,EAAazI,KAAOA,IAEfsJ,EAAkBpB,GAE9BiE,KAAMnJ,MAAM,4CAEZ0G,EAAKW,SAAS,CAAEnC,mBA7SNwB,EAiTdlD,oBAAsB,SAACyE,GACrBvB,EAAKW,SAAS,CAAE9D,iBAAkB0E,EAAExD,OAAO3G,SAlT/B4I,EAqTdrI,SAAW,SAACC,GAAD,OAAW,WACpBoI,EAAKW,SAAS,CAAE/I,UACF,aAAVA,GAAkC,cAAVA,GAC1BoI,EAAKW,SAAS,CAAEjN,OAAQwC,MAtT1B8J,EAAKQ,MAAQ,CACXpH,MAAO,GACPC,WAAW,EACXC,MAAO,KACP5F,OAAQwC,EACR+M,kBAAmB,EACnBlH,QAAS,GACTyB,kBAAkB,EAClBC,aAAc,KACde,cAAe,GACf3B,iBAAkB,KAClBjF,MAAO,WACPV,MAAO,GACPgE,gBAAiB,GACjBK,kBAAkB,EAClBC,aAAc,KACdJ,qBAAsB,GACtBK,uBAAuB,EACvBC,kBAAmB,MApBTsE,mFAwBM,IAAAe,EAAA1N,KAClBA,KAAK6O,SAAS7O,KAAKmN,MAAM9M,QACzB,IAAM8K,EJRuB,WAC/B,IACE,IAAMqB,EAA0BN,aAAaG,QAAQ,iBACrD,GAAgC,OAA5BG,EAAkC,OACtC,OAAOR,KAAKM,MAAME,EAAyB,SAACpI,EAAKL,GAC/C,MAAY,qBAARK,GAAsC,aAARA,EACzB,IAAItB,KAAKiB,GAETA,IAGX,MAAOkC,GACP,QIJsBuK,GAClBrF,GACFnL,KAAKsN,SACH,CAAEnC,iBACF,kBAAMuC,EAAKS,uBAGf,IAAMtK,EJSe,WACvB,IAEE,IADA,IAAMA,EAAQqI,aAAaG,QAAQ,SAC1BrF,EAAI,EAAGC,EAAIjE,EAAMpC,OAAQoG,EAAIC,EAAGD,IACvC,GAAIhE,EAAMgE,GAAG/D,KAAOY,EAClB,OAAOA,EAGX,MAAO,UACP,MAAOoC,GACP,MAAO,WInBOwK,GACdzQ,KAAKsN,SAAS,CAAEzJ,UAChB7D,KAAK0Q,SAAWC,YAAY3Q,KAAKmO,mBAAoB,oDAIrDyC,cAAc5Q,KAAK0Q,2CAqRZ,IAAAG,EAMH7Q,KAAKmN,MAJPpH,EAFK8K,EAEL9K,MAAOC,EAFF6K,EAEE7K,UAAWC,EAFb4K,EAEa5K,MAAO5F,EAFpBwQ,EAEoBxQ,OAAQ8K,EAF5B0F,EAE4B1F,cAAeyE,EAF3CiB,EAE2CjB,kBAAmBrL,EAF9DsM,EAE8DtM,MACnEmE,EAHKmI,EAGLnI,QAASyB,EAHJ0G,EAGI1G,iBAAkBC,EAHtByG,EAGsBzG,aAAcZ,EAHpCqH,EAGoCrH,iBAAkB3F,EAHtDgN,EAGsDhN,MAC3DgE,EAJKgJ,EAILhJ,gBAAiBK,EAJZ2I,EAIY3I,iBAAkBC,EAJ9B0I,EAI8B1I,aACnCJ,EALK8I,EAKL9I,qBAAsBK,EALjByI,EAKiBzI,sBAAuBC,EALxCwI,EAKwCxI,kBAEzCyI,EAAc/K,EAAM1F,GAEtB0Q,EAAe,KACnB,GAAInB,EAAoB,GAAK7J,EAAM1F,GAAS,CAC1C,IAAM2G,EAAIjB,EAAM1F,GAAQ2Q,UAAU,SAACxK,GACjC,OAAOjB,OAAOiB,EAAKtF,SAAW0O,IAEhCmB,EAAehL,EAAM1F,GAAQ2G,GAG/B,IAUIiK,EAVA9L,EAAe,GACnB,GAAI2L,GAAezQ,IAAWwC,EAC5B,IAAK,IAAImE,EAAI,EAAGC,EAAI6J,EAAYlQ,OAAQsQ,EAAI,IAAIpO,KAAQkE,EAAIC,EAAGD,IAC7D,GAAIkK,EAAI,IAAIpO,KAAKgO,EAAY9J,GAAGlC,KAAO,IAAMgM,EAAY9J,GAAGjC,MAAO,CACjEI,EAAe2L,EAAY9J,GAAG9F,MAC9B,MAMF6P,GAAgBrI,EAAQqI,EAAa1Q,UACvC4Q,EAAcvI,EAAQqI,EAAa1Q,QAAQ0Q,EAAa7P,QAG1D,IAAMiF,EACJxC,EAAA3E,EAAA4E,cAACuN,EAAD,CACE9Q,OAAQA,EACRwN,eAAgB7N,KAAK6N,eACrBC,eAAgB9N,KAAK8N,iBAIzB,OACEnK,EAAA3E,EAAA4E,cAACpB,EAAD,CAAeuB,MAAOF,GACpBF,EAAA3E,EAAA4E,cAACiD,EAAA,SAAD,KACElD,EAAA3E,EAAA4E,cAACwN,EAAD,CAAQ1N,SAAU1D,KAAK0D,WACvBC,EAAA3E,EAAA4E,cAACyN,EAAD,CAAY/M,SAAUtE,KAAKsE,SAAUC,MAAOA,IAC5CZ,EAAA3E,EAAA4E,cAAC0N,GAAA,EAAD,CACEjK,SAAS,gBACTkK,UAAW,IACXC,iBAAe,EACfC,aAAa,EACbC,cAAc,EACdC,KAAK,EACLC,yBAAuB,EACvBC,WAAW,EACXC,cAAY,IAEF,kBAAVvN,GACAZ,EAAA3E,EAAA4E,cAACmO,EAAD,CACE5G,cAAeA,EACfC,mBAAoBpL,KAAKoL,qBAGjB,cAAV7G,GAAyBZ,EAAA3E,EAAA4E,cAACoO,EAAD,MACf,gBAAVzN,GACAZ,EAAA3E,EAAA4E,cAACqO,EAAD,CACEzL,KAAMuK,EACN7G,UAAW4G,EAAYlQ,OACvB8H,QAASuI,EACT9G,iBAAkBA,EAClBC,aAAcA,EACdhF,YAAapF,KAAKoF,YAClBiF,eAAgBrK,KAAKqK,eACrBf,gBAAiBtJ,KAAKsJ,gBACtBE,iBAAkBA,EAClBC,oBAAqBzJ,KAAKyJ,sBAGlB,aAAVlF,GACAZ,EAAA3E,EAAA4E,cAACsO,EAAD,CACEnM,MAAO+K,EACP3L,aAAcA,EACda,UAAWA,EACXC,MAAOA,EACPb,YAAapF,KAAKoF,YAClBC,YAAarF,KAAKqF,YAClBa,YAAalG,KAAKkG,YAClBC,aAAcA,IAGN,cAAV5B,GACAZ,EAAA3E,EAAA4E,cAACuO,EAAD,CACE9R,OAAQA,EACRwH,gBAAiBA,EACjBK,iBAAkBA,EAClBC,aAAcA,EACdL,mBAAoB9H,KAAK8H,mBACzBC,qBAAsBA,EACtBK,sBAAuBA,EACvBC,kBAAmBA,EACnBL,wBAAyBhI,KAAKgI,wBAC9B7B,aAAcA,IAGlBxC,EAAA3E,EAAA4E,cAACwO,EAAD,eApaQ5J,cCbZ6J,GAAcC,QACW,cAA7BpC,OAAOqC,SAASC,UAEe,UAA7BtC,OAAOqC,SAASC,UAEhBtC,OAAOqC,SAASC,SAASC,MACvB,2DAsCN,SAASC,GAAgBC,EAAOC,GAC9B1D,UAAU2D,cACPC,SAASH,GACTtD,KAAK,SAAA0D,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9F,QACf+B,UAAU2D,cAAcO,YAI1BC,QAAQC,IACN,gHAKEV,GAAUA,EAAOW,UACnBX,EAAOW,SAASR,KAMlBM,QAAQC,IAAI,sCAGRV,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUT,SAO5BzD,MAAM,SAAArJ,GACLoN,QAAQpN,MAAM,4CAA6CA,KCvFjEwN,IAASC,OAAO/P,EAAA3E,EAAA4E,cAAC+P,GAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBjB,GACvB,GAA6C,kBAAmB1D,UAAW,CAGzE,GADkB,IAAI4E,IAAIC,WAAwB7D,OAAOqC,UAC3CyB,SAAW9D,OAAOqC,SAASyB,OAIvC,OAGF9D,OAAO+D,iBAAiB,OAAQ,WAC9B,IAAMtB,EAAK,GAAAnS,OAAMuT,WAAN,sBAEP1B,IA6DV,SAAiCM,EAAOC,GAEtCnT,MAAMkT,GACHtD,KAAK,SAAAjQ,GAGkB,MAApBA,EAAS2J,SACuD,IAAhE3J,EAAS8U,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7ClF,UAAU2D,cAAcwB,MAAMhF,KAAK,SAAA0D,GACjCA,EAAauB,aAAajF,KAAK,WAC7Ba,OAAOqC,SAASgC,aAKpB7B,GAAgBC,EAAOC,KAG1BtD,MAAM,WACL+D,QAAQC,IACN,mEAjFAkB,CAAwB7B,EAAOC,GAI/B1D,UAAU2D,cAAcwB,MAAMhF,KAAK,WACjCgE,QAAQC,IACN,+GAMJZ,GAAgBC,EAAOC,MC3C/BC","file":"static/js/main.65bc8d94.chunk.js","sourcesContent":["const urlBase = 'https://ergast.com/api/f1';\r\n\r\nconst fetchData = async (url) => {\r\n  const response = await fetch(url);\r\n  return await response.json();\r\n}\r\n\r\nexport const fetchRaces = async (season) => {\r\n  const data = await fetchData(`${urlBase}/${season}.json`);\r\n  if (data.MRData.RaceTable.Races.length === 0) {\r\n    throw new Error('No data available');\r\n  }\r\n  return data.MRData.RaceTable.Races;\r\n}\r\n\r\nexport const fetchRaceResults = async (season, round) => {\r\n  const data = await fetchData(`${urlBase}/${season}/${round}/results.json`);\r\n  if (data.MRData.RaceTable.Races.length === 0) {\r\n    throw new Error('No data available');\r\n  }\r\n  return data.MRData.RaceTable.Races[0].Results;\r\n}\r\n\r\nexport const fetchDriverStandings = async (season) => {\r\n  const data = await fetchData(`${urlBase}/${season}/driverStandings.json`);\r\n  if (data.MRData.StandingsTable.StandingsLists.length === 0) {\r\n    throw new Error('No data available');\r\n  }\r\n  return data.MRData.StandingsTable.StandingsLists[0].DriverStandings;\r\n}\r\n\r\nexport const fetchConstructorStandings = async (season) => {\r\n  const data = await fetchData(`${urlBase}/${season}/constructorStandings.json`);\r\n  if (data.MRData.StandingsTable.StandingsLists.length === 0) {\r\n    throw new Error('No data available');\r\n  }\r\n  return data.MRData.StandingsTable.StandingsLists[0].ConstructorStandings;\r\n}\r\n","import React from 'react';\r\n\r\nconst ThemeContext = React.createContext('');\r\nexport const ThemeProvider = ThemeContext.Provider;\r\nexport const ThemeConsumer = ThemeContext.Consumer;\r\n","export const FIRST_SEASON = 1950;\r\nexport const CURRENT_SEASON = new Date().getFullYear();\r\n\r\nexport const teams = [\r\n  { id: 'ferrari', name: 'Ferrari' },\r\n  { id: 'mercedes', name: 'Mercedes' },\r\n  { id: 'redbull', name: 'Red Bull Racing' },\r\n  { id: 'renault', name: 'Renault' },\r\n  { id: 'haas', name: 'Haas' },\r\n  { id: 'racingpoint', name: 'Racing Point' },\r\n  { id: 'tororosso', name: 'Toro Rosso' },\r\n  { id: 'mclaren', name: 'McLaren' },\r\n  { id: 'alfaromeo', name: 'Alfa Romeo Racing' },\r\n  { id: 'williams', name: 'Williams' }\r\n];\r\n\r\nexport const notificationOptions = {\r\n  '10': '10 Minutes',\r\n  '30': '30 Minutes',\r\n  '60': '1 Hour',\r\n  '120': '2 Hours',\r\n  '1440': '1 Day'\r\n}\r\n","import React from 'react';\r\nimport './Header.css';\r\nimport { ThemeConsumer } from '../ThemeContext';\r\nimport { teams } from '../constants';\r\n\r\nconst Header = ({ setTheme }) => {\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <header className={'bg-' + theme}>\r\n          <div className='flex'>\r\n            <h1 className={'dib p10 ' + theme}>F1 Races</h1>\r\n            <div className='select-wrapper'>\r\n              <select\r\n                value={theme}\r\n                onChange={setTheme}\r\n                className={'b-' + theme}\r\n                aria-label='Select theme'\r\n              >\r\n                {\r\n                  teams.map(team => {\r\n                    return (\r\n                      <option\r\n                        key={team.id}\r\n                        value={team.id}\r\n                        className={'bg-' + team.id}\r\n                      >\r\n                        {team.name}\r\n                      </option>\r\n                    );\r\n                  })\r\n                }\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </header>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { ThemeConsumer } from '../../ThemeContext';\r\n\r\nconst NavItem = ({ setRoute, route, active, children }) => {\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <button\r\n          onClick={setRoute(route)}\r\n          className={`${active ? ('active bg-' + theme) : ''} h-${theme}`}\r\n        >\r\n          {children}\r\n        </button>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default NavItem;\r\n","import React from 'react';\r\nimport './Navigation.css';\r\nimport NavItem from './NavItem';\r\n\r\nconst Navigation = ({ setRoute, route }) => {\r\n  return (\r\n    <nav>\r\n      <NavItem\r\n        setRoute={setRoute}\r\n        route='RaceList'\r\n        active={route ==='RaceList'}\r\n      >\r\n        Calendar\r\n      </NavItem>\r\n      <NavItem\r\n        setRoute={setRoute}\r\n        route='Standings'\r\n        active={route === 'Standings'}\r\n      >\r\n        Standings\r\n      </NavItem>\r\n      <NavItem\r\n        setRoute={setRoute}\r\n        route='Notifications'\r\n        active={route === 'Notifications'}\r\n      >\r\n        Saved Notifications\r\n      </NavItem>\r\n      <NavItem\r\n        setRoute={setRoute}\r\n        route='Calendars'\r\n        active={route === 'Calendars'}\r\n      >\r\n        Saved Calendars\r\n      </NavItem>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","export const getDate = (date, time) => {\r\n  return time ? new Date(date + 'T' + time) : new Date(date);\r\n}\r\n","import React from 'react';\r\nimport './Race.css';\r\nimport { getDate } from '../../helpers';\r\n\r\nconst Race = ({\r\n  round, country, locality, date, time, upcomingRace,\r\n  onClickRace, onEnterRace\r\n}) => {\r\n  let raceClasses = 'race unselectable';\r\n  raceClasses += Number(round) % 2 === 1 ? ' striped' : '';\r\n  raceClasses += upcomingRace ? ' upcoming' : '';\r\n  const dateTime = getDate(date, time);\r\n\r\n  return (\r\n    <div\r\n      className={raceClasses}\r\n      onClick={onClickRace(round)}\r\n      onKeyPress={onEnterRace(round)}\r\n      title='Show details'\r\n      tabIndex='0'\r\n    >\r\n      <span className='round'>{round}.</span>\r\n      <span className='location'>{country}, {locality}</span>\r\n      <span className='date-time'>\r\n        <span className='date'>{dateTime.toLocaleDateString()}</span>\r\n        <span className='time'>\r\n          {time && dateTime.toLocaleTimeString()}\r\n        </span>\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Race;\r\n","import React from 'react';\r\nimport Race from './Race';\r\nimport { ThemeConsumer } from '../../ThemeContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\r\nconst RaceList = ({\r\n  races, upcomingRace, isLoading, error, onClickRace, onEnterRace, onSaveRaces,\r\n  seasonSelect\r\n}) => {\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <div className='container'>\r\n          {seasonSelect}\r\n          { !error && !isLoading &&\r\n            <button\r\n              onClick={onSaveRaces}\r\n              className={`button ml10 mb10 bg-${theme} b-${theme}`}\r\n            >\r\n              <FontAwesomeIcon icon={faSave} /> Save calendar\r\n            </button>\r\n          }\r\n          { isLoading && <p className='p10'>Loading...</p> }\r\n          { error && <p className='p10'>{error.message}</p> }\r\n          { races &&\r\n            races.map(race => {\r\n              return (\r\n                <Race\r\n                  key={race.round}\r\n                  round={race.round}\r\n                  country={race.Circuit.Location.country}\r\n                  locality={race.Circuit.Location.locality}\r\n                  date={race.date}\r\n                  time={race.time}\r\n                  upcomingRace={Number(race.round) === Number(upcomingRace)}\r\n                  onClickRace={onClickRace}\r\n                  onEnterRace={onEnterRace}\r\n                />\r\n              );\r\n            })\r\n          }\r\n        </div>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default RaceList;\r\n","import React, { Fragment } from 'react';\r\n\r\nconst DriverStandings = ({ standings, isLoading, error }) => {\r\n  return (\r\n    <Fragment>\r\n      <h2 className='p10'>Driver Standings</h2>\r\n      { isLoading && <p className='p10'>Loading...</p> }\r\n      { error && <p className='p10'>{error.message}</p> }\r\n      { standings &&\r\n        <div className='responsive-table'>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th className='tr' title='Position'>Pos.</th>\r\n                <th>Driver</th>\r\n                <th>Constructor</th>\r\n                <th className='tr'>Points</th>\r\n                <th className='tr'>Wins</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                standings.map(s => {\r\n                  let constructors = '';\r\n                  for (let i = 0, l = s.Constructors.length; i < l; i++) {\r\n                    constructors += s.Constructors[i].name;\r\n                    if (i + 1 !== l) {\r\n                      constructors += ', ';\r\n                    }\r\n                  }\r\n                  return (\r\n                    <tr key={s.Driver.driverId}>\r\n                      <td className='tr'>{s.position}.</td>\r\n                      <td>{s.Driver.givenName} {s.Driver.familyName}</td>\r\n                      <td>{constructors}</td>\r\n                      <td className='tr'>{s.points}</td>\r\n                      <td className='tr'>{s.wins}</td>\r\n                    </tr>\r\n                  );\r\n                })\r\n              }\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      }\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default DriverStandings;\r\n","import React, { Fragment } from 'react';\r\n\r\nconst ConstructorStandings = ({ standings, isLoading, error }) => {\r\n  return (\r\n    <Fragment>\r\n      <h2 className='p10'>Constructor Standings</h2>\r\n      { isLoading && <p className='p10'>Loading...</p> }\r\n      { error && <p className='p10'>{error.message}</p> }\r\n      { standings &&\r\n        <div className='responsive-table'>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th className='tr' title='Position'>Pos.</th>\r\n                <th>Constructor</th>\r\n                <th className='tr'>Points</th>\r\n                <th className='tr'>Wins</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                standings.map(s => {\r\n                  return (\r\n                    <tr key={s.Constructor.name}>\r\n                      <td className='tr'>{s.position}.</td>\r\n                      <td>{s.Constructor.name}</td>\r\n                      <td className='tr'>{s.points}</td>\r\n                      <td className='tr'>{s.wins}</td>\r\n                    </tr>\r\n                  );\r\n                })\r\n              }\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      }\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default ConstructorStandings;\r\n","import React, { Component } from 'react';\r\nimport DriverStandings from './DriverStandings';\r\nimport ConstructorStandings from './ConstructorStandings';\r\n\r\nclass Standings extends Component {\r\n  componentDidMount() {\r\n    const { season } = this.props;\r\n    if (!this.props.driverStandings[season]) {\r\n      this.props.getDriverStandings(season);\r\n    }\r\n    if (!this.props.constructorStandings[season]) {\r\n      this.props.getConstructorStandings(season);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      season, driverStandings, isLoadingDrivers, errorDrivers,\r\n      constructorStandings, isLoadingConstructors, errorConstructors\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className='container'>\r\n        {this.props.seasonSelect}\r\n        <DriverStandings\r\n          standings={driverStandings[season]}\r\n          isLoading={isLoadingDrivers}\r\n          error={errorDrivers}\r\n        />\r\n        <ConstructorStandings\r\n          standings={constructorStandings[season]}\r\n          isLoading={isLoadingConstructors}\r\n          error={errorConstructors}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Standings;\r\n","import React from 'react';\r\nimport './RaceResults.css';\r\n\r\nconst RaceResults = ({ results }) => {\r\n  return (\r\n    <div className='results responsive-table'>\r\n      <h2>Results</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th className='tr' title='Finish Position'>Pos.</th>\r\n            <th className='tr' title='Grid Position'>Grid</th>\r\n            <th>Driver</th>\r\n            <th>Constructor</th>\r\n            <th>Time</th>\r\n            <th className='tr'>Laps</th>\r\n            <th>Status</th>\r\n            <th className='tr' title='Points'>Pts</th>\r\n            <th>Fastest Lap</th>\r\n            <th title='Average Speed'>Avg Speed</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            results.map(res => {\r\n              return (\r\n                <tr key={res.Driver.driverId + res.position}>\r\n                  <td className='tr'>{res.position}.</td>\r\n                  <td className='tr'>\r\n                    {res.grid === '0' ? 'Pit Lane' : (res.grid + '.')}\r\n                  </td>\r\n                  <td>{res.Driver.givenName} {res.Driver.familyName}</td>\r\n                  <td>{res.Constructor.name}</td>\r\n                  <td>{res.Time ? res.Time.time : 'N/A'}</td>\r\n                  <td className='tr'>{res.laps}</td>\r\n                  <td>{res.status}</td>\r\n                  <td className='tr'>{res.points}</td>\r\n                  <td\r\n                    className={res.FastestLap && res.FastestLap.rank === '1' ? 'fastest' : ''}\r\n                  >\r\n                    {res.FastestLap ? res.FastestLap.Time.time: 'N/A'}\r\n                  </td>\r\n                  <td>\r\n                    { res.FastestLap\r\n                      ? `${res.FastestLap.AverageSpeed.speed} ${res.FastestLap.AverageSpeed.units}`\r\n                      : 'N/A'\r\n                    }\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RaceResults;\r\n","import React from 'react';\r\nimport { ThemeConsumer } from '../../ThemeContext';\r\nimport { notificationOptions } from '../../constants';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBell } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst AddNotification = ({\r\n  addNotification, raceName, dateTime, notificationWhen, setNotificationWhen\r\n}) => {\r\n  let options = [];\r\n  for (const [key, value] of Object.entries(notificationOptions)) {\r\n    options.push(<option key={key} value={key}>{value + ' Before'}</option>);\r\n  }\r\n\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <div>\r\n          <button\r\n            className={`button bg-${theme} b-${theme}`}\r\n            onClick={addNotification(raceName, dateTime, notificationWhen)}\r\n          >\r\n            <FontAwesomeIcon icon={faBell} /> Add notification\r\n          </button>\r\n          <select\r\n            value={notificationWhen}\r\n            onChange={setNotificationWhen}\r\n            className={'b-' + theme}\r\n            aria-label='Select notification time'\r\n          >\r\n            {options}\r\n          </select>\r\n        </div>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default AddNotification;\r\n","import React, { Fragment } from 'react';\r\nimport './RaceDetails.css';\r\nimport RaceResults from './RaceResults';\r\nimport AddNotification from './AddNotification';\r\nimport { getDate } from '../../helpers';\r\nimport { ThemeConsumer } from '../../ThemeContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faExternalLinkAlt, faChevronLeft, faChevronRight, faSpinner\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst RaceDetails = ({\r\n  race, raceCount, results, isLoadingResults, resultsError, onClickRace,\r\n  getRaceResults, addNotification, notificationWhen, setNotificationWhen\r\n}) => {\r\n  const dateTime = getDate(race.date, race.time);\r\n  const round = Number(race.round);\r\n\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <Fragment>\r\n          <div className='container p10'>\r\n            <div className='prev-next mb10 mt10'>\r\n              { round !== 1 &&\r\n                <button\r\n                  className={`button button-left mr10 bg-${theme} b-${theme}`}\r\n                  onClick={onClickRace(round - 1)}\r\n                >\r\n                  <FontAwesomeIcon icon={faChevronLeft} /> Previous Race\r\n                </button>\r\n              }\r\n              { round !== raceCount &&\r\n                <button\r\n                  className={`button button-right bg-${theme} b-${theme}`}\r\n                  onClick={onClickRace(round + 1)}\r\n                >\r\n                  Next Race <FontAwesomeIcon icon={faChevronRight} />\r\n                </button>\r\n              }\r\n            </div>\r\n            <AddNotification\r\n              addNotification={addNotification}\r\n              raceName={race.raceName}\r\n              dateTime={dateTime}\r\n              notificationWhen={notificationWhen}\r\n              setNotificationWhen={setNotificationWhen}\r\n            />\r\n            <h2>Race Details</h2>\r\n            <p>Race: <a href={race.url} className='break-word'\r\n            target='_blank' rel='noopener noreferrer'>\r\n              {race.raceName} <FontAwesomeIcon icon={faExternalLinkAlt} />\r\n            </a></p>\r\n            <p>Season: {race.season}</p>\r\n            <p>Round: {round}</p>\r\n            <p>\r\n              Location: {race.Circuit.Location.country}, {race.Circuit.Location.locality}\r\n            </p>\r\n            <p>Circuit: <a href={race.Circuit.url} className='break-word'\r\n            target='_blank' rel='noopener noreferrer'>\r\n              {race.Circuit.circuitName} <FontAwesomeIcon icon={faExternalLinkAlt} />\r\n            </a></p>\r\n            <p>\r\n              Date and time: {dateTime.toLocaleDateString()} {race.time && dateTime.toLocaleTimeString()}\r\n            </p>\r\n            {!results &&\r\n              <button\r\n                onClick={getRaceResults(race.season, round)}\r\n                className={`button bg-${theme} b-${theme}`}\r\n                disabled={isLoadingResults}\r\n              >\r\n                {isLoadingResults\r\n                  ?\r\n                    <Fragment>\r\n                      <FontAwesomeIcon icon={faSpinner} spin={true} /> {'Loading...'}\r\n                    </Fragment>\r\n                  :\r\n                    <Fragment>Load Results</Fragment>\r\n                }\r\n              </button>\r\n            }\r\n            { resultsError && <p>{resultsError.message}</p> }\r\n          </div>\r\n          { results && <RaceResults results={results} /> }\r\n        </Fragment>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default RaceDetails;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Notifications = ({ notifications, deleteNotification }) => {\r\n  const sortedNotifications = notifications.slice().sort((a, b) => {\r\n    return a.notificationDate - b.notificationDate;\r\n  });\r\n\r\n  return (\r\n    <div className='container'>\r\n      <h2 className='ml10 mr10'>Saved Notifications</h2>\r\n      {\r\n        notifications.length === 0 ?\r\n          <p className='p10'>No saved notifications</p>\r\n        :\r\n          <div className='responsive-table'>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th></th>\r\n                  <th>Title</th>\r\n                  <th>Notified</th>\r\n                  <th>Race Date</th>\r\n                  <th>Notification Date</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {\r\n                  sortedNotifications.map(notification => {\r\n                    const {\r\n                      id, title, notified, raceDate, notificationDate\r\n                    } = notification;\r\n                    return (\r\n                      <tr key={id}>\r\n                        <td>\r\n                          <button\r\n                            onClick={() => deleteNotification(id)}\r\n                            className='button bg-ferrari b-ferrari'\r\n                            title='Delete Notification'\r\n                          >\r\n                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                          </button>\r\n                        </td>\r\n                        <td>{title}</td>\r\n                        <td>{notified ? 'Yes': 'No'}</td>\r\n                        <td>\r\n                          {raceDate.toLocaleDateString()} {raceDate.toLocaleTimeString()}\r\n                        </td>\r\n                        <td>\r\n                          {notificationDate.toLocaleDateString()} {notificationDate.toLocaleTimeString()}\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })\r\n                }\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Notifications;\r\n","import { teams } from './constants';\r\n\r\nexport const getCalendars = () => {\r\n  try {\r\n    let calendars = [];\r\n    for (let i = 0, l = localStorage.length; i < l; i++) {\r\n      if (/^calendar_\\d{4}$/.test(localStorage.key(i))) {\r\n        calendars.push(localStorage.key(i));\r\n      }\r\n    }\r\n    return calendars;\r\n  } catch (error) {\r\n    return [];\r\n  }\r\n}\r\n\r\nexport const saveRaces = (races, season) => {\r\n  try {\r\n    const serializedRaces = JSON.stringify(races);\r\n    localStorage.setItem('calendar_' + season, serializedRaces);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n}\r\n\r\nexport const loadRaces = (season) => {\r\n  try {\r\n    const serializedRaces = localStorage.getItem('calendar_' + season);\r\n    if (serializedRaces === null) return undefined;\r\n    return JSON.parse(serializedRaces);\r\n  } catch (error) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport const saveNotifications = (notifications) => {\r\n  try {\r\n    const serializedNotifications = JSON.stringify(notifications);\r\n    localStorage.setItem('notifications', serializedNotifications);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n}\r\n\r\nexport const loadNotifications = () => {\r\n  try {\r\n    const serializedNotifications = localStorage.getItem('notifications');\r\n    if (serializedNotifications === null) return undefined;\r\n    return JSON.parse(serializedNotifications, (key, value) => {\r\n      if (key === 'notificationDate' || key === 'raceDate') {\r\n        return new Date(value);\r\n      } else {\r\n        return value;\r\n      }\r\n    });\r\n  } catch (error) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport const saveTheme = (theme) => {\r\n  try {\r\n    localStorage.setItem('theme', theme);\r\n  } catch (error) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport const loadTheme = () => {\r\n  try {\r\n    const theme = localStorage.getItem('theme');\r\n    for (let i = 0, l = teams.length; i < l; i++) {\r\n      if (teams[i].id === theme) {\r\n        return theme;\r\n      }\r\n    }\r\n    return 'ferrari';\r\n  } catch (error) {\r\n    return 'ferrari';\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Calendars.css';\r\nimport { getCalendars } from '../../localStorage';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Calendars extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      calendars: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const calendars = getCalendars();\r\n    this.setState({ calendars });\r\n  }\r\n\r\n  deleteCalendar = (calendar) => () => {\r\n    const calendars = this.state.calendars.filter(c => c !== calendar);\r\n    this.setState({ calendars });\r\n    localStorage.removeItem(calendar);\r\n  }\r\n\r\n  render() {\r\n    const sortedCalendars = this.state.calendars.slice().sort((a, b) => {\r\n      return a.slice(-4) - b.slice(-4);\r\n    });\r\n\r\n    return (\r\n      <div className='container'>\r\n        <h2 className='ml10 mr10'>Saved Calendars</h2>\r\n        {\r\n          this.state.calendars.length === 0 ?\r\n            <p className='p10'>No saved calendars</p>\r\n          :\r\n            <ul className='ml10 mr10'>\r\n              {\r\n                sortedCalendars.map(calendar => {\r\n                  return (\r\n                    <li key={calendar}>\r\n                      <button\r\n                        className='button bg-ferrari b-ferrari mr10 mb10'\r\n                        title='Delete Calendar'\r\n                        onClick={this.deleteCalendar(calendar)}\r\n                      >\r\n                        <FontAwesomeIcon icon={faTrashAlt} />\r\n                      </button>\r\n                      <span>{calendar.slice(-4)}</span>\r\n                    </li>\r\n                  );\r\n                })\r\n              }\r\n            </ul>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calendars;\r\n","import React from 'react';\r\nimport './SeasonSelect.css';\r\nimport { FIRST_SEASON, CURRENT_SEASON } from '../constants';\r\nimport { ThemeConsumer } from '../ThemeContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst SeasonSelect = ({ season, onSelectSeason, onChangeSeason }) => {\r\n  let seasonOptions = [];\r\n  for (let i = FIRST_SEASON; i <= CURRENT_SEASON; i++) {\r\n    seasonOptions.push(<option key={i} value={i}>Season {i}</option>);\r\n  }\r\n\r\n  return (\r\n    <ThemeConsumer>\r\n      {theme =>\r\n        <div className='season ml10 mb10'>\r\n          { season !== FIRST_SEASON &&\r\n            <button\r\n              onClick={onChangeSeason(-1)}\r\n              title='Previous season'\r\n              className={`button bg-${theme} b-${theme}`}\r\n            >\r\n              <FontAwesomeIcon icon={faChevronLeft} />\r\n            </button>\r\n          }\r\n          <select\r\n            value={season}\r\n            onChange={onSelectSeason}\r\n            className={'b-' + theme}\r\n            aria-label='Select season'\r\n          >\r\n            {seasonOptions}\r\n          </select>\r\n          { season !== CURRENT_SEASON &&\r\n            <button\r\n              onClick={onChangeSeason(1)}\r\n              title='Next season'\r\n              className={`button bg-${theme} b-${theme}`}\r\n            >\r\n              <FontAwesomeIcon icon={faChevronRight} />\r\n            </button>\r\n          }\r\n        </div>\r\n      }\r\n    </ThemeConsumer>\r\n  );\r\n}\r\n\r\nexport default SeasonSelect;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <div className='p10'>\r\n        Icons made by <a href=\"https://www.freepik.com/\" title=\"Freepik\">\r\n        Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\r\n        www.flaticon.com</a> is licensed by <a href=\"http://creativecommons.org/licenses/by/3.0/\"\r\n        title=\"Creative Commons BY 3.0\" target=\"_blank\"\r\n        rel=\"noopener noreferrer\">CC 3.0 BY</a>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component, Fragment } from 'react';\r\nimport {\r\n  fetchRaces, fetchRaceResults, fetchDriverStandings, fetchConstructorStandings\r\n} from './api';\r\nimport * as deepmerge from 'deepmerge';\r\nimport Header from './components/Header';\r\nimport Navigation from './components/Navigation/Navigation';\r\nimport RaceList from './components/RaceList/RaceList';\r\nimport Standings from './components/Standings/Standings';\r\nimport RaceDetails from './components/RaceDetails/RaceDetails';\r\nimport Notifications from './components/SavedData/Notifications';\r\nimport Calendars from './components/SavedData/Calendars';\r\nimport SeasonSelect from './components/SeasonSelect';\r\nimport Footer from './components/Footer';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport { ThemeProvider } from './ThemeContext';\r\nimport {\r\n  FIRST_SEASON, CURRENT_SEASON, notificationOptions\r\n} from './constants';\r\nimport {\r\n  saveRaces, loadRaces, saveNotifications, loadNotifications,\r\n  saveTheme, loadTheme\r\n} from './localStorage';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      races: {},\r\n      isLoading: false,\r\n      error: null,\r\n      season: CURRENT_SEASON,\r\n      selectedRaceRound: 0,\r\n      results: {},\r\n      isLoadingResults: false,\r\n      resultsError: null,\r\n      notifications: [],\r\n      notificationWhen: '60',\r\n      route: 'RaceList',\r\n      theme: '',\r\n      driverStandings: {},\r\n      isLoadingDrivers: false,\r\n      errorDrivers: null,\r\n      constructorStandings: {},\r\n      isLoadingConstructors: false,\r\n      errorConstructors: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getRaces(this.state.season);\r\n    const notifications = loadNotifications();\r\n    if (notifications) {\r\n      this.setState(\r\n        { notifications },\r\n        () => this.checkNotifications()\r\n      );\r\n    }\r\n    const theme = loadTheme();\r\n    this.setState({ theme });\r\n    this.interval = setInterval(this.checkNotifications, 60 * 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  setTheme = (e) => {\r\n    this.setState({ theme: e.target.value });\r\n    saveTheme(e.target.value);\r\n  }\r\n\r\n  checkNotifications = () => {\r\n    const { notifications } = this.state;\r\n    const nowTime = Math.floor(new Date().getTime() / 1000 / 60);\r\n\r\n    notifications.forEach(notification => {\r\n      const { notificationDate, raceDate, title, body } = notification;\r\n      const notificationTime = Math.floor(notificationDate.getTime() / 1000 / 60);\r\n\r\n      const showNotification = (title, body) => {\r\n        new Notification(title, { body: body });\r\n        notification.notified = true;\r\n        this.deleteNotification(notification.id);\r\n      }\r\n\r\n      if (notificationTime === nowTime && !notification.notified) {\r\n        showNotification(title, body);\r\n      } else if (notificationTime < nowTime && !notification.notified) {\r\n        showNotification(\r\n          'Missed notification: ' + title,\r\n          `Notification time: ${notificationDate.toLocaleDateString()} ${notificationDate.toLocaleTimeString()}\r\nRace time: ${raceDate.toLocaleDateString()} ${raceDate.toLocaleTimeString()}`\r\n        );\r\n      } else if (notification.notified) {\r\n        this.deleteNotification(notification.id);\r\n      }\r\n    });\r\n  }\r\n\r\n  getRaces = (season) => {\r\n    const races = loadRaces(season);\r\n    if (races) {\r\n      const newRaces = { [season]: races };\r\n      this.setState(prevState => {\r\n        return { races: { ...prevState.races, ...newRaces } };\r\n      });\r\n    } else {\r\n      if (!navigator.onLine) {\r\n        toast.error('You are offline :(');\r\n        return;\r\n      }\r\n\r\n      this.setState({ isLoading: true });\r\n      fetchRaces(season)\r\n        .then(races => {\r\n          const newRaces = { [season]: races };\r\n          this.setState(prevState => {\r\n            return {\r\n              races: { ...prevState.races, ...newRaces },\r\n              isLoading: false\r\n            };\r\n          });\r\n\r\n          if (season === CURRENT_SEASON) {\r\n            saveRaces(races, season);\r\n          }\r\n        })\r\n        .catch(error => this.setState({ error, isLoading: false }));\r\n    }\r\n  }\r\n\r\n  getRaceResults = (season, round) => () => {\r\n    if (!navigator.onLine) {\r\n      toast.error('You are offline :(');\r\n      return;\r\n    }\r\n\r\n    this.setState({ isLoadingResults: true });\r\n    fetchRaceResults(season, round)\r\n      .then(results => {\r\n        let newResults = {\r\n          [season]: {\r\n            [round]: results\r\n          }\r\n        };\r\n\r\n        this.setState(prevState => {\r\n          return {\r\n            results: deepmerge(prevState.results, newResults),\r\n            isLoadingResults: false,\r\n            resultsError: null\r\n          };\r\n        });\r\n      })\r\n      .catch(error => {\r\n        this.setState({ resultsError: error, isLoadingResults: false });\r\n      });\r\n  }\r\n\r\n  getDriverStandings = (season) => {\r\n    if (!navigator.onLine) {\r\n      toast.error('You are offline :(');\r\n      return;\r\n    }\r\n\r\n    this.setState({ isLoadingDrivers: true });\r\n    fetchDriverStandings(season)\r\n      .then(standings => {\r\n        this.setState(prevState => {\r\n          const newStandings = { [season]: standings };\r\n          return {\r\n            driverStandings: { ...prevState.driverStandings, ...newStandings },\r\n            isLoadingDrivers: false\r\n          };\r\n        });\r\n      })\r\n      .catch(error => {\r\n        this.setState({ isLoadingDrivers: false, errorDrivers: error });\r\n      });\r\n  }\r\n\r\n  getConstructorStandings = (season) => {\r\n    if (!navigator.onLine) {\r\n      return;\r\n    }\r\n\r\n    this.setState({ isLoadingConstructors: true });\r\n    fetchConstructorStandings(season)\r\n      .then(standings => {\r\n        this.setState(prevState => {\r\n          const newStandings = { [season]: standings };\r\n          return {\r\n            constructorStandings: {\r\n              ...prevState.constructorStandings, ...newStandings\r\n            },\r\n            isLoadingConstructors: false\r\n          };\r\n        });\r\n      })\r\n      .catch(error => {\r\n        this.setState({\r\n          isLoadingConstructors: false,\r\n          errorConstructors: error\r\n        });\r\n      });\r\n  }\r\n\r\n  onClickRace = (raceRound) => () => {\r\n    this.selectRace(raceRound);\r\n  }\r\n\r\n  onEnterRace = (raceRound) => (e) => {\r\n    if (e.key === 'Enter') {\r\n      this.selectRace(raceRound);\r\n    }\r\n  }\r\n\r\n  selectRace = (raceRound) => {\r\n    this.setState({\r\n      selectedRaceRound: Number(raceRound),\r\n      route: 'RaceDetails',\r\n      resultsError: null\r\n    });\r\n  }\r\n\r\n  onSelectSeason = (e) => {\r\n    this.setSeason(Number(e.target.value));\r\n  }\r\n\r\n  onChangeSeason = (change) => () => {\r\n    const newSeason = Number(this.state.season) + change;\r\n    if (newSeason >= FIRST_SEASON && newSeason <= CURRENT_SEASON) {\r\n      this.setSeason(newSeason);\r\n    }\r\n  }\r\n\r\n  setSeason = (season) => {\r\n    const { route, races, driverStandings } = this.state;\r\n    this.setState({\r\n      season,\r\n      error: null\r\n    });\r\n    if (!races[season] && route === 'RaceList') {\r\n      this.getRaces(season);\r\n    }\r\n    if (!driverStandings[season] && route === 'Standings') {\r\n      this.getDriverStandings(season);\r\n      this.getConstructorStandings(season);\r\n    }\r\n  }\r\n\r\n  onSaveRaces = () => {\r\n    const error = saveRaces(this.state.races[this.state.season], this.state.season);\r\n    if (error) {\r\n      toast.error('Error - calendar was not saved :(');\r\n    } else {\r\n      toast.success('Calendar saved to browser storage');\r\n    }\r\n  }\r\n\r\n  addNotification = (raceName, raceDate, notificationWhen) => () => {\r\n    if (!('Notification' in window)) {\r\n      toast.error('This browser does not support notifications :(');\r\n      return;\r\n    }\r\n\r\n    if (raceDate < new Date()) {\r\n      toast.error('This race already started or is over');\r\n      return;\r\n    }\r\n\r\n    let notificationDate = new Date(raceDate);\r\n    notificationDate.setMinutes(notificationDate.getMinutes() - (Number(notificationWhen) ? notificationWhen : 60));\r\n\r\n    const id = notificationDate.getTime();\r\n    for (let i = 0, l = this.state.notifications.length; i < l; i++) {\r\n      if (this.state.notifications[i].id === id) {\r\n        toast.error('Notification already exists');\r\n        return;\r\n      }\r\n    }\r\n\r\n    const createNotification = () => {\r\n      let body = 'Race Starts in ';\r\n      body += notificationOptions[notificationWhen] ? notificationOptions[notificationWhen] : notificationOptions['60'];\r\n\r\n      const notification = {\r\n        id,\r\n        raceDate,\r\n        notificationDate,\r\n        notified: false,\r\n        title: raceName,\r\n        body\r\n      };\r\n\r\n      const error = saveNotifications(this.state.notifications.concat(notification));\r\n      if (error) {\r\n        toast.error('Error - notification was not saved :(');\r\n      } else {\r\n        toast.success('Notification saved to browser storage');\r\n        this.setState(state => {\r\n          return { notifications: state.notifications.concat(notification) };\r\n        }, () => this.checkNotifications());\r\n      }\r\n    }\r\n\r\n    if (Notification.permission === 'granted') {\r\n      createNotification();\r\n    } else if (Notification.permission !== 'denied') {\r\n      Notification.requestPermission().then(permission => {\r\n        if (permission === 'granted') {\r\n          createNotification();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  deleteNotification = (id) => {\r\n    const notifications = this.state.notifications.filter(notification => {\r\n      return notification.id !== id;\r\n    });\r\n    const error = saveNotifications(notifications);\r\n    if (error) {\r\n      toast.error('Error - Unable to delete notification :(');\r\n    } else {\r\n      this.setState({ notifications });\r\n    }\r\n  }\r\n\r\n  setNotificationWhen = (e) => {\r\n    this.setState({ notificationWhen: e.target.value });\r\n  }\r\n\r\n  setRoute = (route) => () => {\r\n    this.setState({ route });\r\n    if (route === 'RaceList' || route === 'Standings') {\r\n      this.setState({ season: CURRENT_SEASON });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      races, isLoading, error, season, notifications, selectedRaceRound, route,\r\n      results, isLoadingResults, resultsError, notificationWhen, theme,\r\n      driverStandings, isLoadingDrivers, errorDrivers,\r\n      constructorStandings, isLoadingConstructors, errorConstructors\r\n    } = this.state;\r\n    const seasonRaces = races[season];\r\n\r\n    let selectedRace = null;\r\n    if (selectedRaceRound > 0 && races[season]) {\r\n      const i = races[season].findIndex((race) => {\r\n        return Number(race.round) === selectedRaceRound;\r\n      });\r\n      selectedRace = races[season][i];\r\n    }\r\n\r\n    let upcomingRace = '';\r\n    if (seasonRaces && season === CURRENT_SEASON) {\r\n      for (let i = 0, l = seasonRaces.length, d = new Date(); i < l; i++) {\r\n        if (d < new Date(seasonRaces[i].date + 'T' + seasonRaces[i].time)) {\r\n          upcomingRace = seasonRaces[i].round;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    let raceResults;\r\n    if (selectedRace && results[selectedRace.season]) {\r\n      raceResults = results[selectedRace.season][selectedRace.round];\r\n    }\r\n\r\n    const seasonSelect = (\r\n      <SeasonSelect\r\n        season={season}\r\n        onSelectSeason={this.onSelectSeason}\r\n        onChangeSeason={this.onChangeSeason}\r\n      />\r\n    );\r\n\r\n    return (\r\n      <ThemeProvider value={theme}>\r\n        <Fragment>\r\n          <Header setTheme={this.setTheme} />\r\n          <Navigation setRoute={this.setRoute} route={route} />\r\n          <ToastContainer\r\n            position='bottom-center'\r\n            autoClose={5000}\r\n            hideProgressBar\r\n            newestOnTop={false}\r\n            closeOnClick={false}\r\n            rtl={false}\r\n            pauseOnVisibilityChange\r\n            draggable={false}\r\n            pauseOnHover\r\n          />\r\n          { route === 'Notifications' &&\r\n            <Notifications\r\n              notifications={notifications}\r\n              deleteNotification={this.deleteNotification}\r\n            />\r\n          }\r\n          { route === 'Calendars' && <Calendars /> }\r\n          { route === 'RaceDetails' &&\r\n            <RaceDetails\r\n              race={selectedRace}\r\n              raceCount={seasonRaces.length}\r\n              results={raceResults}\r\n              isLoadingResults={isLoadingResults}\r\n              resultsError={resultsError}\r\n              onClickRace={this.onClickRace}\r\n              getRaceResults={this.getRaceResults}\r\n              addNotification={this.addNotification}\r\n              notificationWhen={notificationWhen}\r\n              setNotificationWhen={this.setNotificationWhen}\r\n            />\r\n          }\r\n          { route === 'RaceList' &&\r\n            <RaceList\r\n              races={seasonRaces}\r\n              upcomingRace={upcomingRace}\r\n              isLoading={isLoading}\r\n              error={error}\r\n              onClickRace={this.onClickRace}\r\n              onEnterRace={this.onEnterRace}\r\n              onSaveRaces={this.onSaveRaces}\r\n              seasonSelect={seasonSelect}\r\n            />\r\n          }\r\n          { route === 'Standings' &&\r\n            <Standings\r\n              season={season}\r\n              driverStandings={driverStandings}\r\n              isLoadingDrivers={isLoadingDrivers}\r\n              errorDrivers={errorDrivers}\r\n              getDriverStandings={this.getDriverStandings}\r\n              constructorStandings={constructorStandings}\r\n              isLoadingConstructors={isLoadingConstructors}\r\n              errorConstructors={errorConstructors}\r\n              getConstructorStandings={this.getConstructorStandings}\r\n              seasonSelect={seasonSelect}\r\n            />\r\n          }\r\n          <Footer />\r\n        </Fragment>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}